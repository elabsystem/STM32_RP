#include "ov2640.h"


#define _IMAGE_SIZE_X 640
#define _IMAGE_SIZE_Y 480
#define _UDP_TX_BUF_RATE	1




#define _FRAME_BUF_SIZE	(_IMAGE_SIZE_X*2)


//#define _FRAME_BUF_SIZE	(480 * 136)
volatile uint16_t FrameBuffer[_FRAME_BUF_SIZE];	// ī�޶󿡼� ������ ������ ��� ������ ����
uint16_t FrameBuffer2[_FRAME_BUF_SIZE];
uint32_t RemaindImage1 = (uint32_t)FrameBuffer + (480 * 136) * 2; //  2��° ���� ���� ��ġ. RGB565 2Byte�̹Ƿ� ���ϱ� 2
uint32_t RemaindImage2 = (uint32_t)FrameBuffer + (480 * 136 * 2) * 2;	// 3��° ���� ���� ��ġ
uint32_t Remainder = 0;						// 3�� ������ ������ ������ ��� �κ����� ǥ��
uint32_t CameraInit = 0;					// ī�޶� �ʱ�ȭ �Ǿ���.
volatile uint32_t gCameraFrameFlag = 0;		// ī�޶󿡼� �� �������� ���� �Խ�.
volatile uint32_t gCameraLineFlag = 0;		// ī�޶󿡼� �� �������� ���� �Խ�.


volatile uint32_t gLineCnt = 0;
volatile uint32_t gDmaCnt = 0;
 uint32_t gFrameCnt = 0;
unsigned int gFrameRate = 0;

static void TransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_stream0);

// ī�޶󿡼� �� �������� ��� ���۵Ǿ��� �� �ҷ���
// ���⼭ �ٷ� LCD���� DMA�� �����ص� ������, ���߿� ����ó�� ���� �۾����� �����ؼ� �÷��׸� �����
// ���η������� ó���ϵ��� ����.

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{

	//CamImagTransferLine(_CMD_CAM_FRAME, gCameraFrameFlag);
	//GPIOF->ODR ^= BIT10;


}

// ī�޶󿡼� VSYNC �̺�Ʈ�� �߻��߽�
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
	//������ ���۽�++
	//GPIOD->ODR ^= BIT12;
	gCameraFrameFlag++;
	//sbi(GPIOD, BIT11);
	//CamImagTransferFrame(_CMD_CAM_FRAME, gLineCnt);
	//cbi(GPIOD, BIT11);


	//CamImagTransferFrame(_CMD_CAM_FRAME, gFrameRate);

		//printf(">%d\r\n", gCameraFrameFlag);
	//gFrameCnt++;
	//CamImagTransferLine(_CMD_CAM_FRAME, gFrameCnt);//gFrameRate);

}

// ī�޶󿡼� �� ������ ���Խ�
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{

	gCameraLineFlag++;

	//sbi(GPIOD, BIT12);
	//CamImagTransferLine(_CMD_CAM_LINE, gLineCnt);
	//cbi(GPIOD, BIT12);


	//gLineCnt++;
		//if(indx>3)indx=0;
/*
	  	data_buf[0] = _CMD_CAM_DATA;
	  	data_buf[1] = 0;
	  	data_buf[2] = gLineCnt>>8;
	  	data_buf[3] = gLineCnt;

		memcpy((uint8_t *)&data_buf[4], (uint8_t *)&FrameBuffer, _IMAGE_SIZE_X*2*_UDP_TX_BUF_RATE);

	  	//memcpy((uint8_t *)&data_buf[4], (uint8_t *)&FrameBuffer2+, _UDP_TX_BUF_SIZE);

		//sendto(3, data_buf, 1460 , gDestip, dDestport);
		sendto(3, data_buf, 4+_IMAGE_SIZE_X*2*_UDP_TX_BUF_RATE , gDestip, dDestport);

		//indx++;

		//Remainder=1;

*/
	//if((gLineCnt%_UDP_TX_BUF_RATE)==0)
		//



}

// ������ ���ۿ��� DMA�� LCD�� ������ �Ϸ�Ǿ���.
// ������ ���� 480x320=153,600, �� 64K�� �����Ƿ� 3���� ����� �����ؾ� ��.
// Remainder = 2 �� ���� ù��° ���� �Ϸ��̰�, Remainder = 1 �� ���� �ι�° ���� �Ϸ�, Remainder = 0 �̸� ���� ��.
static void TransferComplete(DMA_HandleTypeDef *hdma_dcmi)
{
	//GPIOD->ODR ^= BIT11;
}


static void I2Cx_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Write(&hI2C_Cam, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);

  /* Check the communication status */
  if(status != HAL_OK)
  {
    /* Execute user timeout callback */
    //I2Cx_Error(Addr);
  }
}

/**
  * @brief  Reads a single data.
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
static uint8_t I2Cx_Read(uint8_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t Value = 0;

  status = HAL_I2C_Mem_Read(&hI2C_Cam, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);

  /* Check the communication status */
  if(status != HAL_OK)
  {
    /* Execute user timeout callback */
    //I2Cx_Error(Addr);
  }
  return Value;
}

/**
  * @brief  Camera writes single data.
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void CAMERA_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_Write(Addr, Reg, Value);
}

/**
  * @brief  Camera reads single data.
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint8_t Addr, uint8_t Reg)
{
  return I2Cx_Read(Addr, Reg);
}

/**
  * @brief  Camera delay
  * @param  Delay: Delay in ms
  */
void CAMERA_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
}

void CAMERA_IO_Init(void)
{
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
	HAL_Delay(100);
}

void _init_cam(void)
{
	volatile uint32_t idc = ov2640_ReadID(CAMERA_I2C_ADDRESS);
	printf("id = %x\r\n", idc);

	ov2640_Init(CAMERA_I2C_ADDRESS, CAMERA_R640x480);
}
