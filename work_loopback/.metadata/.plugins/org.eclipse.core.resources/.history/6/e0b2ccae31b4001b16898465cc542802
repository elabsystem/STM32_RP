#include "socket.h"
#include "wizchip_conf.h"


#define true					1
#define false					0

#define SOCK_TCPS       0
#define SOCK_UDPS       1
#define PORT_TCPS		5000
#define PORT_UDPS       3000


#define RESET_W5300_GPIO_Port			GPIOE
#define RESET_W5300_Pin					GPIO_PIN_3

uint8_t wiznet_memsize[2][8] = {{8,8,8,8,8,8,8,8}, {8,8,8,8,8,8,8,8}};

#define ETH_MAX_BUF_SIZE		2048

uint8_t ethBuf0[ETH_MAX_BUF_SIZE];


wiz_NetInfo gWIZNETINFO = {
		.mac = {0x00, 0x08, 0xdc, 0, 0, 0},
		.ip = {172, 30, 1, 104},
		.sn = {255, 255, 0, 0},
		.gw = {172, 30, 1, 254},
		.dns = {0, 0, 0, 0},
		.dhcp = NETINFO_STATIC
};

/*
wiz_NetInfo gWIZNETINFO = {
		.mac = {0x00, 0x08, 0xdc, 0, 0, 0},
		.ip = {192, 168, 10, 184},
		.sn = {255, 255, 255, 0},
		.gw = {192, 168, 10, 1},
		.dns = {168, 126, 63, 1},
		.dhcp = NETINFO_STATIC
};
*/
#define W5300_BANK_ADDR                 ((uint32_t)0x64000000)
#define _W5300_DATA(p)                  (*(volatile unsigned short*) (W5300_BANK_ADDR + (p<<1)))

void Reset_W5300()
{
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
	HAL_Delay(100);
}

void W5300_write(uint32_t addr, iodata_t wd)
{
	//*((uint16_t*)(addr &lt;&lt; 1)) = wd;
	//_W5300_DATA(addr) = wd;
	//*((uint16_t*)(addr << 1)) = wd;

	//*(volatile unsigned short*)(addr << 1) = wd;
	//*(volatile unsigned short*)(addr) = wd;

	_W5300_DATA(addr) = wd;
}

iodata_t W5300_read(uint32_t addr)
{
	//return *((uint16_t*)(addr &lt;&lt; 1));
	return _W5300_DATA(addr);
	//return (*(volatile unsigned short*)(addr << 1));
	//return (*(volatile unsigned short*)(addr));
}
/* USER CODE END 0 */



void print_network_information(void)
{

    wizchip_getnetinfo(&gWIZNETINFO);
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
}

void _InitW5300(void);

void _InitW5300(void)
{
	unsigned int tmpaddr[4];

	Reset_W5300();
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);

	//printf("getMR() = %04X\r\n", _W5300_DATA(0));

	printf("getMR() = %04X\r\n", getMR());

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
	{
		printf("W5300 memory initialization failed\r\n");
	}

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
	print_network_information();
}

