
ex12_w5300_netcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005348  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dfc  08005dfc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08005dfc  08005dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e04  08005e04  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08005e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001404  200000d0  08005edc  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014d4  08005edc  000214d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a94  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e59  00000000  00000000  00038b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000102dc  00000000  00000000  0003c9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0004ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002258  00000000  00000000  0004d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c3f  00000000  00000000  0004fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019945  00000000  00000000  0007383f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d217e  00000000  00000000  0008d184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015f302  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003394  00000000  00000000  0015f358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054c0 	.word	0x080054c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	080054c0 	.word	0x080054c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_InitTick+0x3c>)
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_InitTick+0x40>)
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	681b      	ldr	r3, [r3, #0]
{
 8000572:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	fbb0 f0f2 	udiv	r0, r0, r2
 800057c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000580:	f000 f8ae 	bl	80006e0 <HAL_SYSTICK_Config>
 8000584:	b908      	cbnz	r0, 800058a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	2d0f      	cmp	r5, #15
 8000588:	d901      	bls.n	800058e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800058a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800058c:	bd38      	pop	{r3, r4, r5, pc}
 800058e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	4602      	mov	r2, r0
 8000592:	4629      	mov	r1, r5
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 f85c 	bl	8000654 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_InitTick+0x44>)
 800059e:	4620      	mov	r0, r4
 80005a0:	601d      	str	r5, [r3, #0]
}
 80005a2:	bd38      	pop	{r3, r4, r5, pc}
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000068 	.word	0x20000068
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_Init>:
{
 80005b0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x30>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f82d 	bl	800062c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f7ff ffc8 	bl	8000568 <HAL_InitTick>
  HAL_MspInit();
 80005d8:	f003 fd3a 	bl	8004050 <HAL_MspInit>
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <HAL_IncTick+0x10>)
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_IncTick+0x14>)
 80005e8:	6811      	ldr	r1, [r2, #0]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	440b      	add	r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000138 	.word	0x20000138
 80005f8:	20000000 	.word	0x20000000

080005fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_GetTick+0x8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000138 	.word	0x20000138

08000608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000608:	b538      	push	{r3, r4, r5, lr}
 800060a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff6 	bl	80005fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000610:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000612:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000614:	d002      	beq.n	800061c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <HAL_Delay+0x20>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	1b43      	subs	r3, r0, r5
 8000622:	42a3      	cmp	r3, r4
 8000624:	d3fa      	bcc.n	800061c <HAL_Delay+0x14>
  {
  }
}
 8000626:	bd38      	pop	{r3, r4, r5, pc}
 8000628:	20000000 	.word	0x20000000

0800062c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4908      	ldr	r1, [pc, #32]	; (8000650 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800062e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000632:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000634:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000638:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000648:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800064c:	60cb      	str	r3, [r1, #12]
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_NVIC_SetPriority+0x68>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065e:	f1c3 0507 	rsb	r5, r3, #7
 8000662:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000664:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	bf28      	it	cs
 800066a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066c:	2c06      	cmp	r4, #6
 800066e:	d919      	bls.n	80006a4 <HAL_NVIC_SetPriority+0x50>
 8000670:	3b03      	subs	r3, #3
 8000672:	f04f 34ff 	mov.w	r4, #4294967295
 8000676:	409c      	lsls	r4, r3
 8000678:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 34ff 	mov.w	r4, #4294967295
 8000680:	40ac      	lsls	r4, r5
 8000682:	ea21 0104 	bic.w	r1, r1, r4
 8000686:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000688:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800068e:	db0c      	blt.n	80006aa <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000694:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000698:	0109      	lsls	r1, r1, #4
 800069a:	b2c9      	uxtb	r1, r1
 800069c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006a0:	bc30      	pop	{r4, r5}
 80006a2:	4770      	bx	lr
 80006a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	4613      	mov	r3, r2
 80006a8:	e7e8      	b.n	800067c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_NVIC_SetPriority+0x6c>)
 80006ac:	f000 000f 	and.w	r0, r0, #15
 80006b0:	0109      	lsls	r1, r1, #4
 80006b2:	4403      	add	r3, r0
 80006b4:	b2c9      	uxtb	r1, r1
 80006b6:	7619      	strb	r1, [r3, #24]
 80006b8:	bc30      	pop	{r4, r5}
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	e000ecfc 	.word	0xe000ecfc

080006c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006c4:	2800      	cmp	r0, #0
 80006c6:	db07      	blt.n	80006d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c8:	f000 011f 	and.w	r1, r0, #31
 80006cc:	4a03      	ldr	r2, [pc, #12]	; (80006dc <HAL_NVIC_EnableIRQ+0x18>)
 80006ce:	0940      	lsrs	r0, r0, #5
 80006d0:	2301      	movs	r3, #1
 80006d2:	408b      	lsls	r3, r1
 80006d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e0:	3801      	subs	r0, #1
 80006e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006e6:	d20e      	bcs.n	8000706 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ea:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	4c08      	ldr	r4, [pc, #32]	; (8000710 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	20f0      	movs	r0, #240	; 0xf0
 80006f2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006fa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80006fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	6019      	str	r1, [r3, #0]
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8000714:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000716:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  if(hdcmi->XferCount != 0U)
 8000718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800071a:	b33b      	cbz	r3, 800076c <DCMI_DMAXferCplt+0x58>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800071c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800071e:	6803      	ldr	r3, [r0, #0]
 8000720:	6819      	ldr	r1, [r3, #0]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8000722:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000724:	f012 0201 	ands.w	r2, r2, #1
 8000728:	d013      	beq.n	8000752 <DCMI_DMAXferCplt+0x3e>
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
      hdcmi->XferCount--;
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	0312      	lsls	r2, r2, #12
 800072e:	d530      	bpl.n	8000792 <DCMI_DMAXferCplt+0x7e>
 8000730:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
    hdcmi->XferCount = hdcmi->XferTransferNumber;
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8000732:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000734:	429a      	cmp	r2, r3
 8000736:	d000      	beq.n	800073a <DCMI_DMAXferCplt+0x26>
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
    }
  }
}
 8000738:	bd10      	pop	{r4, pc}
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800073a:	6823      	ldr	r3, [r4, #0]
 800073c:	68da      	ldr	r2, [r3, #12]
 800073e:	f042 0201 	orr.w	r2, r2, #1
 8000742:	60da      	str	r2, [r3, #12]
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	079b      	lsls	r3, r3, #30
      hdcmi->State= HAL_DCMI_STATE_READY;
 8000748:	bf44      	itt	mi
 800074a:	2301      	movmi	r3, #1
 800074c:	f884 3025 	strbmi.w	r3, [r4, #37]	; 0x25
}
 8000750:	bd10      	pop	{r4, pc}
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8000752:	0309      	lsls	r1, r1, #12
 8000754:	d5e9      	bpl.n	800072a <DCMI_DMAXferCplt+0x16>
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8000756:	68db      	ldr	r3, [r3, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8000758:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800075a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 800075e:	f000 fd3b 	bl	80011d8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8000762:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000766:	3a01      	subs	r2, #1
 8000768:	62a2      	str	r2, [r4, #40]	; 0x28
 800076a:	e7e2      	b.n	8000732 <DCMI_DMAXferCplt+0x1e>
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800076c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	6813      	ldr	r3, [r2, #0]
 8000772:	0318      	lsls	r0, r3, #12
 8000774:	d502      	bpl.n	800077c <DCMI_DMAXferCplt+0x68>
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8000776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000778:	60d3      	str	r3, [r2, #12]
 800077a:	e7d9      	b.n	8000730 <DCMI_DMAXferCplt+0x1c>
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800077c:	6813      	ldr	r3, [r2, #0]
 800077e:	0319      	lsls	r1, r3, #12
 8000780:	d4d6      	bmi.n	8000730 <DCMI_DMAXferCplt+0x1c>
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8000782:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8000786:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000788:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800078c:	6111      	str	r1, [r2, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800078e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000790:	e7cf      	b.n	8000732 <DCMI_DMAXferCplt+0x1e>
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8000792:	691b      	ldr	r3, [r3, #16]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8000794:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000796:	2201      	movs	r2, #1
 8000798:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800079c:	e7df      	b.n	800075e <DCMI_DMAXferCplt+0x4a>
 800079e:	bf00      	nop

080007a0 <HAL_DCMI_Start_DMA>:
{
 80007a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007a4:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 80007a6:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80007aa:	2801      	cmp	r0, #1
{
 80007ac:	b082      	sub	sp, #8
  __HAL_LOCK(hdcmi);
 80007ae:	d05d      	beq.n	800086c <HAL_DCMI_Start_DMA+0xcc>
  __HAL_DCMI_ENABLE(hdcmi);
 80007b0:	6825      	ldr	r5, [r4, #0]
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80007b2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8000874 <HAL_DCMI_Start_DMA+0xd4>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80007b6:	2002      	movs	r0, #2
  __HAL_LOCK(hdcmi);
 80007b8:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80007bc:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_LOCK(hdcmi);
 80007c0:	f884 e024 	strb.w	lr, [r4, #36]	; 0x24
  __HAL_DCMI_ENABLE(hdcmi);
 80007c4:	f8d5 c000 	ldr.w	ip, [r5]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80007c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_DCMI_ENABLE(hdcmi);
 80007ca:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 80007ce:	f8c5 c000 	str.w	ip, [r5]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80007d2:	f8d5 c000 	ldr.w	ip, [r5]
 80007d6:	f02c 0c02 	bic.w	ip, ip, #2
 80007da:	f8c5 c000 	str.w	ip, [r5]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80007de:	f8d5 c000 	ldr.w	ip, [r5]
 80007e2:	ea4c 0101 	orr.w	r1, ip, r1
 80007e6:	6029      	str	r1, [r5, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80007e8:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8000878 <HAL_DCMI_Start_DMA+0xd8>
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80007ec:	f8c0 804c 	str.w	r8, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80007f0:	2100      	movs	r1, #0
  if(Length <= 0xFFFFU)
 80007f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80007f6:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80007fa:	6501      	str	r1, [r0, #80]	; 0x50
  hdcmi->XferCount = 0U;
 80007fc:	62a1      	str	r1, [r4, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 80007fe:	6321      	str	r1, [r4, #48]	; 0x30
  if(Length <= 0xFFFFU)
 8000800:	d32f      	bcc.n	8000862 <HAL_DCMI_Start_DMA+0xc2>
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8000802:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
    hdcmi->XferCount = 1U;
 8000806:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
    hdcmi->XferSize = Length;
 800080a:	62e3      	str	r3, [r4, #44]	; 0x2c
    while(hdcmi->XferSize > 0xFFFFU)
 800080c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 800080e:	6362      	str	r2, [r4, #52]	; 0x34
    while(hdcmi->XferSize > 0xFFFFU)
 8000810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000814:	4616      	mov	r6, r2
 8000816:	d309      	bcc.n	800082c <HAL_DCMI_Start_DMA+0x8c>
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8000818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800081a:	085b      	lsrs	r3, r3, #1
 800081c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 800081e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	62a3      	str	r3, [r4, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8000824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800082a:	d2f5      	bcs.n	8000818 <HAL_DCMI_Start_DMA+0x78>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800082c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800082e:	3b02      	subs	r3, #2
 8000830:	62a3      	str	r3, [r4, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8000832:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8000834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8000836:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8000838:	6322      	str	r2, [r4, #48]	; 0x30
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800083a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800083e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8000842:	4632      	mov	r2, r6
 8000844:	9700      	str	r7, [sp, #0]
 8000846:	f000 fa89 	bl	8000d5c <HAL_DMAEx_MultiBufferStart_IT>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800084a:	6821      	ldr	r1, [r4, #0]
 800084c:	680b      	ldr	r3, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 800084e:	2200      	movs	r2, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8000850:	f043 0301 	orr.w	r3, r3, #1
  return HAL_OK;
 8000854:	4610      	mov	r0, r2
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8000856:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 8000858:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
}
 800085c:	b002      	add	sp, #8
 800085e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8000862:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8000866:	f000 f939 	bl	8000adc <HAL_DMA_Start_IT>
 800086a:	e7ee      	b.n	800084a <HAL_DCMI_Start_DMA+0xaa>
  __HAL_LOCK(hdcmi);
 800086c:	2002      	movs	r0, #2
}
 800086e:	b002      	add	sp, #8
 8000870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000874:	08000881 	.word	0x08000881
 8000878:	08000715 	.word	0x08000715

0800087c <HAL_DCMI_ErrorCallback>:
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000880:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8000882:	b508      	push	{r3, lr}
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8000884:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000888:	2b02      	cmp	r3, #2
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800088a:	bf1c      	itt	ne
 800088c:	2301      	movne	r3, #1
 800088e:	f880 3025 	strbne.w	r3, [r0, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8000892:	f7ff fff3 	bl	800087c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8000896:	bd08      	pop	{r3, pc}

08000898 <HAL_DCMI_IRQHandler>:
{
 8000898:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800089a:	6803      	ldr	r3, [r0, #0]
 800089c:	691d      	ldr	r5, [r3, #16]
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800089e:	0769      	lsls	r1, r5, #29
{
 80008a0:	4604      	mov	r4, r0
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80008a2:	d435      	bmi.n	8000910 <HAL_DCMI_IRQHandler+0x78>
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80008a4:	07aa      	lsls	r2, r5, #30
 80008a6:	d423      	bmi.n	80008f0 <HAL_DCMI_IRQHandler+0x58>
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80008a8:	06eb      	lsls	r3, r5, #27
 80008aa:	d41a      	bmi.n	80008e2 <HAL_DCMI_IRQHandler+0x4a>
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80008ac:	0728      	lsls	r0, r5, #28
 80008ae:	d411      	bmi.n	80008d4 <HAL_DCMI_IRQHandler+0x3c>
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80008b0:	07e9      	lsls	r1, r5, #31
 80008b2:	d50e      	bpl.n	80008d2 <HAL_DCMI_IRQHandler+0x3a>
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	0792      	lsls	r2, r2, #30
 80008ba:	d503      	bpl.n	80008c4 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	f022 021e 	bic.w	r2, r2, #30
 80008c2:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80008c4:	68da      	ldr	r2, [r3, #12]
 80008c6:	f022 0201 	bic.w	r2, r2, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 80008ca:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80008cc:	60da      	str	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 80008ce:	f003 f82b 	bl	8003928 <HAL_DCMI_FrameEventCallback>
}
 80008d2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	2208      	movs	r2, #8
 80008d8:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80008da:	4620      	mov	r0, r4
 80008dc:	f003 f826 	bl	800392c <HAL_DCMI_VsyncEventCallback>
 80008e0:	e7e6      	b.n	80008b0 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	2210      	movs	r2, #16
 80008e6:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 80008e8:	4620      	mov	r0, r4
 80008ea:	f003 f827 	bl	800393c <HAL_DCMI_LineEventCallback>
 80008ee:	e7dd      	b.n	80008ac <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80008f0:	6823      	ldr	r3, [r4, #0]
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80008f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <HAL_DCMI_IRQHandler+0x94>)
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80008f6:	2102      	movs	r1, #2
 80008f8:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80008fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80008fc:	2104      	movs	r1, #4
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	63e3      	str	r3, [r4, #60]	; 0x3c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000904:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000908:	6502      	str	r2, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800090a:	f000 f925 	bl	8000b58 <HAL_DMA_Abort_IT>
 800090e:	e7cb      	b.n	80008a8 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8000910:	2204      	movs	r2, #4
 8000912:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8000914:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000916:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000918:	4904      	ldr	r1, [pc, #16]	; (800092c <HAL_DCMI_IRQHandler+0x94>)
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	63e3      	str	r3, [r4, #60]	; 0x3c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000920:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000924:	6501      	str	r1, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000926:	f000 f917 	bl	8000b58 <HAL_DMA_Abort_IT>
 800092a:	e7bb      	b.n	80008a4 <HAL_DCMI_IRQHandler+0xc>
 800092c:	08000881 	.word	0x08000881

08000930 <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000930:	2800      	cmp	r0, #0
 8000932:	d037      	beq.n	80009a4 <HAL_DCMI_Init+0x74>
{
 8000934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000936:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800093a:	4604      	mov	r4, r0
 800093c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000940:	b343      	cbz	r3, 8000994 <HAL_DCMI_Init+0x64>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000942:	6822      	ldr	r2, [r4, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000944:	6860      	ldr	r0, [r4, #4]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000946:	68a7      	ldr	r7, [r4, #8]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000948:	2302      	movs	r3, #2
 800094a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800094e:	e9d4 6503 	ldrd	r6, r5, [r4, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000952:	6963      	ldr	r3, [r4, #20]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000954:	6811      	ldr	r1, [r2, #0]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000956:	4303      	orrs	r3, r0
 8000958:	4333      	orrs	r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800095a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800095e:	69a6      	ldr	r6, [r4, #24]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000960:	f021 0108 	bic.w	r1, r1, #8
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000964:	432b      	orrs	r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000966:	6011      	str	r1, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000968:	6a25      	ldr	r5, [r4, #32]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800096a:	6811      	ldr	r1, [r2, #0]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800096c:	433b      	orrs	r3, r7
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800096e:	4333      	orrs	r3, r6
 8000970:	432b      	orrs	r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000972:	430b      	orrs	r3, r1
 8000974:	6013      	str	r3, [r2, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000976:	2810      	cmp	r0, #16
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8000978:	bf04      	itt	eq
 800097a:	69e3      	ldreq	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800097c:	6193      	streq	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800097e:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000980:	2100      	movs	r1, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000982:	f043 031e 	orr.w	r3, r3, #30

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000986:	2501      	movs	r5, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000988:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800098a:	63e1      	str	r1, [r4, #60]	; 0x3c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800098c:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25

  return HAL_OK;
 8000990:	4608      	mov	r0, r1
}
 8000992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdcmi->Lock = HAL_UNLOCKED;
 8000994:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    HAL_DCMI_MspInit(hdcmi);
 8000998:	f003 fb76 	bl	8004088 <HAL_DCMI_MspInit>
    HAL_DCMI_MspInit(hdcmi);
 800099c:	4620      	mov	r0, r4
 800099e:	f003 fb73 	bl	8004088 <HAL_DCMI_MspInit>
 80009a2:	e7ce      	b.n	8000942 <HAL_DCMI_Init+0x12>
     return HAL_ERROR;
 80009a4:	2001      	movs	r0, #1
}
 80009a6:	4770      	bx	lr

080009a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80009ac:	f7ff fe26 	bl	80005fc <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80009b0:	2c00      	cmp	r4, #0
 80009b2:	d054      	beq.n	8000a5e <HAL_DMA_Init+0xb6>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80009b4:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80009b6:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 80009b8:	2100      	movs	r1, #0
 80009ba:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80009be:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	f022 0201 	bic.w	r2, r2, #1
 80009c8:	4605      	mov	r5, r0
 80009ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009cc:	e005      	b.n	80009da <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009ce:	f7ff fe15 	bl	80005fc <HAL_GetTick>
 80009d2:	1b43      	subs	r3, r0, r5
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	d83b      	bhi.n	8000a50 <HAL_DMA_Init+0xa8>
 80009d8:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	07d1      	lsls	r1, r2, #31
 80009de:	d4f6      	bmi.n	80009ce <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009e0:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009e4:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009e8:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ea:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 80009ec:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009ee:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009f0:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009f4:	4302      	orrs	r2, r0
 80009f6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80009f8:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80009fa:	4935      	ldr	r1, [pc, #212]	; (8000ad0 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009fc:	4332      	orrs	r2, r6
 80009fe:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a00:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a02:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a04:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a06:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a08:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a0c:	d029      	beq.n	8000a62 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000a0e:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000a10:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a12:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000a16:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	492e      	ldr	r1, [pc, #184]	; (8000ad4 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8000a1c:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000a1e:	3a10      	subs	r2, #16
 8000a20:	fba1 0102 	umull	r0, r1, r1, r2
 8000a24:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a26:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000a28:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a2c:	5c41      	ldrb	r1, [r0, r1]
 8000a2e:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000a30:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8000a34:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000a36:	bf88      	it	hi
 8000a38:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a3a:	223f      	movs	r2, #63	; 0x3f
 8000a3c:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8000a3e:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a40:	2100      	movs	r1, #0
 8000a42:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a44:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a46:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000a48:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8000a4c:	4608      	mov	r0, r1
}
 8000a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000a50:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a52:	2220      	movs	r2, #32
 8000a54:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000a56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8000a5a:	4618      	mov	r0, r3
}
 8000a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000a5e:	2001      	movs	r0, #1
}
 8000a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000a62:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8000a66:	4328      	orrs	r0, r5
 8000a68:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8000a6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8000a6c:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000a6e:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a70:	f020 0007 	bic.w	r0, r0, #7
 8000a74:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8000a76:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d0cc      	beq.n	8000a18 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000a7e:	b17e      	cbz	r6, 8000aa0 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000a80:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8000a84:	d012      	beq.n	8000aac <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000a86:	2a02      	cmp	r2, #2
 8000a88:	d903      	bls.n	8000a92 <HAL_DMA_Init+0xea>
 8000a8a:	2a03      	cmp	r2, #3
 8000a8c:	d1c4      	bne.n	8000a18 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000a8e:	01ea      	lsls	r2, r5, #7
 8000a90:	d5c2      	bpl.n	8000a18 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8000a92:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a94:	2240      	movs	r2, #64	; 0x40
 8000a96:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000a98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000a9c:	4618      	mov	r0, r3
}
 8000a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8000aa0:	2a01      	cmp	r2, #1
 8000aa2:	d011      	beq.n	8000ac8 <HAL_DMA_Init+0x120>
 8000aa4:	f032 0202 	bics.w	r2, r2, #2
 8000aa8:	d1b6      	bne.n	8000a18 <HAL_DMA_Init+0x70>
 8000aaa:	e7f0      	b.n	8000a8e <HAL_DMA_Init+0xe6>
    switch (tmp)
 8000aac:	2a03      	cmp	r2, #3
 8000aae:	d8b3      	bhi.n	8000a18 <HAL_DMA_Init+0x70>
 8000ab0:	a101      	add	r1, pc, #4	; (adr r1, 8000ab8 <HAL_DMA_Init+0x110>)
 8000ab2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000a93 	.word	0x08000a93
 8000abc:	08000a8f 	.word	0x08000a8f
 8000ac0:	08000a93 	.word	0x08000a93
 8000ac4:	08000ac9 	.word	0x08000ac9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ac8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000acc:	d1a4      	bne.n	8000a18 <HAL_DMA_Init+0x70>
 8000ace:	e7e0      	b.n	8000a92 <HAL_DMA_Init+0xea>
 8000ad0:	f010803f 	.word	0xf010803f
 8000ad4:	aaaaaaab 	.word	0xaaaaaaab
 8000ad8:	080054d8 	.word	0x080054d8

08000adc <HAL_DMA_Start_IT>:
{
 8000adc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8000ade:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ae2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000ae4:	2c01      	cmp	r4, #1
 8000ae6:	d034      	beq.n	8000b52 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ae8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8000aec:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000aee:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8000af0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000af4:	d005      	beq.n	8000b02 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8000af6:	2300      	movs	r3, #0
 8000af8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8000afc:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8000afe:	2002      	movs	r0, #2
}
 8000b00:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b02:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b04:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b06:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b08:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b0c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b0e:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b10:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b12:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b16:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b18:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000b1a:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8000b1c:	bf0a      	itet	eq
 8000b1e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000b20:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000b22:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b24:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8000b26:	bf18      	it	ne
 8000b28:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b2a:	233f      	movs	r3, #63	; 0x3f
 8000b2c:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8000b2e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b30:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	f043 0316 	orr.w	r3, r3, #22
 8000b38:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000b3a:	b11a      	cbz	r2, 8000b44 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4c:	2000      	movs	r0, #0
}
 8000b4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b50:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8000b52:	2002      	movs	r0, #2
}
 8000b54:	bcf0      	pop	{r4, r5, r6, r7}
 8000b56:	4770      	bx	lr

08000b58 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b58:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d003      	beq.n	8000b68 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b64:	2001      	movs	r0, #1
 8000b66:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000b68:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	f023 0301 	bic.w	r3, r3, #1
 8000b76:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000b78:	2000      	movs	r0, #0
}
 8000b7a:	4770      	bx	lr

08000b7c <HAL_DMA_IRQHandler>:
{
 8000b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b80:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8000b82:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b84:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8000b86:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b88:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000b8a:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b8c:	4971      	ldr	r1, [pc, #452]	; (8000d54 <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b8e:	2208      	movs	r2, #8
 8000b90:	409a      	lsls	r2, r3
 8000b92:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b94:	680d      	ldr	r5, [r1, #0]
{
 8000b96:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b98:	d004      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b9a:	6801      	ldr	r1, [r0, #0]
 8000b9c:	680f      	ldr	r7, [r1, #0]
 8000b9e:	0778      	lsls	r0, r7, #29
 8000ba0:	f100 808a 	bmi.w	8000cb8 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	4222      	tst	r2, r4
 8000baa:	d004      	beq.n	8000bb6 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000bac:	f8d8 1000 	ldr.w	r1, [r8]
 8000bb0:	6949      	ldr	r1, [r1, #20]
 8000bb2:	0609      	lsls	r1, r1, #24
 8000bb4:	d478      	bmi.n	8000ca8 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	4222      	tst	r2, r4
 8000bbc:	d004      	beq.n	8000bc8 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bbe:	f8d8 1000 	ldr.w	r1, [r8]
 8000bc2:	6809      	ldr	r1, [r1, #0]
 8000bc4:	078f      	lsls	r7, r1, #30
 8000bc6:	d467      	bmi.n	8000c98 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000bc8:	2210      	movs	r2, #16
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	4222      	tst	r2, r4
 8000bce:	d004      	beq.n	8000bda <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bd0:	f8d8 1000 	ldr.w	r1, [r8]
 8000bd4:	680f      	ldr	r7, [r1, #0]
 8000bd6:	0738      	lsls	r0, r7, #28
 8000bd8:	d449      	bmi.n	8000c6e <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bda:	2220      	movs	r2, #32
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	4222      	tst	r2, r4
 8000be0:	d017      	beq.n	8000c12 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000be2:	f8d8 1000 	ldr.w	r1, [r8]
 8000be6:	680c      	ldr	r4, [r1, #0]
 8000be8:	06e0      	lsls	r0, r4, #27
 8000bea:	d512      	bpl.n	8000c12 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bec:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bee:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8000bf2:	2a05      	cmp	r2, #5
 8000bf4:	d073      	beq.n	8000cde <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bf6:	680b      	ldr	r3, [r1, #0]
 8000bf8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bfc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bfe:	f000 8090 	beq.w	8000d22 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c02:	0319      	lsls	r1, r3, #12
 8000c04:	f140 809b 	bpl.w	8000d3e <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8000c08:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8000c0c:	b10b      	cbz	r3, 8000c12 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8000c0e:	4640      	mov	r0, r8
 8000c10:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c12:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8000c16:	b33b      	cbz	r3, 8000c68 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c18:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8000c1c:	07da      	lsls	r2, r3, #31
 8000c1e:	d51b      	bpl.n	8000c58 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8000c20:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c24:	494c      	ldr	r1, [pc, #304]	; (8000d58 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c26:	2305      	movs	r3, #5
 8000c28:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000c2c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c2e:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8000c32:	f023 0301 	bic.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c38:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8000c3a:	e002      	b.n	8000c42 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c3c:	6813      	ldr	r3, [r2, #0]
 8000c3e:	07db      	lsls	r3, r3, #31
 8000c40:	d504      	bpl.n	8000c4c <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8000c42:	9b01      	ldr	r3, [sp, #4]
 8000c44:	3301      	adds	r3, #1
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	d9f7      	bls.n	8000c3c <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 8000c4c:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8000c4e:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8000c50:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000c54:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000c58:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8000c5c:	b123      	cbz	r3, 8000c68 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8000c5e:	4640      	mov	r0, r8
}
 8000c60:	b002      	add	sp, #8
 8000c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8000c66:	4718      	bx	r3
}
 8000c68:	b002      	add	sp, #8
 8000c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c6e:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c70:	680a      	ldr	r2, [r1, #0]
 8000c72:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c76:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c78:	d12a      	bne.n	8000cd0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c7a:	05d7      	lsls	r7, r2, #23
 8000c7c:	d403      	bmi.n	8000c86 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c7e:	680a      	ldr	r2, [r1, #0]
 8000c80:	f022 0208 	bic.w	r2, r2, #8
 8000c84:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000c86:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d0a5      	beq.n	8000bda <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8000c8e:	4640      	mov	r0, r8
 8000c90:	4790      	blx	r2
 8000c92:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8000c96:	e7a0      	b.n	8000bda <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000c98:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000c9a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8000c9e:	f042 0204 	orr.w	r2, r2, #4
 8000ca2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8000ca6:	e78f      	b.n	8000bc8 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ca8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000caa:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8000cae:	f042 0202 	orr.w	r2, r2, #2
 8000cb2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8000cb6:	e77e      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000cb8:	680f      	ldr	r7, [r1, #0]
 8000cba:	f027 0704 	bic.w	r7, r7, #4
 8000cbe:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000cc0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000cc2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
 8000cca:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8000cce:	e769      	b.n	8000ba4 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cd0:	0312      	lsls	r2, r2, #12
 8000cd2:	d5d8      	bpl.n	8000c86 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000cd4:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d1d8      	bne.n	8000c8e <HAL_DMA_IRQHandler+0x112>
 8000cdc:	e77d      	b.n	8000bda <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cde:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ce0:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ce4:	f022 0216 	bic.w	r2, r2, #22
 8000ce8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cea:	694a      	ldr	r2, [r1, #20]
 8000cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf0:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cf2:	b354      	cbz	r4, 8000d4a <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cf4:	680a      	ldr	r2, [r1, #0]
 8000cf6:	f022 0208 	bic.w	r2, r2, #8
 8000cfa:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cfc:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8000cfe:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8000d06:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8000d08:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d0a:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 8000d0c:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d10:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d14:	2900      	cmp	r1, #0
 8000d16:	d0a7      	beq.n	8000c68 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8000d18:	4640      	mov	r0, r8
}
 8000d1a:	b002      	add	sp, #8
 8000d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8000d20:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d22:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8000d26:	f47f af6f 	bne.w	8000c08 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d2a:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000d2c:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d2e:	f022 0210 	bic.w	r2, r2, #16
 8000d32:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8000d34:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000d38:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 8000d3c:	e764      	b.n	8000c08 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8000d3e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f47f af63 	bne.w	8000c0e <HAL_DMA_IRQHandler+0x92>
 8000d48:	e763      	b.n	8000c12 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d4a:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8000d4e:	2a00      	cmp	r2, #0
 8000d50:	d1d0      	bne.n	8000cf4 <HAL_DMA_IRQHandler+0x178>
 8000d52:	e7d3      	b.n	8000cfc <HAL_DMA_IRQHandler+0x180>
 8000d54:	20000068 	.word	0x20000068
 8000d58:	1b4e81b5 	.word	0x1b4e81b5

08000d5c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8000d5c:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d5e:	6885      	ldr	r5, [r0, #8]
 8000d60:	2d80      	cmp	r5, #128	; 0x80
 8000d62:	d01c      	beq.n	8000d9e <HAL_DMAEx_MultiBufferStart_IT+0x42>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8000d64:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000d66:	b1ac      	cbz	r4, 8000d94 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8000d68:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000d6a:	b19c      	cbz	r4, 8000d94 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8000d6c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8000d6e:	b18c      	cbz	r4, 8000d94 <HAL_DMAEx_MultiBufferStart_IT+0x38>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d70:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000d74:	2c01      	cmp	r4, #1
 8000d76:	f000 80f0 	beq.w	8000f5a <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d7a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8000d7e:	2601      	movs	r6, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d80:	42b4      	cmp	r4, r6
  __HAL_LOCK(hdma);
 8000d82:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d86:	d010      	beq.n	8000daa <HAL_DMAEx_MultiBufferStart_IT+0x4e>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
  }  
  return status; 
}
 8000d8e:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8000d90:	2002      	movs	r0, #2
}
 8000d92:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000d98:	2001      	movs	r0, #1
}
 8000d9a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d9c:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da2:	6543      	str	r3, [r0, #84]	; 0x54
}
 8000da4:	bcf0      	pop	{r4, r5, r6, r7}
    return HAL_ERROR;
 8000da6:	2001      	movs	r0, #1
}
 8000da8:	4770      	bx	lr
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000daa:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dac:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dae:	2702      	movs	r7, #2
 8000db0:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db4:	6546      	str	r6, [r0, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000db6:	6826      	ldr	r6, [r4, #0]
 8000db8:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 8000dbc:	6026      	str	r6, [r4, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8000dbe:	6123      	str	r3, [r4, #16]
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dc0:	9b04      	ldr	r3, [sp, #16]
 8000dc2:	6063      	str	r3, [r4, #4]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000dc4:	4bc5      	ldr	r3, [pc, #788]	; (80010dc <HAL_DMAEx_MultiBufferStart_IT+0x380>)
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dc6:	2d40      	cmp	r5, #64	; 0x40
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000dc8:	bf0b      	itete	eq
 8000dca:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000dcc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000dce:	60e1      	streq	r1, [r4, #12]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000dd0:	60e2      	strne	r2, [r4, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	d969      	bls.n	8000eaa <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8000dd6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	d043      	beq.n	8000e66 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8000dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000de2:	429c      	cmp	r4, r3
 8000de4:	d03f      	beq.n	8000e66 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8000de6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000dea:	429c      	cmp	r4, r3
 8000dec:	d03b      	beq.n	8000e66 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8000dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d037      	beq.n	8000e66 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8000df6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	f000 815e 	beq.w	80010bc <HAL_DMAEx_MultiBufferStart_IT+0x360>
 8000e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f000 8159 	beq.w	80010bc <HAL_DMAEx_MultiBufferStart_IT+0x360>
 8000e0a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000e0e:	429c      	cmp	r4, r3
 8000e10:	f000 8154 	beq.w	80010bc <HAL_DMAEx_MultiBufferStart_IT+0x360>
 8000e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	f000 814f 	beq.w	80010bc <HAL_DMAEx_MultiBufferStart_IT+0x360>
 8000e1e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000e22:	429c      	cmp	r4, r3
 8000e24:	f000 8193 	beq.w	800114e <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
 8000e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f000 818e 	beq.w	800114e <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
 8000e32:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000e36:	429c      	cmp	r4, r3
 8000e38:	f000 8189 	beq.w	800114e <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
 8000e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e40:	429c      	cmp	r4, r3
 8000e42:	f000 8184 	beq.w	800114e <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
 8000e46:	4ba6      	ldr	r3, [pc, #664]	; (80010e0 <HAL_DMAEx_MultiBufferStart_IT+0x384>)
 8000e48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000e4c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e52:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e56:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e5a:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e5c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000e5e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e62:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000e64:	e009      	b.n	8000e7a <HAL_DMAEx_MultiBufferStart_IT+0x11e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e66:	4b9e      	ldr	r3, [pc, #632]	; (80010e0 <HAL_DMAEx_MultiBufferStart_IT+0x384>)
 8000e68:	2120      	movs	r1, #32
 8000e6a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e6c:	2208      	movs	r2, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e6e:	2510      	movs	r5, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e70:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e72:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e74:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000e76:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e78:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000e7a:	4b99      	ldr	r3, [pc, #612]	; (80010e0 <HAL_DMAEx_MultiBufferStart_IT+0x384>)
 8000e7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e7e:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e80:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e82:	f043 0316 	orr.w	r3, r3, #22
 8000e86:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000e88:	6963      	ldr	r3, [r4, #20]
 8000e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8e:	6163      	str	r3, [r4, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	d05e      	beq.n	8000f52 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma); 
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea4:	2000      	movs	r0, #0
}
 8000ea6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea8:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eaa:	4b8e      	ldr	r3, [pc, #568]	; (80010e4 <HAL_DMAEx_MultiBufferStart_IT+0x388>)
 8000eac:	429c      	cmp	r4, r3
 8000eae:	d856      	bhi.n	8000f5e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8000eb0:	4b8d      	ldr	r3, [pc, #564]	; (80010e8 <HAL_DMAEx_MultiBufferStart_IT+0x38c>)
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	f240 80a7 	bls.w	8001006 <HAL_DMAEx_MultiBufferStart_IT+0x2aa>
 8000eb8:	3b48      	subs	r3, #72	; 0x48
 8000eba:	429c      	cmp	r4, r3
 8000ebc:	f000 80e8 	beq.w	8001090 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 8000ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	f000 80e3 	beq.w	8001090 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 8000eca:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000ece:	429c      	cmp	r4, r3
 8000ed0:	f000 80de 	beq.w	8001090 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 8000ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ed8:	429c      	cmp	r4, r3
 8000eda:	f000 80d9 	beq.w	8001090 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 8000ede:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000ee2:	429c      	cmp	r4, r3
 8000ee4:	f000 8124 	beq.w	8001130 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>
 8000ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000eec:	429c      	cmp	r4, r3
 8000eee:	f000 811f 	beq.w	8001130 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>
 8000ef2:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	f000 811a 	beq.w	8001130 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>
 8000efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f00:	429c      	cmp	r4, r3
 8000f02:	f000 8115 	beq.w	8001130 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>
 8000f06:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000f0a:	429c      	cmp	r4, r3
 8000f0c:	f000 814f 	beq.w	80011ae <HAL_DMAEx_MultiBufferStart_IT+0x452>
 8000f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f14:	429c      	cmp	r4, r3
 8000f16:	f000 814a 	beq.w	80011ae <HAL_DMAEx_MultiBufferStart_IT+0x452>
 8000f1a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000f1e:	429c      	cmp	r4, r3
 8000f20:	f000 8145 	beq.w	80011ae <HAL_DMAEx_MultiBufferStart_IT+0x452>
 8000f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	f000 8140 	beq.w	80011ae <HAL_DMAEx_MultiBufferStart_IT+0x452>
 8000f2e:	4a6f      	ldr	r2, [pc, #444]	; (80010ec <HAL_DMAEx_MultiBufferStart_IT+0x390>)
 8000f30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000f34:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f3a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f3e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f42:	60d5      	str	r5, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f44:	60d3      	str	r3, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f4a:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f4c:	4a67      	ldr	r2, [pc, #412]	; (80010ec <HAL_DMAEx_MultiBufferStart_IT+0x390>)
 8000f4e:	60d3      	str	r3, [r2, #12]
 8000f50:	e795      	b.n	8000e7e <HAL_DMAEx_MultiBufferStart_IT+0x122>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f52:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d19d      	bne.n	8000e94 <HAL_DMAEx_MultiBufferStart_IT+0x138>
 8000f58:	e7a0      	b.n	8000e9c <HAL_DMAEx_MultiBufferStart_IT+0x140>
  __HAL_LOCK(hdma);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	e71d      	b.n	8000d9a <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f5e:	3ba8      	subs	r3, #168	; 0xa8
 8000f60:	429c      	cmp	r4, r3
 8000f62:	d045      	beq.n	8000ff0 <HAL_DMAEx_MultiBufferStart_IT+0x294>
 8000f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f68:	429c      	cmp	r4, r3
 8000f6a:	d041      	beq.n	8000ff0 <HAL_DMAEx_MultiBufferStart_IT+0x294>
 8000f6c:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000f70:	429c      	cmp	r4, r3
 8000f72:	d03d      	beq.n	8000ff0 <HAL_DMAEx_MultiBufferStart_IT+0x294>
 8000f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f78:	429c      	cmp	r4, r3
 8000f7a:	d039      	beq.n	8000ff0 <HAL_DMAEx_MultiBufferStart_IT+0x294>
 8000f7c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000f80:	429c      	cmp	r4, r3
 8000f82:	f000 80b7 	beq.w	80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x398>
 8000f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f8a:	429c      	cmp	r4, r3
 8000f8c:	f000 80b2 	beq.w	80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x398>
 8000f90:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000f94:	429c      	cmp	r4, r3
 8000f96:	f000 80ad 	beq.w	80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x398>
 8000f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f9e:	429c      	cmp	r4, r3
 8000fa0:	f000 80a8 	beq.w	80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x398>
 8000fa4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000fa8:	429c      	cmp	r4, r3
 8000faa:	f000 80e0 	beq.w	800116e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8000fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	f000 80db 	beq.w	800116e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8000fb8:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000fbc:	429c      	cmp	r4, r3
 8000fbe:	f000 80d6 	beq.w	800116e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8000fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fc6:	429c      	cmp	r4, r3
 8000fc8:	f000 80d1 	beq.w	800116e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8000fcc:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <HAL_DMAEx_MultiBufferStart_IT+0x384>)
 8000fce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000fd2:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000fd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fd8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fdc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fe0:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000fe2:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000fe4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fe8:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <HAL_DMAEx_MultiBufferStart_IT+0x384>)
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	e746      	b.n	8000e7e <HAL_DMAEx_MultiBufferStart_IT+0x122>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ff0:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_DMAEx_MultiBufferStart_IT+0x384>)
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ff6:	2208      	movs	r2, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ff8:	2510      	movs	r5, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ffa:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ffc:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ffe:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001000:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001002:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001004:	e7f1      	b.n	8000fea <HAL_DMAEx_MultiBufferStart_IT+0x28e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_DMAEx_MultiBufferStart_IT+0x394>)
 8001008:	429c      	cmp	r4, r3
 800100a:	d04c      	beq.n	80010a6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 800100c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001010:	429c      	cmp	r4, r3
 8001012:	d048      	beq.n	80010a6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8001014:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001018:	429c      	cmp	r4, r3
 800101a:	d044      	beq.n	80010a6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 800101c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001020:	429c      	cmp	r4, r3
 8001022:	d040      	beq.n	80010a6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8001024:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001028:	429c      	cmp	r4, r3
 800102a:	d072      	beq.n	8001112 <HAL_DMAEx_MultiBufferStart_IT+0x3b6>
 800102c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001030:	429c      	cmp	r4, r3
 8001032:	d06e      	beq.n	8001112 <HAL_DMAEx_MultiBufferStart_IT+0x3b6>
 8001034:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001038:	429c      	cmp	r4, r3
 800103a:	d06a      	beq.n	8001112 <HAL_DMAEx_MultiBufferStart_IT+0x3b6>
 800103c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001040:	429c      	cmp	r4, r3
 8001042:	d066      	beq.n	8001112 <HAL_DMAEx_MultiBufferStart_IT+0x3b6>
 8001044:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001048:	429c      	cmp	r4, r3
 800104a:	f000 80a0 	beq.w	800118e <HAL_DMAEx_MultiBufferStart_IT+0x432>
 800104e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001052:	429c      	cmp	r4, r3
 8001054:	f000 809b 	beq.w	800118e <HAL_DMAEx_MultiBufferStart_IT+0x432>
 8001058:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800105c:	429c      	cmp	r4, r3
 800105e:	f000 8096 	beq.w	800118e <HAL_DMAEx_MultiBufferStart_IT+0x432>
 8001062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001066:	429c      	cmp	r4, r3
 8001068:	f000 8091 	beq.w	800118e <HAL_DMAEx_MultiBufferStart_IT+0x432>
 800106c:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <HAL_DMAEx_MultiBufferStart_IT+0x390>)
 800106e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001072:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001078:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800107c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001080:	6095      	str	r5, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001082:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001088:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800108a:	4a18      	ldr	r2, [pc, #96]	; (80010ec <HAL_DMAEx_MultiBufferStart_IT+0x390>)
 800108c:	6093      	str	r3, [r2, #8]
 800108e:	e6f6      	b.n	8000e7e <HAL_DMAEx_MultiBufferStart_IT+0x122>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001090:	4a16      	ldr	r2, [pc, #88]	; (80010ec <HAL_DMAEx_MultiBufferStart_IT+0x390>)
 8001092:	2120      	movs	r1, #32
 8001094:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001096:	2308      	movs	r3, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001098:	2510      	movs	r5, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800109a:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800109c:	60d5      	str	r5, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800109e:	60d3      	str	r3, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80010a0:	2301      	movs	r3, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80010a2:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80010a4:	e752      	b.n	8000f4c <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <HAL_DMAEx_MultiBufferStart_IT+0x390>)
 80010a8:	2120      	movs	r1, #32
 80010aa:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80010ac:	2308      	movs	r3, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010ae:	2510      	movs	r5, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80010b0:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010b2:	6095      	str	r5, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80010b4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80010b6:	2301      	movs	r3, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80010b8:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80010ba:	e7e6      	b.n	800108a <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_DMAEx_MultiBufferStart_IT+0x384>)
 80010be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c2:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010c8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80010cc:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010d0:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80010d2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80010d4:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80010d6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80010d8:	e6cf      	b.n	8000e7a <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 80010da:	bf00      	nop
 80010dc:	40026458 	.word	0x40026458
 80010e0:	40026400 	.word	0x40026400
 80010e4:	400260b8 	.word	0x400260b8
 80010e8:	40026058 	.word	0x40026058
 80010ec:	40026000 	.word	0x40026000
 80010f0:	40026010 	.word	0x40026010
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010f4:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 80010f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fa:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001100:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001104:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001108:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800110a:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800110c:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800110e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001110:	e76b      	b.n	8000fea <HAL_DMAEx_MultiBufferStart_IT+0x28e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001112:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 8001114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001118:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800111a:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800111e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001126:	6095      	str	r5, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001128:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800112a:	2340      	movs	r3, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800112c:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800112e:	e7ac      	b.n	800108a <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001130:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800113c:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001144:	60d5      	str	r5, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001146:	60d3      	str	r3, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001148:	2340      	movs	r3, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800114a:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800114c:	e6fe      	b.n	8000f4c <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 8001150:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001154:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001156:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800115a:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800115e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001162:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001164:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001166:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800116a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800116c:	e685      	b.n	8000e7a <HAL_DMAEx_MultiBufferStart_IT+0x11e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 8001170:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001174:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001176:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800117a:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800117e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001182:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001184:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001186:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800118a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800118c:	e72d      	b.n	8000fea <HAL_DMAEx_MultiBufferStart_IT+0x28e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 8001190:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001194:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001196:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800119a:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800119e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011a2:	6095      	str	r5, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80011a4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80011a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80011aa:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80011ac:	e76d      	b.n	800108a <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 80011b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80011b4:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80011b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011ba:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80011be:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011c2:	60d5      	str	r5, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80011c4:	60d3      	str	r3, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80011c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80011ca:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80011cc:	e6be      	b.n	8000f4c <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 80011ce:	bf00      	nop
 80011d0:	40026400 	.word	0x40026400
 80011d4:	40026000 	.word	0x40026000

080011d8 <HAL_DMAEx_ChangeMemory>:
    hdma->Instance->M0AR = Address;
 80011d8:	6803      	ldr	r3, [r0, #0]
  if(memory == MEMORY0)
 80011da:	b912      	cbnz	r2, 80011e2 <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M0AR = Address;
 80011dc:	60d9      	str	r1, [r3, #12]
}
 80011de:	2000      	movs	r0, #0
 80011e0:	4770      	bx	lr
    hdma->Instance->M1AR = Address;
 80011e2:	6119      	str	r1, [r3, #16]
}
 80011e4:	2000      	movs	r0, #0
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ec:	468b      	mov	fp, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	f8df a210 	ldr.w	sl, [pc, #528]	; 8001400 <HAL_GPIO_Init+0x218>
 80011f2:	6809      	ldr	r1, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8001404 <HAL_GPIO_Init+0x21c>
{
 80011f8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	46d9      	mov	r9, fp
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x20>
 8001200:	3301      	adds	r3, #1
 8001202:	2b10      	cmp	r3, #16
 8001204:	f000 8088 	beq.w	8001318 <HAL_GPIO_Init+0x130>
    ioposition = 0x01U << position;
 8001208:	2201      	movs	r2, #1
 800120a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120c:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8001210:	438a      	bics	r2, r1
 8001212:	d1f5      	bne.n	8001200 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001214:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8001218:	f005 0203 	and.w	r2, r5, #3
 800121c:	1e54      	subs	r4, r2, #1
 800121e:	2c01      	cmp	r4, #1
 8001220:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8001224:	d97b      	bls.n	800131e <HAL_GPIO_Init+0x136>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001226:	2a03      	cmp	r2, #3
 8001228:	f040 80b9 	bne.w	800139e <HAL_GPIO_Init+0x1b6>
 800122c:	40ba      	lsls	r2, r7
 800122e:	43d4      	mvns	r4, r2
 8001230:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 8001232:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001234:	9c00      	ldr	r4, [sp, #0]
 8001236:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800123a:	00ee      	lsls	r6, r5, #3
      GPIOx->MODER = temp;
 800123c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800123e:	d5df      	bpl.n	8001200 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001240:	2200      	movs	r2, #0
 8001242:	9203      	str	r2, [sp, #12]
 8001244:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8001248:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800124c:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 8001250:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8001254:	f023 0403 	bic.w	r4, r3, #3
 8001258:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800125c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001260:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8001264:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001266:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800126c:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126e:	00b6      	lsls	r6, r6, #2
 8001270:	220f      	movs	r2, #15
 8001272:	40b2      	lsls	r2, r6
 8001274:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001278:	4f5a      	ldr	r7, [pc, #360]	; (80013e4 <HAL_GPIO_Init+0x1fc>)
 800127a:	42b8      	cmp	r0, r7
 800127c:	d020      	beq.n	80012c0 <HAL_GPIO_Init+0xd8>
 800127e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001282:	42b8      	cmp	r0, r7
 8001284:	f000 8090 	beq.w	80013a8 <HAL_GPIO_Init+0x1c0>
 8001288:	4f57      	ldr	r7, [pc, #348]	; (80013e8 <HAL_GPIO_Init+0x200>)
 800128a:	42b8      	cmp	r0, r7
 800128c:	f000 8091 	beq.w	80013b2 <HAL_GPIO_Init+0x1ca>
 8001290:	4f56      	ldr	r7, [pc, #344]	; (80013ec <HAL_GPIO_Init+0x204>)
 8001292:	42b8      	cmp	r0, r7
 8001294:	f000 8092 	beq.w	80013bc <HAL_GPIO_Init+0x1d4>
 8001298:	4f55      	ldr	r7, [pc, #340]	; (80013f0 <HAL_GPIO_Init+0x208>)
 800129a:	42b8      	cmp	r0, r7
 800129c:	f000 8093 	beq.w	80013c6 <HAL_GPIO_Init+0x1de>
 80012a0:	4f54      	ldr	r7, [pc, #336]	; (80013f4 <HAL_GPIO_Init+0x20c>)
 80012a2:	42b8      	cmp	r0, r7
 80012a4:	f000 8094 	beq.w	80013d0 <HAL_GPIO_Init+0x1e8>
 80012a8:	4f53      	ldr	r7, [pc, #332]	; (80013f8 <HAL_GPIO_Init+0x210>)
 80012aa:	42b8      	cmp	r0, r7
 80012ac:	f000 8095 	beq.w	80013da <HAL_GPIO_Init+0x1f2>
 80012b0:	4f52      	ldr	r7, [pc, #328]	; (80013fc <HAL_GPIO_Init+0x214>)
 80012b2:	42b8      	cmp	r0, r7
 80012b4:	bf0c      	ite	eq
 80012b6:	2707      	moveq	r7, #7
 80012b8:	2708      	movne	r7, #8
 80012ba:	fa07 f606 	lsl.w	r6, r7, r6
 80012be:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80012c2:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ca:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80012cc:	bf54      	ite	pl
 80012ce:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80012d0:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 80012d4:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80012d8:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012dc:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80012de:	bf54      	ite	pl
 80012e0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80012e2:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 80012e6:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ee:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80012f0:	bf54      	ite	pl
 80012f2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80012f4:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 80012f8:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 80012fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001306:	bf54      	ite	pl
 8001308:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800130a:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8001310:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001314:	f47f af78 	bne.w	8001208 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001318:	b005      	add	sp, #20
 800131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800131e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	2403      	movs	r4, #3
 8001322:	40bc      	lsls	r4, r7
 8001324:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001328:	f8d9 600c 	ldr.w	r6, [r9, #12]
 800132c:	40be      	lsls	r6, r7
 800132e:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8001332:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001334:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001338:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133c:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001340:	409e      	lsls	r6, r3
 8001342:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001346:	43e4      	mvns	r4, r4
 8001348:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 800134a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800134c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134e:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001352:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8001356:	40be      	lsls	r6, r7
 8001358:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800135e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	d001      	beq.n	8001366 <HAL_GPIO_Init+0x17e>
 8001362:	40ba      	lsls	r2, r7
 8001364:	e765      	b.n	8001232 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8001366:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800136a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136e:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001372:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8001376:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001378:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800137c:	240f      	movs	r4, #15
 800137e:	fa04 f60e 	lsl.w	r6, r4, lr
 8001382:	9c01      	ldr	r4, [sp, #4]
 8001384:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001388:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138c:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138e:	fa04 f60e 	lsl.w	r6, r4, lr
 8001392:	9c01      	ldr	r4, [sp, #4]
 8001394:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001396:	40ba      	lsls	r2, r7
 8001398:	f8c8 6020 	str.w	r6, [r8, #32]
 800139c:	e749      	b.n	8001232 <HAL_GPIO_Init+0x4a>
 800139e:	2403      	movs	r4, #3
 80013a0:	40bc      	lsls	r4, r7
 80013a2:	43e4      	mvns	r4, r4
 80013a4:	9400      	str	r4, [sp, #0]
 80013a6:	e7d1      	b.n	800134c <HAL_GPIO_Init+0x164>
 80013a8:	2701      	movs	r7, #1
 80013aa:	fa07 f606 	lsl.w	r6, r7, r6
 80013ae:	4332      	orrs	r2, r6
 80013b0:	e786      	b.n	80012c0 <HAL_GPIO_Init+0xd8>
 80013b2:	2702      	movs	r7, #2
 80013b4:	fa07 f606 	lsl.w	r6, r7, r6
 80013b8:	4332      	orrs	r2, r6
 80013ba:	e781      	b.n	80012c0 <HAL_GPIO_Init+0xd8>
 80013bc:	2703      	movs	r7, #3
 80013be:	fa07 f606 	lsl.w	r6, r7, r6
 80013c2:	4332      	orrs	r2, r6
 80013c4:	e77c      	b.n	80012c0 <HAL_GPIO_Init+0xd8>
 80013c6:	2704      	movs	r7, #4
 80013c8:	fa07 f606 	lsl.w	r6, r7, r6
 80013cc:	4332      	orrs	r2, r6
 80013ce:	e777      	b.n	80012c0 <HAL_GPIO_Init+0xd8>
 80013d0:	2705      	movs	r7, #5
 80013d2:	fa07 f606 	lsl.w	r6, r7, r6
 80013d6:	4332      	orrs	r2, r6
 80013d8:	e772      	b.n	80012c0 <HAL_GPIO_Init+0xd8>
 80013da:	2706      	movs	r7, #6
 80013dc:	fa07 f606 	lsl.w	r6, r7, r6
 80013e0:	4332      	orrs	r2, r6
 80013e2:	e76d      	b.n	80012c0 <HAL_GPIO_Init+0xd8>
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40021c00 	.word	0x40021c00
 8001400:	40023800 	.word	0x40023800
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	b902      	cbnz	r2, 800140c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	0409      	lsls	r1, r1, #16
 800140c:	6181      	str	r1, [r0, #24]
  }
}
 800140e:	4770      	bx	lr

08001410 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001412:	4605      	mov	r5, r0
 8001414:	460e      	mov	r6, r1
 8001416:	4617      	mov	r7, r2
 8001418:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800141a:	682c      	ldr	r4, [r5, #0]
 800141c:	d003      	beq.n	8001426 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 800141e:	e009      	b.n	8001434 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001420:	6963      	ldr	r3, [r4, #20]
 8001422:	055b      	lsls	r3, r3, #21
 8001424:	d424      	bmi.n	8001470 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001426:	6963      	ldr	r3, [r4, #20]
 8001428:	43db      	mvns	r3, r3
 800142a:	f013 0302 	ands.w	r3, r3, #2
 800142e:	d1f7      	bne.n	8001420 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001430:	4618      	mov	r0, r3
}
 8001432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001434:	6963      	ldr	r3, [r4, #20]
 8001436:	43db      	mvns	r3, r3
 8001438:	f013 0302 	ands.w	r3, r3, #2
 800143c:	d0f8      	beq.n	8001430 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800143e:	6963      	ldr	r3, [r4, #20]
 8001440:	0559      	lsls	r1, r3, #21
 8001442:	d415      	bmi.n	8001470 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001444:	f7ff f8da 	bl	80005fc <HAL_GetTick>
 8001448:	1bc0      	subs	r0, r0, r7
 800144a:	4286      	cmp	r6, r0
 800144c:	d301      	bcc.n	8001452 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 800144e:	2e00      	cmp	r6, #0
 8001450:	d1e2      	bne.n	8001418 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001452:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001454:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001456:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001458:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800145c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001460:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001462:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800146c:	2001      	movs	r0, #1
}
 800146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001470:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001472:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001474:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 800147c:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800147e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001480:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001482:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001484:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001488:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800148c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800148e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001498:	2001      	movs	r0, #1
}
 800149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800149c <I2C_RequestMemoryWrite>:
{
 800149c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014a0:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014a2:	6800      	ldr	r0, [r0, #0]
{
 80014a4:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014a6:	6807      	ldr	r7, [r0, #0]
{
 80014a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80014aa:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014ae:	f447 7780 	orr.w	r7, r7, #256	; 0x100
{
 80014b2:	460d      	mov	r5, r1
 80014b4:	4690      	mov	r8, r2
 80014b6:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014b8:	6007      	str	r7, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80014ba:	1c72      	adds	r2, r6, #1
 80014bc:	d111      	bne.n	80014e2 <I2C_RequestMemoryWrite+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014be:	6943      	ldr	r3, [r0, #20]
 80014c0:	07db      	lsls	r3, r3, #31
 80014c2:	d5fc      	bpl.n	80014be <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014c4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80014c8:	6105      	str	r5, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014ca:	464a      	mov	r2, r9
 80014cc:	4631      	mov	r1, r6
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff ff9e 	bl	8001410 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 80014d4:	4605      	mov	r5, r0
 80014d6:	b180      	cbz	r0, 80014fa <I2C_RequestMemoryWrite+0x5e>
      return HAL_ERROR;
 80014d8:	2501      	movs	r5, #1
}
 80014da:	4628      	mov	r0, r5
 80014dc:	b002      	add	sp, #8
 80014de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014e2:	6943      	ldr	r3, [r0, #20]
 80014e4:	07df      	lsls	r7, r3, #31
 80014e6:	d4ed      	bmi.n	80014c4 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e8:	f7ff f888 	bl	80005fc <HAL_GetTick>
 80014ec:	eba0 0009 	sub.w	r0, r0, r9
 80014f0:	4286      	cmp	r6, r0
 80014f2:	d32a      	bcc.n	800154a <I2C_RequestMemoryWrite+0xae>
 80014f4:	b34e      	cbz	r6, 800154a <I2C_RequestMemoryWrite+0xae>
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	e7df      	b.n	80014ba <I2C_RequestMemoryWrite+0x1e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	9001      	str	r0, [sp, #4]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	9201      	str	r2, [sp, #4]
 8001502:	699a      	ldr	r2, [r3, #24]
 8001504:	9201      	str	r2, [sp, #4]
 8001506:	9a01      	ldr	r2, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001508:	1c72      	adds	r2, r6, #1
 800150a:	d14d      	bne.n	80015a8 <I2C_RequestMemoryWrite+0x10c>
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	0617      	lsls	r7, r2, #24
 8001510:	d434      	bmi.n	800157c <I2C_RequestMemoryWrite+0xe0>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	0550      	lsls	r0, r2, #21
 8001516:	d5f9      	bpl.n	800150c <I2C_RequestMemoryWrite+0x70>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001518:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800151a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800151e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001520:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001522:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001524:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001528:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800152c:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800153a:	2b04      	cmp	r3, #4
 800153c:	d1cc      	bne.n	80014d8 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153e:	6822      	ldr	r2, [r4, #0]
 8001540:	6813      	ldr	r3, [r2, #0]
 8001542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e7c6      	b.n	80014d8 <I2C_RequestMemoryWrite+0x3c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800154a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800154c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800154e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001550:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001554:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001558:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800155a:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 800155c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001566:	680b      	ldr	r3, [r1, #0]
 8001568:	05d9      	lsls	r1, r3, #23
 800156a:	d502      	bpl.n	8001572 <I2C_RequestMemoryWrite+0xd6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800156c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001570:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001572:	2503      	movs	r5, #3
}
 8001574:	4628      	mov	r0, r5
 8001576:	b002      	add	sp, #8
 8001578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800157c:	f1ba 0f01 	cmp.w	sl, #1
 8001580:	d106      	bne.n	8001590 <I2C_RequestMemoryWrite+0xf4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001582:	fa5f f288 	uxtb.w	r2, r8
}
 8001586:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001588:	611a      	str	r2, [r3, #16]
}
 800158a:	b002      	add	sp, #8
 800158c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001590:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001594:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001596:	1c77      	adds	r7, r6, #1
 8001598:	d115      	bne.n	80015c6 <I2C_RequestMemoryWrite+0x12a>
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	0610      	lsls	r0, r2, #24
 800159e:	d4f0      	bmi.n	8001582 <I2C_RequestMemoryWrite+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	0551      	lsls	r1, r2, #21
 80015a4:	d5f9      	bpl.n	800159a <I2C_RequestMemoryWrite+0xfe>
 80015a6:	e7b7      	b.n	8001518 <I2C_RequestMemoryWrite+0x7c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	0611      	lsls	r1, r2, #24
 80015ac:	d4e6      	bmi.n	800157c <I2C_RequestMemoryWrite+0xe0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	0551      	lsls	r1, r2, #21
 80015b2:	d4b1      	bmi.n	8001518 <I2C_RequestMemoryWrite+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b4:	f7ff f822 	bl	80005fc <HAL_GetTick>
 80015b8:	eba0 0009 	sub.w	r0, r0, r9
 80015bc:	4286      	cmp	r6, r0
 80015be:	d311      	bcc.n	80015e4 <I2C_RequestMemoryWrite+0x148>
 80015c0:	b186      	cbz	r6, 80015e4 <I2C_RequestMemoryWrite+0x148>
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	e7a0      	b.n	8001508 <I2C_RequestMemoryWrite+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	0612      	lsls	r2, r2, #24
 80015ca:	d4da      	bmi.n	8001582 <I2C_RequestMemoryWrite+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	0552      	lsls	r2, r2, #21
 80015d0:	d4a2      	bmi.n	8001518 <I2C_RequestMemoryWrite+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d2:	f7ff f813 	bl	80005fc <HAL_GetTick>
 80015d6:	eba0 0009 	sub.w	r0, r0, r9
 80015da:	4286      	cmp	r6, r0
 80015dc:	d302      	bcc.n	80015e4 <I2C_RequestMemoryWrite+0x148>
 80015de:	b10e      	cbz	r6, 80015e4 <I2C_RequestMemoryWrite+0x148>
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	e7d8      	b.n	8001596 <I2C_RequestMemoryWrite+0xfa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015e4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80015e6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015e8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80015ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015ee:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80015f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80015f4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80015fe:	e79b      	b.n	8001538 <I2C_RequestMemoryWrite+0x9c>

08001600 <I2C_RequestMemoryRead>:
{
 8001600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001604:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001606:	6800      	ldr	r0, [r0, #0]
 8001608:	6807      	ldr	r7, [r0, #0]
 800160a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 800160e:	6007      	str	r7, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001610:	6805      	ldr	r5, [r0, #0]
{
 8001612:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001614:	f445 7580 	orr.w	r5, r5, #256	; 0x100
{
 8001618:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800161a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800161e:	6005      	str	r5, [r0, #0]
{
 8001620:	468a      	mov	sl, r1
 8001622:	4617      	mov	r7, r2
 8001624:	4698      	mov	r8, r3
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001626:	1c73      	adds	r3, r6, #1
 8001628:	d111      	bne.n	800164e <I2C_RequestMemoryRead+0x4e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800162a:	6943      	ldr	r3, [r0, #20]
 800162c:	07dd      	lsls	r5, r3, #31
 800162e:	d5fc      	bpl.n	800162a <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001630:	f00a 03fe 	and.w	r3, sl, #254	; 0xfe
 8001634:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001636:	464a      	mov	r2, r9
 8001638:	4631      	mov	r1, r6
 800163a:	4620      	mov	r0, r4
 800163c:	f7ff fee8 	bl	8001410 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001640:	fa5f fa8a 	uxtb.w	sl, sl
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001644:	b178      	cbz	r0, 8001666 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
}
 8001648:	b002      	add	sp, #8
 800164a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800164e:	6943      	ldr	r3, [r0, #20]
 8001650:	07d9      	lsls	r1, r3, #31
 8001652:	d4ed      	bmi.n	8001630 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001654:	f7fe ffd2 	bl	80005fc <HAL_GetTick>
 8001658:	eba0 0009 	sub.w	r0, r0, r9
 800165c:	4286      	cmp	r6, r0
 800165e:	d32a      	bcc.n	80016b6 <I2C_RequestMemoryRead+0xb6>
 8001660:	b34e      	cbz	r6, 80016b6 <I2C_RequestMemoryRead+0xb6>
 8001662:	6820      	ldr	r0, [r4, #0]
 8001664:	e7df      	b.n	8001626 <I2C_RequestMemoryRead+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001666:	6825      	ldr	r5, [r4, #0]
 8001668:	9001      	str	r0, [sp, #4]
 800166a:	696b      	ldr	r3, [r5, #20]
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	69ab      	ldr	r3, [r5, #24]
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001674:	1c73      	adds	r3, r6, #1
 8001676:	d171      	bne.n	800175c <I2C_RequestMemoryRead+0x15c>
 8001678:	696b      	ldr	r3, [r5, #20]
 800167a:	0618      	lsls	r0, r3, #24
 800167c:	d433      	bmi.n	80016e6 <I2C_RequestMemoryRead+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800167e:	696b      	ldr	r3, [r5, #20]
 8001680:	0559      	lsls	r1, r3, #21
 8001682:	d5f9      	bpl.n	8001678 <I2C_RequestMemoryRead+0x78>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001684:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8001686:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001688:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800168c:	6169      	str	r1, [r5, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800168e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001690:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001694:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001698:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800169a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d1cd      	bne.n	8001646 <I2C_RequestMemoryRead+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016aa:	6822      	ldr	r2, [r4, #0]
 80016ac:	6813      	ldr	r3, [r2, #0]
 80016ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e7c7      	b.n	8001646 <I2C_RequestMemoryRead+0x46>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016b6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80016b8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016ba:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016c0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016c6:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 80016c8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016d2:	680b      	ldr	r3, [r1, #0]
 80016d4:	05d8      	lsls	r0, r3, #23
 80016d6:	d502      	bpl.n	80016de <I2C_RequestMemoryRead+0xde>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016dc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80016de:	2003      	movs	r0, #3
}
 80016e0:	b002      	add	sp, #8
 80016e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016e6:	f1b8 0f01 	cmp.w	r8, #1
 80016ea:	d10a      	bne.n	8001702 <I2C_RequestMemoryRead+0x102>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016ec:	b2ff      	uxtb	r7, r7
 80016ee:	612f      	str	r7, [r5, #16]
 80016f0:	1c71      	adds	r1, r6, #1
 80016f2:	d142      	bne.n	800177a <I2C_RequestMemoryRead+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016f4:	696b      	ldr	r3, [r5, #20]
 80016f6:	061a      	lsls	r2, r3, #24
 80016f8:	d40e      	bmi.n	8001718 <I2C_RequestMemoryRead+0x118>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016fa:	696b      	ldr	r3, [r5, #20]
 80016fc:	055b      	lsls	r3, r3, #21
 80016fe:	d5f9      	bpl.n	80016f4 <I2C_RequestMemoryRead+0xf4>
 8001700:	e7c0      	b.n	8001684 <I2C_RequestMemoryRead+0x84>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001702:	0a3b      	lsrs	r3, r7, #8
 8001704:	612b      	str	r3, [r5, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001706:	1c70      	adds	r0, r6, #1
 8001708:	d147      	bne.n	800179a <I2C_RequestMemoryRead+0x19a>
 800170a:	696b      	ldr	r3, [r5, #20]
 800170c:	0619      	lsls	r1, r3, #24
 800170e:	d4ed      	bmi.n	80016ec <I2C_RequestMemoryRead+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001710:	696b      	ldr	r3, [r5, #20]
 8001712:	055a      	lsls	r2, r3, #21
 8001714:	d5f9      	bpl.n	800170a <I2C_RequestMemoryRead+0x10a>
 8001716:	e7b5      	b.n	8001684 <I2C_RequestMemoryRead+0x84>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001720:	1c71      	adds	r1, r6, #1
 8001722:	d10e      	bne.n	8001742 <I2C_RequestMemoryRead+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001724:	696b      	ldr	r3, [r5, #20]
 8001726:	07da      	lsls	r2, r3, #31
 8001728:	d5fc      	bpl.n	8001724 <I2C_RequestMemoryRead+0x124>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800172a:	f04a 0101 	orr.w	r1, sl, #1
 800172e:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001730:	464a      	mov	r2, r9
 8001732:	4631      	mov	r1, r6
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff fe6b 	bl	8001410 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
    return HAL_TIMEOUT;
 800173a:	3800      	subs	r0, #0
 800173c:	bf18      	it	ne
 800173e:	2001      	movne	r0, #1
 8001740:	e782      	b.n	8001648 <I2C_RequestMemoryRead+0x48>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001742:	696b      	ldr	r3, [r5, #20]
 8001744:	07db      	lsls	r3, r3, #31
 8001746:	d4f0      	bmi.n	800172a <I2C_RequestMemoryRead+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001748:	f7fe ff58 	bl	80005fc <HAL_GetTick>
 800174c:	eba0 0009 	sub.w	r0, r0, r9
 8001750:	4286      	cmp	r6, r0
 8001752:	d3b0      	bcc.n	80016b6 <I2C_RequestMemoryRead+0xb6>
 8001754:	2e00      	cmp	r6, #0
 8001756:	d0ae      	beq.n	80016b6 <I2C_RequestMemoryRead+0xb6>
 8001758:	6825      	ldr	r5, [r4, #0]
 800175a:	e7e1      	b.n	8001720 <I2C_RequestMemoryRead+0x120>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800175c:	696b      	ldr	r3, [r5, #20]
 800175e:	061a      	lsls	r2, r3, #24
 8001760:	d4c1      	bmi.n	80016e6 <I2C_RequestMemoryRead+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001762:	696b      	ldr	r3, [r5, #20]
 8001764:	055a      	lsls	r2, r3, #21
 8001766:	d48d      	bmi.n	8001684 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001768:	f7fe ff48 	bl	80005fc <HAL_GetTick>
 800176c:	eba0 0009 	sub.w	r0, r0, r9
 8001770:	4286      	cmp	r6, r0
 8001772:	d322      	bcc.n	80017ba <I2C_RequestMemoryRead+0x1ba>
 8001774:	b30e      	cbz	r6, 80017ba <I2C_RequestMemoryRead+0x1ba>
 8001776:	6825      	ldr	r5, [r4, #0]
 8001778:	e77c      	b.n	8001674 <I2C_RequestMemoryRead+0x74>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800177a:	696b      	ldr	r3, [r5, #20]
 800177c:	061f      	lsls	r7, r3, #24
 800177e:	d4cb      	bmi.n	8001718 <I2C_RequestMemoryRead+0x118>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001780:	696b      	ldr	r3, [r5, #20]
 8001782:	0558      	lsls	r0, r3, #21
 8001784:	f53f af7e 	bmi.w	8001684 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001788:	f7fe ff38 	bl	80005fc <HAL_GetTick>
 800178c:	eba0 0009 	sub.w	r0, r0, r9
 8001790:	4286      	cmp	r6, r0
 8001792:	d312      	bcc.n	80017ba <I2C_RequestMemoryRead+0x1ba>
 8001794:	b18e      	cbz	r6, 80017ba <I2C_RequestMemoryRead+0x1ba>
 8001796:	6825      	ldr	r5, [r4, #0]
 8001798:	e7aa      	b.n	80016f0 <I2C_RequestMemoryRead+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800179a:	696b      	ldr	r3, [r5, #20]
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	d4a5      	bmi.n	80016ec <I2C_RequestMemoryRead+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017a0:	696b      	ldr	r3, [r5, #20]
 80017a2:	055b      	lsls	r3, r3, #21
 80017a4:	f53f af6e 	bmi.w	8001684 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a8:	f7fe ff28 	bl	80005fc <HAL_GetTick>
 80017ac:	eba0 0009 	sub.w	r0, r0, r9
 80017b0:	4286      	cmp	r6, r0
 80017b2:	d302      	bcc.n	80017ba <I2C_RequestMemoryRead+0x1ba>
 80017b4:	b10e      	cbz	r6, 80017ba <I2C_RequestMemoryRead+0x1ba>
 80017b6:	6825      	ldr	r5, [r4, #0]
 80017b8:	e7a5      	b.n	8001706 <I2C_RequestMemoryRead+0x106>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017ba:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80017bc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017be:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017c4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80017ca:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80017d4:	e766      	b.n	80016a4 <I2C_RequestMemoryRead+0xa4>
 80017d6:	bf00      	nop

080017d8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80017d8:	2800      	cmp	r0, #0
 80017da:	f000 80b5 	beq.w	8001948 <HAL_I2C_Init+0x170>
{
 80017de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017e4:	4604      	mov	r4, r0
 80017e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8094 	beq.w	8001918 <HAL_I2C_Init+0x140>
  __HAL_I2C_DISABLE(hi2c);
 80017f0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f2:	2224      	movs	r2, #36	; 0x24
 80017f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800180e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f000 fe2a 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001814:	6865      	ldr	r5, [r4, #4]
 8001816:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_I2C_Init+0x174>)
 8001818:	429d      	cmp	r5, r3
 800181a:	d84c      	bhi.n	80018b6 <HAL_I2C_Init+0xde>
 800181c:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <HAL_I2C_Init+0x178>)
 800181e:	4298      	cmp	r0, r3
 8001820:	d978      	bls.n	8001914 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001822:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001826:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001828:	fba3 6300 	umull	r6, r3, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800182c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001830:	ea41 4193 	orr.w	r1, r1, r3, lsr #18
 8001834:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001836:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8001838:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800183a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800183e:	3301      	adds	r3, #1
 8001840:	430b      	orrs	r3, r1
 8001842:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001844:	69d1      	ldr	r1, [r2, #28]
 8001846:	3801      	subs	r0, #1
 8001848:	006b      	lsls	r3, r5, #1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001852:	3301      	adds	r3, #1
 8001854:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001858:	4203      	tst	r3, r0
 800185a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800185e:	d160      	bne.n	8001922 <HAL_I2C_Init+0x14a>
 8001860:	2304      	movs	r3, #4
 8001862:	430b      	orrs	r3, r1
 8001864:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001866:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 800186a:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800186c:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800186e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8001872:	432b      	orrs	r3, r5
 8001874:	4303      	orrs	r3, r0
 8001876:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001878:	6890      	ldr	r0, [r2, #8]
 800187a:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800187c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800187e:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8001882:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001886:	4329      	orrs	r1, r5
 8001888:	4301      	orrs	r1, r0
 800188a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800188c:	68d1      	ldr	r1, [r2, #12]
 800188e:	69a0      	ldr	r0, [r4, #24]
 8001890:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001894:	4303      	orrs	r3, r0
 8001896:	430b      	orrs	r3, r1
 8001898:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800189a:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189c:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 800189e:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80018a4:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a6:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ac:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 80018b2:	4618      	mov	r0, r3
}
 80018b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_I2C_Init+0x180>)
 80018b8:	4298      	cmp	r0, r3
 80018ba:	d92b      	bls.n	8001914 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018bc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80018be:	4925      	ldr	r1, [pc, #148]	; (8001954 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018c0:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018c2:	4f26      	ldr	r7, [pc, #152]	; (800195c <HAL_I2C_Init+0x184>)
  freqrange = I2C_FREQRANGE(pclk1);
 80018c4:	fba1 3100 	umull	r3, r1, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018c8:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80018cc:	ea46 4691 	orr.w	r6, r6, r1, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80018d4:	0c89      	lsrs	r1, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018d6:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018d8:	fb03 f301 	mul.w	r3, r3, r1
 80018dc:	fba7 1303 	umull	r1, r3, r7, r3
 80018e0:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018e2:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80018ea:	3301      	adds	r3, #1
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018f0:	69d1      	ldr	r1, [r2, #28]
 80018f2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80018f6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80018fa:	b9ae      	cbnz	r6, 8001928 <HAL_I2C_Init+0x150>
 80018fc:	3801      	subs	r0, #1
 80018fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	b1d3      	cbz	r3, 8001944 <HAL_I2C_Init+0x16c>
 800190e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001912:	e7a6      	b.n	8001862 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8001914:	2001      	movs	r0, #1
}
 8001916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001918:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800191c:	f002 fc6c 	bl	80041f8 <HAL_I2C_MspInit>
 8001920:	e766      	b.n	80017f0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001926:	e79c      	b.n	8001862 <HAL_I2C_Init+0x8a>
 8001928:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800192c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001930:	3801      	subs	r0, #1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	b113      	cbz	r3, 8001944 <HAL_I2C_Init+0x16c>
 800193e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001942:	e78e      	b.n	8001862 <HAL_I2C_Init+0x8a>
 8001944:	2301      	movs	r3, #1
 8001946:	e78c      	b.n	8001862 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8001948:	2001      	movs	r0, #1
}
 800194a:	4770      	bx	lr
 800194c:	000186a0 	.word	0x000186a0
 8001950:	001e847f 	.word	0x001e847f
 8001954:	431bde83 	.word	0x431bde83
 8001958:	003d08ff 	.word	0x003d08ff
 800195c:	10624dd3 	.word	0x10624dd3

08001960 <HAL_I2C_Mem_Write>:
{
 8001960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001964:	4604      	mov	r4, r0
 8001966:	b083      	sub	sp, #12
 8001968:	4699      	mov	r9, r3
 800196a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800196e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001970:	460f      	mov	r7, r1
 8001972:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7fe fe42 	bl	80005fc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001978:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800197c:	2b20      	cmp	r3, #32
 800197e:	d005      	beq.n	800198c <HAL_I2C_Mem_Write+0x2c>
      return HAL_BUSY;
 8001980:	f04f 0802 	mov.w	r8, #2
}
 8001984:	4640      	mov	r0, r8
 8001986:	b003      	add	sp, #12
 8001988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800198c:	4605      	mov	r5, r0
 800198e:	e005      	b.n	800199c <HAL_I2C_Mem_Write+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001990:	f7fe fe34 	bl	80005fc <HAL_GetTick>
 8001994:	1b40      	subs	r0, r0, r5
 8001996:	2819      	cmp	r0, #25
 8001998:	f200 80a8 	bhi.w	8001aec <HAL_I2C_Mem_Write+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	6998      	ldr	r0, [r3, #24]
 80019a0:	43c0      	mvns	r0, r0
 80019a2:	f010 0b02 	ands.w	fp, r0, #2
 80019a6:	d0f3      	beq.n	8001990 <HAL_I2C_Mem_Write+0x30>
    __HAL_LOCK(hi2c);
 80019a8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80019ac:	2a01      	cmp	r2, #1
 80019ae:	d0e7      	beq.n	8001980 <HAL_I2C_Mem_Write+0x20>
 80019b0:	2201      	movs	r2, #1
 80019b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	07d2      	lsls	r2, r2, #31
 80019ba:	d571      	bpl.n	8001aa0 <HAL_I2C_Mem_Write+0x140>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019bc:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019be:	4861      	ldr	r0, [pc, #388]	; (8001b44 <HAL_I2C_Mem_Write+0x1e4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c4:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019c6:	2321      	movs	r3, #33	; 0x21
 80019c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019cc:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ce:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019d0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80019d6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019da:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80019de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019e0:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019e2:	4642      	mov	r2, r8
 80019e4:	e9cd 6500 	strd	r6, r5, [sp]
 80019e8:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ea:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ec:	4639      	mov	r1, r7
    hi2c->XferSize    = hi2c->XferCount;
 80019ee:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff fd52 	bl	800149c <I2C_RequestMemoryWrite>
 80019f8:	4680      	mov	r8, r0
 80019fa:	b9f8      	cbnz	r0, 8001a3c <HAL_I2C_Mem_Write+0xdc>
    while (hi2c->XferSize > 0U)
 80019fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 809d 	beq.w	8001b3e <HAL_I2C_Mem_Write+0x1de>
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	1c71      	adds	r1, r6, #1
 8001a08:	d155      	bne.n	8001ab6 <HAL_I2C_Mem_Write+0x156>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	0612      	lsls	r2, r2, #24
 8001a0e:	d41b      	bmi.n	8001a48 <HAL_I2C_Mem_Write+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	0557      	lsls	r7, r2, #21
 8001a14:	d5f9      	bpl.n	8001a0a <HAL_I2C_Mem_Write+0xaa>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a16:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a18:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a1c:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1e:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a20:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a22:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a26:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8001a2c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d036      	beq.n	8001aaa <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 8001a3c:	f04f 0801 	mov.w	r8, #1
}
 8001a40:	4640      	mov	r0, r8
 8001a42:	b003      	add	sp, #12
 8001a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a48:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001a4a:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a4e:	4607      	mov	r7, r0
      hi2c->XferSize--;
 8001a50:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a54:	f817 2b01 	ldrb.w	r2, [r7], #1
 8001a58:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001a5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001a5c:	6267      	str	r7, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	b292      	uxth	r2, r2
 8001a62:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a64:	695f      	ldr	r7, [r3, #20]
      hi2c->XferSize--;
 8001a66:	b28a      	uxth	r2, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a68:	0779      	lsls	r1, r7, #29
      hi2c->XferSize--;
 8001a6a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a6c:	d515      	bpl.n	8001a9a <HAL_I2C_Mem_Write+0x13a>
 8001a6e:	b942      	cbnz	r2, 8001a82 <HAL_I2C_Mem_Write+0x122>
 8001a70:	1c77      	adds	r7, r6, #1
 8001a72:	d156      	bne.n	8001b22 <HAL_I2C_Mem_Write+0x1c2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	0750      	lsls	r0, r2, #29
 8001a78:	d446      	bmi.n	8001b08 <HAL_I2C_Mem_Write+0x1a8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	0551      	lsls	r1, r2, #21
 8001a7e:	d5f9      	bpl.n	8001a74 <HAL_I2C_Mem_Write+0x114>
 8001a80:	e7c9      	b.n	8001a16 <HAL_I2C_Mem_Write+0xb6>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	7842      	ldrb	r2, [r0, #1]
 8001a84:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001a86:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001a88:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->XferCount--;
 8001a8c:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8001a8e:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8001a90:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8001a92:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8001a94:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8001a96:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001a98:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d1b3      	bne.n	8001a06 <HAL_I2C_Mem_Write+0xa6>
 8001a9e:	e7e7      	b.n	8001a70 <HAL_I2C_Mem_Write+0x110>
      __HAL_I2C_ENABLE(hi2c);
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e788      	b.n	80019bc <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aaa:	6822      	ldr	r2, [r4, #0]
 8001aac:	6813      	ldr	r3, [r2, #0]
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e7c2      	b.n	8001a3c <HAL_I2C_Mem_Write+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	0610      	lsls	r0, r2, #24
 8001aba:	d4c5      	bmi.n	8001a48 <HAL_I2C_Mem_Write+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	0550      	lsls	r0, r2, #21
 8001ac0:	d4a9      	bmi.n	8001a16 <HAL_I2C_Mem_Write+0xb6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac2:	f7fe fd9b 	bl	80005fc <HAL_GetTick>
 8001ac6:	1b40      	subs	r0, r0, r5
 8001ac8:	4286      	cmp	r6, r0
 8001aca:	d301      	bcc.n	8001ad0 <HAL_I2C_Mem_Write+0x170>
 8001acc:	2e00      	cmp	r6, #0
 8001ace:	d199      	bne.n	8001a04 <HAL_I2C_Mem_Write+0xa4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ad0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ad2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ad4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ad6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ada:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001ae0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ae4:	f043 0320 	orr.w	r3, r3, #32
 8001ae8:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001aea:	e7a4      	b.n	8001a36 <HAL_I2C_Mem_Write+0xd6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8001aec:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001aee:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001af2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001af6:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001afc:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b00:	f043 0320 	orr.w	r3, r3, #32
 8001b04:	6423      	str	r3, [r4, #64]	; 0x40
 8001b06:	e73b      	b.n	8001980 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0a:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b0c:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b12:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b14:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001b18:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8001b20:	e730      	b.n	8001984 <HAL_I2C_Mem_Write+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	0752      	lsls	r2, r2, #29
 8001b26:	d4ef      	bmi.n	8001b08 <HAL_I2C_Mem_Write+0x1a8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	0552      	lsls	r2, r2, #21
 8001b2c:	f53f af73 	bmi.w	8001a16 <HAL_I2C_Mem_Write+0xb6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b30:	f7fe fd64 	bl	80005fc <HAL_GetTick>
 8001b34:	1b40      	subs	r0, r0, r5
 8001b36:	4286      	cmp	r6, r0
 8001b38:	d3ca      	bcc.n	8001ad0 <HAL_I2C_Mem_Write+0x170>
 8001b3a:	2e00      	cmp	r6, #0
 8001b3c:	d0c8      	beq.n	8001ad0 <HAL_I2C_Mem_Write+0x170>
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	e796      	b.n	8001a70 <HAL_I2C_Mem_Write+0x110>
 8001b42:	bf00      	nop
 8001b44:	ffff0000 	.word	0xffff0000

08001b48 <HAL_I2C_Mem_Read>:
{
 8001b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	b087      	sub	sp, #28
 8001b50:	469a      	mov	sl, r3
 8001b52:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
 8001b56:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8001b58:	4688      	mov	r8, r1
 8001b5a:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7fe fd4e 	bl	80005fc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b60:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	d004      	beq.n	8001b72 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8001b68:	2502      	movs	r5, #2
}
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	b007      	add	sp, #28
 8001b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b72:	4607      	mov	r7, r0
 8001b74:	e005      	b.n	8001b82 <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b76:	f7fe fd41 	bl	80005fc <HAL_GetTick>
 8001b7a:	1bc0      	subs	r0, r0, r7
 8001b7c:	2819      	cmp	r0, #25
 8001b7e:	f200 80c9 	bhi.w	8001d14 <HAL_I2C_Mem_Read+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	699d      	ldr	r5, [r3, #24]
 8001b86:	43ed      	mvns	r5, r5
 8001b88:	f015 0502 	ands.w	r5, r5, #2
 8001b8c:	d0f3      	beq.n	8001b76 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8001b8e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8001b92:	2a01      	cmp	r2, #1
 8001b94:	d0e8      	beq.n	8001b68 <HAL_I2C_Mem_Read+0x20>
 8001b96:	2201      	movs	r2, #1
 8001b98:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	07d1      	lsls	r1, r2, #31
 8001ba0:	d535      	bpl.n	8001c0e <HAL_I2C_Mem_Read+0xc6>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ba2:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ba4:	48a1      	ldr	r0, [pc, #644]	; (8001e2c <HAL_I2C_Mem_Read+0x2e4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001baa:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bac:	2322      	movs	r3, #34	; 0x22
 8001bae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb2:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb4:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bba:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001bbc:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bc0:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001bc4:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bc6:	464a      	mov	r2, r9
 8001bc8:	e9cd 6700 	strd	r6, r7, [sp]
 8001bcc:	4653      	mov	r3, sl
    hi2c->XferSize    = hi2c->XferCount;
 8001bce:	8525      	strh	r5, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd0:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bd2:	4641      	mov	r1, r8
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff fd13 	bl	8001600 <I2C_RequestMemoryRead>
 8001bda:	4605      	mov	r5, r0
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	f040 80a6 	bne.w	8001d2e <HAL_I2C_Mem_Read+0x1e6>
    if (hi2c->XferSize == 0U)
 8001be2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be4:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8001be6:	b9ba      	cbnz	r2, 8001c18 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be8:	9002      	str	r0, [sp, #8]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	9202      	str	r2, [sp, #8]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	9202      	str	r2, [sp, #8]
 8001bf2:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfa:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001c04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001c0c:	e7ad      	b.n	8001b6a <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e7c4      	b.n	8001ba2 <HAL_I2C_Mem_Read+0x5a>
    else if (hi2c->XferSize == 1U)
 8001c18:	2a01      	cmp	r2, #1
 8001c1a:	f000 8109 	beq.w	8001e30 <HAL_I2C_Mem_Read+0x2e8>
    else if (hi2c->XferSize == 2U)
 8001c1e:	2a02      	cmp	r2, #2
 8001c20:	f000 809b 	beq.w	8001d5a <HAL_I2C_Mem_Read+0x212>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c24:	9005      	str	r0, [sp, #20]
 8001c26:	6959      	ldr	r1, [r3, #20]
 8001c28:	9105      	str	r1, [sp, #20]
 8001c2a:	6999      	ldr	r1, [r3, #24]
 8001c2c:	9105      	str	r1, [sp, #20]
 8001c2e:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8001c30:	2a03      	cmp	r2, #3
 8001c32:	d849      	bhi.n	8001cc8 <HAL_I2C_Mem_Read+0x180>
        if (hi2c->XferSize == 1U)
 8001c34:	2a01      	cmp	r2, #1
 8001c36:	f000 80c9 	beq.w	8001dcc <HAL_I2C_Mem_Read+0x284>
        else if (hi2c->XferSize == 2U)
 8001c3a:	2a02      	cmp	r2, #2
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_I2C_Mem_Read+0x206>
 8001c40:	1c71      	adds	r1, r6, #1
 8001c42:	f040 8099 	bne.w	8001d78 <HAL_I2C_Mem_Read+0x230>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	0752      	lsls	r2, r2, #29
 8001c4a:	d5fc      	bpl.n	8001c46 <HAL_I2C_Mem_Read+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4c:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c54:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8001c5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001c5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8001c64:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8001c66:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8001c68:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001c6a:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c6c:	8522      	strh	r2, [r4, #40]	; 0x28
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001c6e:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	f040 808d 	bne.w	8001d90 <HAL_I2C_Mem_Read+0x248>
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	0752      	lsls	r2, r2, #29
 8001c7a:	d5fc      	bpl.n	8001c76 <HAL_I2C_Mem_Read+0x12e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7c:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c84:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8001c8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001c8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c8e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c90:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c98:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 8001c9a:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8001c9e:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 8001ca0:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ca4:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca6:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 8001ca8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001caa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001cac:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001cae:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8001cb0:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8001cb2:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8001cb4:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8001cb6:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8001cb8:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001cba:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001cbc:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	d09c      	beq.n	8001bfc <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8001cc2:	2a03      	cmp	r2, #3
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	d9b5      	bls.n	8001c34 <HAL_I2C_Mem_Read+0xec>
 8001cc8:	b956      	cbnz	r6, 8001ce0 <HAL_I2C_Mem_Read+0x198>
 8001cca:	e0a1      	b.n	8001e10 <HAL_I2C_Mem_Read+0x2c8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	06d0      	lsls	r0, r2, #27
 8001cd0:	f100 808e 	bmi.w	8001df0 <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd4:	f7fe fc92 	bl	80005fc <HAL_GetTick>
 8001cd8:	1bc0      	subs	r0, r0, r7
 8001cda:	4286      	cmp	r6, r0
 8001cdc:	d364      	bcc.n	8001da8 <HAL_I2C_Mem_Read+0x260>
 8001cde:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	0652      	lsls	r2, r2, #25
 8001ce4:	d5f2      	bpl.n	8001ccc <HAL_I2C_Mem_Read+0x184>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8001cec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cee:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8001cf0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8001cf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cfa:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8001cfc:	3a01      	subs	r2, #1
 8001cfe:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8001d00:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d04:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8001d06:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8001d08:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d0c:	d5d7      	bpl.n	8001cbe <HAL_I2C_Mem_Read+0x176>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0e:	6903      	ldr	r3, [r0, #16]
 8001d10:	704b      	strb	r3, [r1, #1]
 8001d12:	e7c9      	b.n	8001ca8 <HAL_I2C_Mem_Read+0x160>
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d14:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d16:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d1c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d22:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d26:	f043 0320 	orr.w	r3, r3, #32
 8001d2a:	6423      	str	r3, [r4, #64]	; 0x40
 8001d2c:	e71c      	b.n	8001b68 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8001d2e:	2501      	movs	r5, #1
}
 8001d30:	4628      	mov	r0, r5
 8001d32:	b007      	add	sp, #28
 8001d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	0750      	lsls	r0, r2, #29
 8001d3c:	d49e      	bmi.n	8001c7c <HAL_I2C_Mem_Read+0x134>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7fe fc5d 	bl	80005fc <HAL_GetTick>
 8001d42:	1bc0      	subs	r0, r0, r7
 8001d44:	4286      	cmp	r6, r0
 8001d46:	d32f      	bcc.n	8001da8 <HAL_I2C_Mem_Read+0x260>
 8001d48:	2e00      	cmp	r6, #0
 8001d4a:	d02d      	beq.n	8001da8 <HAL_I2C_Mem_Read+0x260>
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	1c71      	adds	r1, r6, #1
 8001d50:	d1f2      	bne.n	8001d38 <HAL_I2C_Mem_Read+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	0752      	lsls	r2, r2, #29
 8001d56:	d5fc      	bpl.n	8001d52 <HAL_I2C_Mem_Read+0x20a>
 8001d58:	e790      	b.n	8001c7c <HAL_I2C_Mem_Read+0x134>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d60:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001d68:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6a:	9004      	str	r0, [sp, #16]
 8001d6c:	6959      	ldr	r1, [r3, #20]
 8001d6e:	9104      	str	r1, [sp, #16]
 8001d70:	6999      	ldr	r1, [r3, #24]
 8001d72:	9104      	str	r1, [sp, #16]
 8001d74:	9904      	ldr	r1, [sp, #16]
 8001d76:	e75b      	b.n	8001c30 <HAL_I2C_Mem_Read+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	0750      	lsls	r0, r2, #29
 8001d7c:	f53f af66 	bmi.w	8001c4c <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d80:	f7fe fc3c 	bl	80005fc <HAL_GetTick>
 8001d84:	1bc0      	subs	r0, r0, r7
 8001d86:	4286      	cmp	r6, r0
 8001d88:	d30e      	bcc.n	8001da8 <HAL_I2C_Mem_Read+0x260>
 8001d8a:	b16e      	cbz	r6, 8001da8 <HAL_I2C_Mem_Read+0x260>
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	e757      	b.n	8001c40 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	0750      	lsls	r0, r2, #29
 8001d94:	f53f af72 	bmi.w	8001c7c <HAL_I2C_Mem_Read+0x134>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d98:	f7fe fc30 	bl	80005fc <HAL_GetTick>
 8001d9c:	1bc0      	subs	r0, r0, r7
 8001d9e:	4286      	cmp	r6, r0
 8001da0:	d302      	bcc.n	8001da8 <HAL_I2C_Mem_Read+0x260>
 8001da2:	2e00      	cmp	r6, #0
 8001da4:	f47f af63 	bne.w	8001c6e <HAL_I2C_Mem_Read+0x126>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001da8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001daa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dac:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001db2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001db8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001dbc:	2501      	movs	r5, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dbe:	f043 0320 	orr.w	r3, r3, #32
}
 8001dc2:	4628      	mov	r0, r5
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dc4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001dc6:	b007      	add	sp, #28
 8001dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dcc:	b94e      	cbnz	r6, 8001de2 <HAL_I2C_Mem_Read+0x29a>
 8001dce:	e029      	b.n	8001e24 <HAL_I2C_Mem_Read+0x2dc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	06d2      	lsls	r2, r2, #27
 8001dd4:	d40c      	bmi.n	8001df0 <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd6:	f7fe fc11 	bl	80005fc <HAL_GetTick>
 8001dda:	1bc0      	subs	r0, r0, r7
 8001ddc:	4286      	cmp	r6, r0
 8001dde:	d3e3      	bcc.n	8001da8 <HAL_I2C_Mem_Read+0x260>
 8001de0:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	0651      	lsls	r1, r2, #25
 8001de6:	d5f3      	bpl.n	8001dd0 <HAL_I2C_Mem_Read+0x288>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001dee:	e75b      	b.n	8001ca8 <HAL_I2C_Mem_Read+0x160>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001df0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df2:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8001df6:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df8:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dfc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e00:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001e06:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e0a:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8001e0c:	2501      	movs	r5, #1
 8001e0e:	e6ac      	b.n	8001b6a <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	0652      	lsls	r2, r2, #25
 8001e14:	f53f af67 	bmi.w	8001ce6 <HAL_I2C_Mem_Read+0x19e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	06d1      	lsls	r1, r2, #27
 8001e1c:	d4e8      	bmi.n	8001df0 <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1e:	f7fe fbed 	bl	80005fc <HAL_GetTick>
 8001e22:	e7c1      	b.n	8001da8 <HAL_I2C_Mem_Read+0x260>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	0650      	lsls	r0, r2, #25
 8001e28:	d5f6      	bpl.n	8001e18 <HAL_I2C_Mem_Read+0x2d0>
 8001e2a:	e7dd      	b.n	8001de8 <HAL_I2C_Mem_Read+0x2a0>
 8001e2c:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001e36:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e38:	9003      	str	r0, [sp, #12]
 8001e3a:	6959      	ldr	r1, [r3, #20]
 8001e3c:	9103      	str	r1, [sp, #12]
 8001e3e:	6999      	ldr	r1, [r3, #24]
 8001e40:	9103      	str	r1, [sp, #12]
 8001e42:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001e4a:	6019      	str	r1, [r3, #0]
 8001e4c:	e6f0      	b.n	8001c30 <HAL_I2C_Mem_Read+0xe8>
 8001e4e:	bf00      	nop

08001e50 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e50:	2800      	cmp	r0, #0
 8001e52:	f000 81a5 	beq.w	80021a0 <HAL_RCC_OscConfig+0x350>
{
 8001e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	6803      	ldr	r3, [r0, #0]
 8001e5c:	07dd      	lsls	r5, r3, #31
{
 8001e5e:	b082      	sub	sp, #8
 8001e60:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	d52f      	bpl.n	8001ec4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e64:	49ac      	ldr	r1, [pc, #688]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8001e66:	688a      	ldr	r2, [r1, #8]
 8001e68:	f002 020c 	and.w	r2, r2, #12
 8001e6c:	2a04      	cmp	r2, #4
 8001e6e:	f000 80ec 	beq.w	800204a <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e72:	688a      	ldr	r2, [r1, #8]
 8001e74:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e78:	2a08      	cmp	r2, #8
 8001e7a:	f000 80e2 	beq.w	8002042 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	6863      	ldr	r3, [r4, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	f000 80eb 	beq.w	800205e <HAL_RCC_OscConfig+0x20e>
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8c:	f000 8178 	beq.w	8002180 <HAL_RCC_OscConfig+0x330>
 8001e90:	4da1      	ldr	r5, [pc, #644]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8001e92:	682a      	ldr	r2, [r5, #0]
 8001e94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e98:	602a      	str	r2, [r5, #0]
 8001e9a:	682a      	ldr	r2, [r5, #0]
 8001e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ea0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 80e0 	bne.w	8002068 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7fe fba8 	bl	80005fc <HAL_GetTick>
 8001eac:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7fe fba4 	bl	80005fc <HAL_GetTick>
 8001eb4:	1b80      	subs	r0, r0, r6
 8001eb6:	2864      	cmp	r0, #100	; 0x64
 8001eb8:	f200 8100 	bhi.w	80020bc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	039b      	lsls	r3, r3, #14
 8001ec0:	d4f6      	bmi.n	8001eb0 <HAL_RCC_OscConfig+0x60>
 8001ec2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec4:	079f      	lsls	r7, r3, #30
 8001ec6:	d528      	bpl.n	8001f1a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ec8:	4a93      	ldr	r2, [pc, #588]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8001eca:	6891      	ldr	r1, [r2, #8]
 8001ecc:	f011 0f0c 	tst.w	r1, #12
 8001ed0:	f000 8090 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed4:	6891      	ldr	r1, [r2, #8]
 8001ed6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eda:	2908      	cmp	r1, #8
 8001edc:	f000 8086 	beq.w	8001fec <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ee0:	68e3      	ldr	r3, [r4, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8106 	beq.w	80020f4 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee8:	4b8c      	ldr	r3, [pc, #560]	; (800211c <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4e8b      	ldr	r6, [pc, #556]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fb84 	bl	80005fc <HAL_GetTick>
 8001ef4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	e005      	b.n	8001f04 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7fe fb80 	bl	80005fc <HAL_GetTick>
 8001efc:	1b40      	subs	r0, r0, r5
 8001efe:	2802      	cmp	r0, #2
 8001f00:	f200 80dc 	bhi.w	80020bc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	6833      	ldr	r3, [r6, #0]
 8001f06:	0798      	lsls	r0, r3, #30
 8001f08:	d5f6      	bpl.n	8001ef8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	6833      	ldr	r3, [r6, #0]
 8001f0c:	6922      	ldr	r2, [r4, #16]
 8001f0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f16:	6033      	str	r3, [r6, #0]
 8001f18:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	071a      	lsls	r2, r3, #28
 8001f1c:	d452      	bmi.n	8001fc4 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1e:	0758      	lsls	r0, r3, #29
 8001f20:	d52f      	bpl.n	8001f82 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4a7d      	ldr	r2, [pc, #500]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8001f24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f26:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	d07e      	beq.n	800202a <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8001f2c:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	4e7c      	ldr	r6, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x2d0>)
 8001f30:	6833      	ldr	r3, [r6, #0]
 8001f32:	05d9      	lsls	r1, r3, #23
 8001f34:	f140 80b2 	bpl.w	800209c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	68a3      	ldr	r3, [r4, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	f000 80c2 	beq.w	80020c4 <HAL_RCC_OscConfig+0x274>
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	f000 812f 	beq.w	80021a4 <HAL_RCC_OscConfig+0x354>
 8001f46:	4e74      	ldr	r6, [pc, #464]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8001f48:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	6732      	str	r2, [r6, #112]	; 0x70
 8001f50:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001f52:	f022 0204 	bic.w	r2, r2, #4
 8001f56:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 80b8 	bne.w	80020ce <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fb4d 	bl	80005fc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f66:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	e005      	b.n	8001f76 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7fe fb47 	bl	80005fc <HAL_GetTick>
 8001f6e:	1bc0      	subs	r0, r0, r7
 8001f70:	4540      	cmp	r0, r8
 8001f72:	f200 80a3 	bhi.w	80020bc <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f76:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f78:	0798      	lsls	r0, r3, #30
 8001f7a:	d4f6      	bmi.n	8001f6a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7c:	2d00      	cmp	r5, #0
 8001f7e:	f040 8109 	bne.w	8002194 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	69a0      	ldr	r0, [r4, #24]
 8001f84:	b1d0      	cbz	r0, 8001fbc <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f86:	4d64      	ldr	r5, [pc, #400]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8001f88:	68ab      	ldr	r3, [r5, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	f000 80cc 	beq.w	800212c <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_OscConfig+0x2d4>)
 8001f96:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9c:	f000 810c 	beq.w	80021b8 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fb2c 	bl	80005fc <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa4:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001fa6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa8:	e005      	b.n	8001fb6 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe fb27 	bl	80005fc <HAL_GetTick>
 8001fae:	1b40      	subs	r0, r0, r5
 8001fb0:	2802      	cmp	r0, #2
 8001fb2:	f200 8083 	bhi.w	80020bc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	d4f6      	bmi.n	8001faa <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001fbc:	2000      	movs	r0, #0
}
 8001fbe:	b002      	add	sp, #8
 8001fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fc4:	6963      	ldr	r3, [r4, #20]
 8001fc6:	b303      	cbz	r3, 800200a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001fc8:	4b57      	ldr	r3, [pc, #348]	; (8002128 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	4e53      	ldr	r6, [pc, #332]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fd0:	f7fe fb14 	bl	80005fc <HAL_GetTick>
 8001fd4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	e004      	b.n	8001fe2 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fb10 	bl	80005fc <HAL_GetTick>
 8001fdc:	1b40      	subs	r0, r0, r5
 8001fde:	2802      	cmp	r0, #2
 8001fe0:	d86c      	bhi.n	80020bc <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001fe4:	079b      	lsls	r3, r3, #30
 8001fe6:	d5f7      	bpl.n	8001fd8 <HAL_RCC_OscConfig+0x188>
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	e798      	b.n	8001f1e <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fec:	6852      	ldr	r2, [r2, #4]
 8001fee:	0256      	lsls	r6, r2, #9
 8001ff0:	f53f af76 	bmi.w	8001ee0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff4:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	0795      	lsls	r5, r2, #30
 8001ffa:	d543      	bpl.n	8002084 <HAL_RCC_OscConfig+0x234>
 8001ffc:	68e2      	ldr	r2, [r4, #12]
 8001ffe:	2a01      	cmp	r2, #1
 8002000:	d040      	beq.n	8002084 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8002002:	2001      	movs	r0, #1
}
 8002004:	b002      	add	sp, #8
 8002006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800200a:	4a47      	ldr	r2, [pc, #284]	; (8002128 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4e42      	ldr	r6, [pc, #264]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800200e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002010:	f7fe faf4 	bl	80005fc <HAL_GetTick>
 8002014:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002016:	e004      	b.n	8002022 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002018:	f7fe faf0 	bl	80005fc <HAL_GetTick>
 800201c:	1b40      	subs	r0, r0, r5
 800201e:	2802      	cmp	r0, #2
 8002020:	d84c      	bhi.n	80020bc <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002022:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002024:	079f      	lsls	r7, r3, #30
 8002026:	d4f7      	bmi.n	8002018 <HAL_RCC_OscConfig+0x1c8>
 8002028:	e7de      	b.n	8001fe8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800202e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
 8002034:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800203e:	2501      	movs	r5, #1
 8002040:	e775      	b.n	8001f2e <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002042:	684a      	ldr	r2, [r1, #4]
 8002044:	0250      	lsls	r0, r2, #9
 8002046:	f57f af1a 	bpl.w	8001e7e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204a:	4a33      	ldr	r2, [pc, #204]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	0391      	lsls	r1, r2, #14
 8002050:	f57f af38 	bpl.w	8001ec4 <HAL_RCC_OscConfig+0x74>
 8002054:	6862      	ldr	r2, [r4, #4]
 8002056:	2a00      	cmp	r2, #0
 8002058:	f47f af34 	bne.w	8001ec4 <HAL_RCC_OscConfig+0x74>
 800205c:	e7d1      	b.n	8002002 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205e:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002068:	f7fe fac8 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206c:	4e2a      	ldr	r6, [pc, #168]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800206e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002070:	e004      	b.n	800207c <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002072:	f7fe fac3 	bl	80005fc <HAL_GetTick>
 8002076:	1b40      	subs	r0, r0, r5
 8002078:	2864      	cmp	r0, #100	; 0x64
 800207a:	d81f      	bhi.n	80020bc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207c:	6833      	ldr	r3, [r6, #0]
 800207e:	039a      	lsls	r2, r3, #14
 8002080:	d5f7      	bpl.n	8002072 <HAL_RCC_OscConfig+0x222>
 8002082:	e71e      	b.n	8001ec2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002084:	4924      	ldr	r1, [pc, #144]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 8002086:	6920      	ldr	r0, [r4, #16]
 8002088:	680a      	ldr	r2, [r1, #0]
 800208a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800208e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002092:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002094:	071a      	lsls	r2, r3, #28
 8002096:	f57f af42 	bpl.w	8001f1e <HAL_RCC_OscConfig+0xce>
 800209a:	e793      	b.n	8001fc4 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209c:	6833      	ldr	r3, [r6, #0]
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80020a4:	f7fe faaa 	bl	80005fc <HAL_GetTick>
 80020a8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	6833      	ldr	r3, [r6, #0]
 80020ac:	05da      	lsls	r2, r3, #23
 80020ae:	f53f af43 	bmi.w	8001f38 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe faa3 	bl	80005fc <HAL_GetTick>
 80020b6:	1bc0      	subs	r0, r0, r7
 80020b8:	2802      	cmp	r0, #2
 80020ba:	d9f6      	bls.n	80020aa <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80020bc:	2003      	movs	r0, #3
}
 80020be:	b002      	add	sp, #8
 80020c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
 80020c6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80020ce:	f7fe fa95 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d2:	4f11      	ldr	r7, [pc, #68]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80020d4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	e004      	b.n	80020e6 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe fa8e 	bl	80005fc <HAL_GetTick>
 80020e0:	1b80      	subs	r0, r0, r6
 80020e2:	4540      	cmp	r0, r8
 80020e4:	d8ea      	bhi.n	80020bc <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e8:	079b      	lsls	r3, r3, #30
 80020ea:	d5f7      	bpl.n	80020dc <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 80020ec:	2d00      	cmp	r5, #0
 80020ee:	f43f af48 	beq.w	8001f82 <HAL_RCC_OscConfig+0x132>
 80020f2:	e04f      	b.n	8002194 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 80020f4:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	4e08      	ldr	r6, [pc, #32]	; (8002118 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80020f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020fa:	f7fe fa7f 	bl	80005fc <HAL_GetTick>
 80020fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002100:	e004      	b.n	800210c <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002102:	f7fe fa7b 	bl	80005fc <HAL_GetTick>
 8002106:	1b40      	subs	r0, r0, r5
 8002108:	2802      	cmp	r0, #2
 800210a:	d8d7      	bhi.n	80020bc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210c:	6833      	ldr	r3, [r6, #0]
 800210e:	0799      	lsls	r1, r3, #30
 8002110:	d4f7      	bmi.n	8002102 <HAL_RCC_OscConfig+0x2b2>
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	e701      	b.n	8001f1a <HAL_RCC_OscConfig+0xca>
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	42470000 	.word	0x42470000
 8002120:	40007000 	.word	0x40007000
 8002124:	42470060 	.word	0x42470060
 8002128:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	2801      	cmp	r0, #1
 800212e:	f43f af46 	beq.w	8001fbe <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8002132:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002134:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800213a:	4291      	cmp	r1, r2
 800213c:	f47f af61 	bne.w	8002002 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002140:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002142:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	4291      	cmp	r1, r2
 8002148:	f47f af5b 	bne.w	8002002 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800214e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002152:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002154:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002158:	f47f af53 	bne.w	8002002 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800215e:	0852      	lsrs	r2, r2, #1
 8002160:	3a01      	subs	r2, #1
 8002162:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002166:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800216a:	f47f af4a 	bne.w	8002002 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800216e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002170:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002178:	bf14      	ite	ne
 800217a:	2001      	movne	r0, #1
 800217c:	2000      	moveq	r0, #0
 800217e:	e71e      	b.n	8001fbe <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_OscConfig+0x3c4>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002190:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002192:	e769      	b.n	8002068 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_RCC_OscConfig+0x3c4>)
 8002196:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	e6f0      	b.n	8001f82 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80021a0:	2001      	movs	r0, #1
}
 80021a2:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x3c4>)
 80021a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021a8:	f042 0204 	orr.w	r2, r2, #4
 80021ac:	671a      	str	r2, [r3, #112]	; 0x70
 80021ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b6:	e78a      	b.n	80020ce <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80021b8:	f7fe fa20 	bl	80005fc <HAL_GetTick>
 80021bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	e005      	b.n	80021cc <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe fa1c 	bl	80005fc <HAL_GetTick>
 80021c4:	1b80      	subs	r0, r0, r6
 80021c6:	2802      	cmp	r0, #2
 80021c8:	f63f af78 	bhi.w	80020bc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	0199      	lsls	r1, r3, #6
 80021d0:	d4f6      	bmi.n	80021c0 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021d2:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80021d6:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80021da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80021dc:	4333      	orrs	r3, r6
 80021de:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80021e2:	0852      	lsrs	r2, r2, #1
 80021e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80021e8:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80021ea:	490b      	ldr	r1, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	4e09      	ldr	r6, [pc, #36]	; (8002214 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80021f2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80021f6:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80021f8:	f7fe fa00 	bl	80005fc <HAL_GetTick>
 80021fc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	e005      	b.n	800220c <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe f9fc 	bl	80005fc <HAL_GetTick>
 8002204:	1b00      	subs	r0, r0, r4
 8002206:	2802      	cmp	r0, #2
 8002208:	f63f af58 	bhi.w	80020bc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	6833      	ldr	r3, [r6, #0]
 800220e:	019a      	lsls	r2, r3, #6
 8002210:	d5f6      	bpl.n	8002200 <HAL_RCC_OscConfig+0x3b0>
 8002212:	e6d3      	b.n	8001fbc <HAL_RCC_OscConfig+0x16c>
 8002214:	40023800 	.word	0x40023800
 8002218:	42470060 	.word	0x42470060

0800221c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	460d      	mov	r5, r1
 8002220:	b088      	sub	sp, #32
 8002222:	4614      	mov	r4, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002224:	bb08      	cbnz	r0, 800226a <HAL_RCC_MCOConfig+0x4e>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002226:	4e23      	ldr	r6, [pc, #140]	; (80022b4 <HAL_RCC_MCOConfig+0x98>)
 8002228:	9000      	str	r0, [sp, #0]
 800222a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	6332      	str	r2, [r6, #48]	; 0x30
 8002232:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002234:	4603      	mov	r3, r0
 8002236:	f002 0201 	and.w	r2, r2, #1
 800223a:	9200      	str	r2, [sp, #0]
    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800223c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800223e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002242:	2302      	movs	r3, #2
 8002244:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __MCO1_CLK_ENABLE();
 8002248:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800224a:	481b      	ldr	r0, [pc, #108]	; (80022b8 <HAL_RCC_MCOConfig+0x9c>)
    GPIO_InitStruct.Pin = MCO1_PIN;
 800224c:	2200      	movs	r2, #0
 800224e:	2303      	movs	r3, #3
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002250:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002252:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002256:	f7fe ffc7 	bl	80011e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800225a:	68b2      	ldr	r2, [r6, #8]
 800225c:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 8002260:	432a      	orrs	r2, r5
 8002262:	4322      	orrs	r2, r4
 8002264:	60b2      	str	r2, [r6, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002266:	b008      	add	sp, #32
 8002268:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 800226a:	4e12      	ldr	r6, [pc, #72]	; (80022b4 <HAL_RCC_MCOConfig+0x98>)
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800226c:	4813      	ldr	r0, [pc, #76]	; (80022bc <HAL_RCC_MCOConfig+0xa0>)
    __MCO2_CLK_ENABLE();
 800226e:	2200      	movs	r2, #0
 8002270:	9201      	str	r2, [sp, #4]
 8002272:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6333      	str	r3, [r6, #48]	; 0x30
 800227a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800227c:	9206      	str	r2, [sp, #24]
    __MCO2_CLK_ENABLE();
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002288:	2302      	movs	r3, #2
 800228a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __MCO2_CLK_ENABLE();
 800228e:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002290:	2200      	movs	r2, #0
 8002292:	2303      	movs	r3, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002294:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002296:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800229a:	f7fe ffa5 	bl	80011e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800229e:	68b3      	ldr	r3, [r6, #8]
 80022a0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80022a4:	ea43 0105 	orr.w	r1, r3, r5
 80022a8:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
 80022ac:	60b1      	str	r1, [r6, #8]
}
 80022ae:	b008      	add	sp, #32
 80022b0:	bd70      	pop	{r4, r5, r6, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020800 	.word	0x40020800

080022c0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c0:	4917      	ldr	r1, [pc, #92]	; (8002320 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80022c2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c4:	688b      	ldr	r3, [r1, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d01b      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x46>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d117      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d4:	684b      	ldr	r3, [r1, #4]
 80022d6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022de:	d114      	bne.n	800230a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e0:	6849      	ldr	r1, [r1, #4]
 80022e2:	4810      	ldr	r0, [pc, #64]	; (8002324 <HAL_RCC_GetSysClockFreq+0x64>)
 80022e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80022e8:	fba1 0100 	umull	r0, r1, r1, r0
 80022ec:	f7fd ffc0 	bl	8000270 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_GetSysClockFreq+0x60>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022f8:	3301      	adds	r3, #1
 80022fa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80022fc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002300:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002302:	4808      	ldr	r0, [pc, #32]	; (8002324 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002304:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002306:	4808      	ldr	r0, [pc, #32]	; (8002328 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002308:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230a:	684b      	ldr	r3, [r1, #4]
 800230c:	4806      	ldr	r0, [pc, #24]	; (8002328 <HAL_RCC_GetSysClockFreq+0x68>)
 800230e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002312:	fba3 0100 	umull	r0, r1, r3, r0
 8002316:	2300      	movs	r3, #0
 8002318:	f7fd ffaa 	bl	8000270 <__aeabi_uldivmod>
 800231c:	e7e8      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x30>
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400
 8002328:	007a1200 	.word	0x007a1200

0800232c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800232c:	2800      	cmp	r0, #0
 800232e:	f000 8087 	beq.w	8002440 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002332:	4a48      	ldr	r2, [pc, #288]	; (8002454 <HAL_RCC_ClockConfig+0x128>)
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	428b      	cmp	r3, r1
{
 800233c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002340:	460d      	mov	r5, r1
 8002342:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	d209      	bcs.n	800235a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	b2cb      	uxtb	r3, r1
 8002348:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	428b      	cmp	r3, r1
 8002352:	d002      	beq.n	800235a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002354:	2001      	movs	r0, #1
}
 8002356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	0798      	lsls	r0, r3, #30
 800235e:	d514      	bpl.n	800238a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	0759      	lsls	r1, r3, #29
 8002362:	d504      	bpl.n	800236e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002364:	493c      	ldr	r1, [pc, #240]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 8002366:	688a      	ldr	r2, [r1, #8]
 8002368:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800236c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	071a      	lsls	r2, r3, #28
 8002370:	d504      	bpl.n	800237c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002372:	4939      	ldr	r1, [pc, #228]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 8002374:	688a      	ldr	r2, [r1, #8]
 8002376:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800237a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4936      	ldr	r1, [pc, #216]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 800237e:	68a0      	ldr	r0, [r4, #8]
 8002380:	688a      	ldr	r2, [r1, #8]
 8002382:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002386:	4302      	orrs	r2, r0
 8002388:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	07df      	lsls	r7, r3, #31
 800238c:	d521      	bpl.n	80023d2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	6862      	ldr	r2, [r4, #4]
 8002390:	2a01      	cmp	r2, #1
 8002392:	d057      	beq.n	8002444 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002394:	1e93      	subs	r3, r2, #2
 8002396:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 800239a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239c:	d94d      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	0799      	lsls	r1, r3, #30
 80023a0:	d5d8      	bpl.n	8002354 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4e2d      	ldr	r6, [pc, #180]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 80023a4:	68b3      	ldr	r3, [r6, #8]
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80023ae:	f7fe f925 	bl	80005fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80023b6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b8:	e004      	b.n	80023c4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ba:	f7fe f91f 	bl	80005fc <HAL_GetTick>
 80023be:	1bc0      	subs	r0, r0, r7
 80023c0:	4540      	cmp	r0, r8
 80023c2:	d844      	bhi.n	800244e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c4:	68b3      	ldr	r3, [r6, #8]
 80023c6:	6862      	ldr	r2, [r4, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023d0:	d1f3      	bne.n	80023ba <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_RCC_ClockConfig+0x128>)
 80023d4:	6813      	ldr	r3, [r2, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	42ab      	cmp	r3, r5
 80023dc:	d906      	bls.n	80023ec <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	b2eb      	uxtb	r3, r5
 80023e0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	6813      	ldr	r3, [r2, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	42ab      	cmp	r3, r5
 80023ea:	d1b3      	bne.n	8002354 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	075a      	lsls	r2, r3, #29
 80023f0:	d506      	bpl.n	8002400 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f2:	4919      	ldr	r1, [pc, #100]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 80023f4:	68e0      	ldr	r0, [r4, #12]
 80023f6:	688a      	ldr	r2, [r1, #8]
 80023f8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80023fc:	4302      	orrs	r2, r0
 80023fe:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	071b      	lsls	r3, r3, #28
 8002402:	d507      	bpl.n	8002414 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 8002406:	6921      	ldr	r1, [r4, #16]
 8002408:	6893      	ldr	r3, [r2, #8]
 800240a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800240e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002412:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002414:	f7ff ff54 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8002418:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 800241a:	4c10      	ldr	r4, [pc, #64]	; (800245c <HAL_RCC_ClockConfig+0x130>)
 800241c:	6892      	ldr	r2, [r2, #8]
 800241e:	4910      	ldr	r1, [pc, #64]	; (8002460 <HAL_RCC_ClockConfig+0x134>)
 8002420:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002424:	4603      	mov	r3, r0
 8002426:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002428:	480e      	ldr	r0, [pc, #56]	; (8002464 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800242a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800242c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800242e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002430:	f7fe f89a 	bl	8000568 <HAL_InitTick>
  return HAL_OK;
 8002434:	2000      	movs	r0, #0
}
 8002436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	0198      	lsls	r0, r3, #6
 800243c:	d4b1      	bmi.n	80023a2 <HAL_RCC_ClockConfig+0x76>
 800243e:	e789      	b.n	8002354 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002440:	2001      	movs	r0, #1
}
 8002442:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_RCC_ClockConfig+0x12c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	039e      	lsls	r6, r3, #14
 800244a:	d4aa      	bmi.n	80023a2 <HAL_RCC_ClockConfig+0x76>
 800244c:	e782      	b.n	8002354 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800244e:	2003      	movs	r0, #3
 8002450:	e781      	b.n	8002356 <HAL_RCC_ClockConfig+0x2a>
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00
 8002458:	40023800 	.word	0x40023800
 800245c:	08005d4c 	.word	0x08005d4c
 8002460:	20000068 	.word	0x20000068
 8002464:	20000004 	.word	0x20000004

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <HAL_RCC_GetPCLK1Freq+0x14>)
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x18>)
 800246c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800246e:	4905      	ldr	r1, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002470:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002474:	6808      	ldr	r0, [r1, #0]
 8002476:	5cd3      	ldrb	r3, [r2, r3]
}
 8002478:	40d8      	lsrs	r0, r3
 800247a:	4770      	bx	lr
 800247c:	40023800 	.word	0x40023800
 8002480:	08005d5c 	.word	0x08005d5c
 8002484:	20000068 	.word	0x20000068

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_RCC_GetPCLK2Freq+0x14>)
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800248c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800248e:	4905      	ldr	r1, [pc, #20]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002490:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002494:	6808      	ldr	r0, [r1, #0]
 8002496:	5cd3      	ldrb	r3, [r2, r3]
}
 8002498:	40d8      	lsrs	r0, r3
 800249a:	4770      	bx	lr
 800249c:	40023800 	.word	0x40023800
 80024a0:	08005d5c 	.word	0x08005d5c
 80024a4:	20000068 	.word	0x20000068

080024a8 <HAL_SRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80024a8:	b338      	cbz	r0, 80024fa <HAL_SRAM_Init+0x52>
{ 
 80024aa:	b570      	push	{r4, r5, r6, lr}
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80024ac:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80024b0:	4615      	mov	r5, r2
 80024b2:	460e      	mov	r6, r1
 80024b4:	4604      	mov	r4, r0
 80024b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024ba:	b1cb      	cbz	r3, 80024f0 <HAL_SRAM_Init+0x48>
    HAL_SRAM_MspInit(hsram);
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80024bc:	4621      	mov	r1, r4
 80024be:	f851 0b08 	ldr.w	r0, [r1], #8
 80024c2:	f000 f941 	bl	8002748 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80024c6:	68a2      	ldr	r2, [r4, #8]
 80024c8:	6820      	ldr	r0, [r4, #0]
 80024ca:	4631      	mov	r1, r6
 80024cc:	f000 f968 	bl	80027a0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80024d0:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 80024d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024d6:	4629      	mov	r1, r5
 80024d8:	f000 f982 	bl	80027e0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80024dc:	68a1      	ldr	r1, [r4, #8]
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 80024ec:	2000      	movs	r0, #0
}
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80024f0:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    HAL_SRAM_MspInit(hsram);
 80024f4:	f001 fef4 	bl	80042e0 <HAL_SRAM_MspInit>
 80024f8:	e7e0      	b.n	80024bc <HAL_SRAM_Init+0x14>
     return HAL_ERROR;
 80024fa:	2001      	movs	r0, #1
}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop

08002500 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002500:	2800      	cmp	r0, #0
 8002502:	f000 8090 	beq.w	8002626 <HAL_UART_Init+0x126>
{
 8002506:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002508:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800250c:	4604      	mov	r4, r0
 800250e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8082 	beq.w	800261c <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002518:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800251a:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800251c:	2224      	movs	r2, #36	; 0x24
 800251e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002522:	68d8      	ldr	r0, [r3, #12]
 8002524:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002528:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800252c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800252e:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002530:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002532:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002536:	4329      	orrs	r1, r5
 8002538:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800253a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800253c:	6965      	ldr	r5, [r4, #20]
 800253e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8002540:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002544:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002546:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800254a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800254c:	430a      	orrs	r2, r1
 800254e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002554:	4935      	ldr	r1, [pc, #212]	; (800262c <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002556:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800255a:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800255c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800255e:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002560:	d035      	beq.n	80025ce <HAL_UART_Init+0xce>
 8002562:	4a33      	ldr	r2, [pc, #204]	; (8002630 <HAL_UART_Init+0x130>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d032      	beq.n	80025ce <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002568:	f7ff ff7e 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256c:	69e3      	ldr	r3, [r4, #28]
 800256e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002572:	d032      	beq.n	80025da <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002574:	6863      	ldr	r3, [r4, #4]
 8002576:	4e2f      	ldr	r6, [pc, #188]	; (8002634 <HAL_UART_Init+0x134>)
 8002578:	2119      	movs	r1, #25
 800257a:	009a      	lsls	r2, r3, #2
 800257c:	fba0 0101 	umull	r0, r1, r0, r1
 8002580:	0f9b      	lsrs	r3, r3, #30
 8002582:	f7fd fe75 	bl	8000270 <__aeabi_uldivmod>
 8002586:	fba6 2500 	umull	r2, r5, r6, r0
 800258a:	096d      	lsrs	r5, r5, #5
 800258c:	2164      	movs	r1, #100	; 0x64
 800258e:	fb01 0215 	mls	r2, r1, r5, r0
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	3232      	adds	r2, #50	; 0x32
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	fba6 1202 	umull	r1, r2, r6, r2
 800259c:	012d      	lsls	r5, r5, #4
 800259e:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 80025a2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025b2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80025b4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80025b8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80025ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025be:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025c2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025c6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80025ca:	4628      	mov	r0, r5
}
 80025cc:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80025ce:	f7ff ff5b 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d2:	69e3      	ldr	r3, [r4, #28]
 80025d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d8:	d1cc      	bne.n	8002574 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025da:	6862      	ldr	r2, [r4, #4]
 80025dc:	4e15      	ldr	r6, [pc, #84]	; (8002634 <HAL_UART_Init+0x134>)
 80025de:	1892      	adds	r2, r2, r2
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	f04f 0119 	mov.w	r1, #25
 80025e8:	415b      	adcs	r3, r3
 80025ea:	fba0 0101 	umull	r0, r1, r0, r1
 80025ee:	f7fd fe3f 	bl	8000270 <__aeabi_uldivmod>
 80025f2:	fba6 2100 	umull	r2, r1, r6, r0
 80025f6:	094d      	lsrs	r5, r1, #5
 80025f8:	2164      	movs	r1, #100	; 0x64
 80025fa:	fb01 0215 	mls	r2, r1, r5, r0
 80025fe:	00d2      	lsls	r2, r2, #3
 8002600:	3232      	adds	r2, #50	; 0x32
 8002602:	fba6 1202 	umull	r1, r2, r6, r2
 8002606:	f3c2 1142 	ubfx	r1, r2, #5, #3
 800260a:	0912      	lsrs	r2, r2, #4
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8002612:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002616:	440a      	add	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	e7c3      	b.n	80025a4 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800261c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002620:	f001 fe24 	bl	800426c <HAL_UART_MspInit>
 8002624:	e778      	b.n	8002518 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8002626:	2001      	movs	r0, #1
}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40011000 	.word	0x40011000
 8002630:	40011400 	.word	0x40011400
 8002634:	51eb851f 	.word	0x51eb851f

08002638 <HAL_UART_Transmit>:
{
 8002638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800263c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800263e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8002642:	2820      	cmp	r0, #32
 8002644:	d168      	bne.n	8002718 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 8002646:	4688      	mov	r8, r1
 8002648:	2900      	cmp	r1, #0
 800264a:	d040      	beq.n	80026ce <HAL_UART_Transmit+0x96>
 800264c:	4617      	mov	r7, r2
 800264e:	2a00      	cmp	r2, #0
 8002650:	d03d      	beq.n	80026ce <HAL_UART_Transmit+0x96>
 8002652:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8002654:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002658:	2b01      	cmp	r3, #1
 800265a:	d05d      	beq.n	8002718 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800265c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800265e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002660:	f04f 0900 	mov.w	r9, #0
 8002664:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8002668:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800266c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002670:	f7fd ffc4 	bl	80005fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002674:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8002676:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800267c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800267e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002680:	d04d      	beq.n	800271e <HAL_UART_Transmit+0xe6>
    while (huart->TxXferCount > 0U)
 8002682:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002684:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8002686:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8002688:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800268c:	2b00      	cmp	r3, #0
 800268e:	d058      	beq.n	8002742 <HAL_UART_Transmit+0x10a>
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	1c69      	adds	r1, r5, #1
 8002694:	d11e      	bne.n	80026d4 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002696:	6813      	ldr	r3, [r2, #0]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	d5fc      	bpl.n	8002696 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 800269c:	f1b8 0f00 	cmp.w	r8, #0
 80026a0:	d035      	beq.n	800270e <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026a2:	f818 3b01 	ldrb.w	r3, [r8], #1
 80026a6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80026a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026b0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ec      	bne.n	8002692 <HAL_UART_Transmit+0x5a>
 80026b8:	1c68      	adds	r0, r5, #1
 80026ba:	d136      	bne.n	800272a <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	0659      	lsls	r1, r3, #25
 80026c0:	d5fc      	bpl.n	80026bc <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80026c2:	2320      	movs	r3, #32
 80026c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80026c8:	2000      	movs	r0, #0
}
 80026ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80026ce:	2001      	movs	r0, #1
}
 80026d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d4:	6813      	ldr	r3, [r2, #0]
 80026d6:	061f      	lsls	r7, r3, #24
 80026d8:	d4e0      	bmi.n	800269c <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026da:	b12d      	cbz	r5, 80026e8 <HAL_UART_Transmit+0xb0>
 80026dc:	f7fd ff8e 	bl	80005fc <HAL_GetTick>
 80026e0:	1b80      	subs	r0, r0, r6
 80026e2:	4285      	cmp	r5, r0
 80026e4:	6822      	ldr	r2, [r4, #0]
 80026e6:	d2d4      	bcs.n	8002692 <HAL_UART_Transmit+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026e8:	68d3      	ldr	r3, [r2, #12]
 80026ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026ee:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f0:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80026f2:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f4:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 80026f8:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fa:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80026fc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8002700:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8002704:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 8002708:	2003      	movs	r0, #3
}
 800270a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800270e:	f839 3b02 	ldrh.w	r3, [r9], #2
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002716:	e7c6      	b.n	80026a6 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8002718:	2002      	movs	r0, #2
}
 800271a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271e:	6923      	ldr	r3, [r4, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ae      	bne.n	8002682 <HAL_UART_Transmit+0x4a>
 8002724:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8002726:	4698      	mov	r8, r3
 8002728:	e7ab      	b.n	8002682 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	065b      	lsls	r3, r3, #25
 800272e:	d4c8      	bmi.n	80026c2 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002730:	2d00      	cmp	r5, #0
 8002732:	d0d9      	beq.n	80026e8 <HAL_UART_Transmit+0xb0>
 8002734:	f7fd ff62 	bl	80005fc <HAL_GetTick>
 8002738:	1b80      	subs	r0, r0, r6
 800273a:	4285      	cmp	r5, r0
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	d2bb      	bcs.n	80026b8 <HAL_UART_Transmit+0x80>
 8002740:	e7d2      	b.n	80026e8 <HAL_UART_Transmit+0xb0>
 8002742:	6822      	ldr	r2, [r4, #0]
 8002744:	e7b8      	b.n	80026b8 <HAL_UART_Transmit+0x80>
 8002746:	bf00      	nop

08002748 <FSMC_NORSRAM_Init>:
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8002748:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
{ 
 800274c:	b4f0      	push	{r4, r5, r6, r7}
                     Init->MemoryType           |\
                     Init->MemoryDataWidth      |\
 800274e:	e9d1 6503 	ldrd	r6, r5, [r1, #12]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8002752:	4313      	orrs	r3, r2
                     Init->MemoryType           |\
 8002754:	4333      	orrs	r3, r6
                     Init->BurstAccessMode      |\
 8002756:	694c      	ldr	r4, [r1, #20]
                     Init->WrapMode             |\
                     Init->WaitSignalActive     |\
                     Init->WriteOperation       |\
                     Init->WaitSignal           |\
                     Init->ExtendedMode         |\
                     Init->AsynchronousWait     |\
 8002758:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
                     Init->MemoryDataWidth      |\
 800275a:	432b      	orrs	r3, r5
                     Init->WrapMode             |\
 800275c:	e9d1 6506 	ldrd	r6, r5, [r1, #24]
                     Init->BurstAccessMode      |\
 8002760:	4323      	orrs	r3, r4
                     Init->WaitSignalPolarity   |\
 8002762:	4333      	orrs	r3, r6
                     Init->WriteOperation       |\
 8002764:	e9d1 6408 	ldrd	r6, r4, [r1, #32]
                     Init->WrapMode             |\
 8002768:	432b      	orrs	r3, r5
                     Init->WaitSignalActive     |\
 800276a:	4333      	orrs	r3, r6
                     Init->ExtendedMode         |\
 800276c:	e9d1 650a 	ldrd	r6, r5, [r1, #40]	; 0x28
                     Init->WriteOperation       |\
 8002770:	4323      	orrs	r3, r4
 8002772:	680c      	ldr	r4, [r1, #0]
                     Init->WaitSignal           |\
 8002774:	4333      	orrs	r3, r6
                     Init->ExtendedMode         |\
 8002776:	432b      	orrs	r3, r5
                     Init->PageSize             |\
 8002778:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  tmpr = Device->BTCR[Init->NSBank];
 800277a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800277e:	4907      	ldr	r1, [pc, #28]	; (800279c <FSMC_NORSRAM_Init+0x54>)
                     Init->AsynchronousWait     |\
 8002780:	433b      	orrs	r3, r7
                     Init->PageSize             |\
 8002782:	4333      	orrs	r3, r6
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8002784:	4029      	ands	r1, r5
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8002786:	430b      	orrs	r3, r1
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002788:	2a08      	cmp	r2, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800278a:	bf08      	it	eq
 800278c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8002790:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8002794:	2000      	movs	r0, #0
 8002796:	bcf0      	pop	{r4, r5, r6, r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	fff00080 	.word	0xfff00080

080027a0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80027a0:	b470      	push	{r4, r5, r6}
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80027a2:	680b      	ldr	r3, [r1, #0]
 80027a4:	698d      	ldr	r5, [r1, #24]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80027a6:	684c      	ldr	r4, [r1, #4]
                    ((Timing->DataSetupTime) << 8U)            |\
 80027a8:	688e      	ldr	r6, [r1, #8]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80027aa:	432b      	orrs	r3, r5
 80027ac:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80027b0:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 80027b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80027b8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80027bc:	6948      	ldr	r0, [r1, #20]
  tmpr = Device->BTCR[Bank + 1U];
 80027be:	6851      	ldr	r1, [r2, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80027c0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80027c4:	3c01      	subs	r4, #1
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80027c6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80027ca:	3802      	subs	r0, #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80027cc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80027d0:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80027d4:	430b      	orrs	r3, r1
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 80027d6:	2000      	movs	r0, #0
 80027d8:	bc70      	pop	{r4, r5, r6}
  Device->BTCR[Bank + 1] = tmpr; 
 80027da:	6053      	str	r3, [r2, #4]
}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop

080027e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80027e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027e4:	d005      	beq.n	80027f2 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
    
    Device->BWTR[Bank] = tmpr;
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80027e6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80027ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 80027ee:	2000      	movs	r0, #0
 80027f0:	4770      	bx	lr
{
 80027f2:	b470      	push	{r4, r5, r6}
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80027f4:	680b      	ldr	r3, [r1, #0]
 80027f6:	698d      	ldr	r5, [r1, #24]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80027f8:	684c      	ldr	r4, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80027fa:	432b      	orrs	r3, r5
 80027fc:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
 8002800:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8002804:	4906      	ldr	r1, [pc, #24]	; (8002820 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
    tmpr = Device->BWTR[Bank];
 8002806:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800280a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800280e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8002812:	4021      	ands	r1, r4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002814:	430b      	orrs	r3, r1
    Device->BWTR[Bank] = tmpr;
 8002816:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800281a:	bc70      	pop	{r4, r5, r6}
 800281c:	2000      	movs	r0, #0
 800281e:	4770      	bx	lr
 8002820:	cff00000 	.word	0xcff00000

08002824 <WIZCHIP_WRITE>:


void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
#if _USE_W5300_OPTIMIZE
	_W5300_DATA(AddrSel) = wb;
 8002824:	0040      	lsls	r0, r0, #1
 8002826:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 800282a:	8001      	strh	r1, [r0, #0]
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
#endif
}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
   uint16_t ret;
#if _USE_W5300_OPTIMIZE
   ret = _W5300_DATA(AddrSel);
 8002830:	0040      	lsls	r0, r0, #1
 8002832:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8002836:	8800      	ldrh	r0, [r0, #0]
   WIZCHIP.CS._deselect();

   WIZCHIP_CRITICAL_EXIT();
   #endif
   return ret;
}
 8002838:	b280      	uxth	r0, r0
 800283a:	4770      	bx	lr

0800283c <getTMSR>:
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
}
   
uint8_t getTMSR(uint8_t sn)
{
   if(sn & 0x01)
 800283c:	f010 0f01 	tst.w	r0, #1
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8002840:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   ret = _W5300_DATA(AddrSel);
 8002844:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8002848:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 800284c:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8002850:	8800      	ldrh	r0, [r0, #0]
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8002852:	bf14      	ite	ne
 8002854:	b2c0      	uxtbne	r0, r0
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8002856:	f3c0 2007 	ubfxeq	r0, r0, #8, #8
}
 800285a:	4770      	bx	lr

0800285c <getRMSR>:
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
}
   
uint8_t getRMSR(uint8_t sn)
{
   if(sn & 0x01)
 800285c:	f010 0f01 	tst.w	r0, #1
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8002860:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   ret = _W5300_DATA(AddrSel);
 8002864:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8002868:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 800286c:	f100 0050 	add.w	r0, r0, #80	; 0x50
 8002870:	8800      	ldrh	r0, [r0, #0]
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8002872:	bf14      	ite	ne
 8002874:	b2c0      	uxtbne	r0, r0
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8002876:	f3c0 2007 	ubfxeq	r0, r0, #8, #8
}
 800287a:	4770      	bx	lr

0800287c <getSn_TX_FSR>:
{
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 800287c:	3008      	adds	r0, #8
{
 800287e:	b430      	push	{r4, r5}
   ret = _W5300_DATA(AddrSel);
 8002880:	01c5      	lsls	r5, r0, #7
 8002882:	f105 45c8 	add.w	r5, r5, #1677721600	; 0x64000000
 8002886:	462a      	mov	r2, r5
 8002888:	324c      	adds	r2, #76	; 0x4c
 800288a:	3548      	adds	r5, #72	; 0x48
   uint32_t free_tx_size1=1;
 800288c:	2001      	movs	r0, #1
   ret = _W5300_DATA(AddrSel);
 800288e:	882c      	ldrh	r4, [r5, #0]
 8002890:	8813      	ldrh	r3, [r2, #0]
 8002892:	b29b      	uxth	r3, r3
   return ret;
 8002894:	4601      	mov	r1, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8002896:	ea43 4004 	orr.w	r0, r3, r4, lsl #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 800289a:	4281      	cmp	r1, r0
 800289c:	d1f7      	bne.n	800288e <getSn_TX_FSR+0x12>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
   }                                                                       
   return free_tx_size;                                                    
}                                                                          
 800289e:	bc30      	pop	{r4, r5}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 80028a4:	b470      	push	{r4, r5, r6}
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80028a6:	f100 0508 	add.w	r5, r0, #8
   ret = _W5300_DATA(AddrSel);
 80028aa:	01ee      	lsls	r6, r5, #7
 80028ac:	f106 46c8 	add.w	r6, r6, #1677721600	; 0x64000000
 80028b0:	4635      	mov	r5, r6
 80028b2:	3554      	adds	r5, #84	; 0x54
 80028b4:	3650      	adds	r6, #80	; 0x50
   uint32_t received_rx_size1=1;
 80028b6:	2201      	movs	r2, #1
   ret = _W5300_DATA(AddrSel);
 80028b8:	8834      	ldrh	r4, [r6, #0]
 80028ba:	882b      	ldrh	r3, [r5, #0]
 80028bc:	b29b      	uxth	r3, r3
   return ret;
 80028be:	4611      	mov	r1, r2
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80028c0:	ea43 4204 	orr.w	r2, r3, r4, lsl #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
      if(received_rx_size == received_rx_size1) break;                                                                         
 80028c4:	4291      	cmp	r1, r2
 80028c6:	d1f7      	bne.n	80028b8 <getSn_RX_RSR+0x14>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <getSn_RX_RSR+0x34>)
 80028ca:	5c18      	ldrb	r0, [r3, r0]
 80028cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 80028d0:	4410      	add	r0, r2
 80028d2:	bc70      	pop	{r4, r5, r6}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	200000f0 	.word	0x200000f0

080028dc <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint32_t i = 0;
   if(len == 0)  return;
 80028dc:	b18a      	cbz	r2, 8002902 <wiz_send_data+0x26>
   
   for(i = 0; i < len ; i += 2)
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 80028de:	01c0      	lsls	r0, r0, #7
{
 80028e0:	b470      	push	{r4, r5, r6}
	_W5300_DATA(AddrSel) = wb;
 80028e2:	f100 44c8 	add.w	r4, r0, #1677721600	; 0x64000000
 80028e6:	f204 445c 	addw	r4, r4, #1116	; 0x45c
   for(i = 0; i < len ; i += 2)
 80028ea:	2300      	movs	r3, #0
 80028ec:	1c4e      	adds	r6, r1, #1
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 80028ee:	5ccd      	ldrb	r5, [r1, r3]
 80028f0:	5cf0      	ldrb	r0, [r6, r3]
   for(i = 0; i < len ; i += 2)
 80028f2:	3302      	adds	r3, #2
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 80028f4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   for(i = 0; i < len ; i += 2)
 80028f8:	429a      	cmp	r2, r3
	_W5300_DATA(AddrSel) = wb;
 80028fa:	8020      	strh	r0, [r4, #0]
   for(i = 0; i < len ; i += 2)
 80028fc:	d8f7      	bhi.n	80028ee <wiz_send_data+0x12>
}
 80028fe:	bc70      	pop	{r4, r5, r6}
 8002900:	4770      	bx	lr
 8002902:	4770      	bx	lr

08002904 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
 8002904:	b1d2      	cbz	r2, 800293c <wiz_recv_data+0x38>
{
 8002906:	b470      	push	{r4, r5, r6}
      
   for(i = 0; i < len; i++)
   {
      if((i & 0x01)==0)
      {
         rd = getSn_RX_FIFOR(sn);
 8002908:	01c5      	lsls	r5, r0, #7
   ret = _W5300_DATA(AddrSel);
 800290a:	f105 45c8 	add.w	r5, r5, #1677721600	; 0x64000000
   for(i = 0; i < len; i++)
 800290e:	2300      	movs	r3, #0
   ret = _W5300_DATA(AddrSel);
 8002910:	f505 658c 	add.w	r5, r5, #1120	; 0x460
   uint16_t rd = 0;
 8002914:	461c      	mov	r4, r3
 8002916:	e007      	b.n	8002928 <wiz_recv_data+0x24>
   ret = _W5300_DATA(AddrSel);
 8002918:	882c      	ldrh	r4, [r5, #0]
         wizdata[i]   = (uint8_t)(rd >> 8);
 800291a:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800291e:	54ce      	strb	r6, [r1, r3]
   for(i = 0; i < len; i++)
 8002920:	3301      	adds	r3, #1
 8002922:	429a      	cmp	r2, r3
   ret = _W5300_DATA(AddrSel);
 8002924:	b2a4      	uxth	r4, r4
   for(i = 0; i < len; i++)
 8002926:	d005      	beq.n	8002934 <wiz_recv_data+0x30>
      if((i & 0x01)==0)
 8002928:	07de      	lsls	r6, r3, #31
 800292a:	d5f5      	bpl.n	8002918 <wiz_recv_data+0x14>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 800292c:	54cc      	strb	r4, [r1, r3]
   for(i = 0; i < len; i++)
 800292e:	3301      	adds	r3, #1
 8002930:	429a      	cmp	r2, r3
 8002932:	d1f9      	bne.n	8002928 <wiz_recv_data+0x24>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <wiz_recv_data+0x3c>)
 8002936:	541c      	strb	r4, [r3, r0]
}
 8002938:	bc70      	pop	{r4, r5, r6}
 800293a:	4770      	bx	lr
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	200000f8 	.word	0x200000f8

08002944 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002948:	b083      	sub	sp, #12
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 800294a:	2808      	cmp	r0, #8
{
 800294c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   CHECK_SOCKNUM();
 8002950:	f200 812d 	bhi.w	8002bae <sendto+0x26a>
   switch(getSn_MR(sn) & 0x0F)
 8002954:	f100 0708 	add.w	r7, r0, #8
 8002958:	01bf      	lsls	r7, r7, #6
 800295a:	4606      	mov	r6, r0
 800295c:	4638      	mov	r0, r7
 800295e:	468b      	mov	fp, r1
 8002960:	4615      	mov	r5, r2
 8002962:	461c      	mov	r4, r3
 8002964:	f7ff ff64 	bl	8002830 <WIZCHIP_READ>
 8002968:	f000 000f 	and.w	r0, r0, #15
 800296c:	3802      	subs	r0, #2
 800296e:	2802      	cmp	r0, #2
 8002970:	f200 8120 	bhi.w	8002bb4 <sendto+0x270>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8002974:	2d00      	cmp	r5, #0
 8002976:	f000 8120 	beq.w	8002bba <sendto+0x276>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800297a:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800297c:	7861      	ldrb	r1, [r4, #1]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800297e:	78a2      	ldrb	r2, [r4, #2]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002980:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002984:	78e3      	ldrb	r3, [r4, #3]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002986:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800298a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800298e:	9301      	str	r3, [sp, #4]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80ac 	beq.w	8002aee <sendto+0x1aa>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002996:	f1b8 0f00 	cmp.w	r8, #0
 800299a:	f000 809f 	beq.w	8002adc <sendto+0x198>
   tmp = getSn_SR(sn);
 800299e:	f107 0908 	add.w	r9, r7, #8
 80029a2:	4648      	mov	r0, r9
 80029a4:	f7ff ff44 	bl	8002830 <WIZCHIP_READ>
 80029a8:	b2c0      	uxtb	r0, r0
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80029aa:	2842      	cmp	r0, #66	; 0x42
 80029ac:	d008      	beq.n	80029c0 <sendto+0x7c>
 80029ae:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 80029b2:	2822      	cmp	r0, #34	; 0x22
 80029b4:	d004      	beq.n	80029c0 <sendto+0x7c>
 80029b6:	f06f 0006 	mvn.w	r0, #6
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 80029ba:	b003      	add	sp, #12
 80029bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   setSn_DIPR(sn,addr);
 80029c0:	7823      	ldrb	r3, [r4, #0]
 80029c2:	7861      	ldrb	r1, [r4, #1]
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80029c4:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8002bc0 <sendto+0x27c>
   setSn_DIPR(sn,addr);
 80029c8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80029cc:	b289      	uxth	r1, r1
 80029ce:	f107 0014 	add.w	r0, r7, #20
 80029d2:	f7ff ff27 	bl	8002824 <WIZCHIP_WRITE>
 80029d6:	78a3      	ldrb	r3, [r4, #2]
 80029d8:	78e1      	ldrb	r1, [r4, #3]
 80029da:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80029de:	b289      	uxth	r1, r1
 80029e0:	f107 0016 	add.w	r0, r7, #22
 80029e4:	f7ff ff1e 	bl	8002824 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 80029e8:	4641      	mov	r1, r8
 80029ea:	f107 0012 	add.w	r0, r7, #18
 80029ee:	f7ff ff19 	bl	8002824 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80029f2:	4630      	mov	r0, r6
 80029f4:	f7ff ff22 	bl	800283c <getTMSR>
 80029f8:	0280      	lsls	r0, r0, #10
 80029fa:	b280      	uxth	r0, r0
 80029fc:	f04f 0801 	mov.w	r8, #1
 8002a00:	4285      	cmp	r5, r0
 8002a02:	bf28      	it	cs
 8002a04:	4605      	movcs	r5, r0
 8002a06:	fa08 f806 	lsl.w	r8, r8, r6
      freesize = getSn_TX_FSR(sn);
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f7ff ff36 	bl	800287c <getSn_TX_FSR>
 8002a10:	4604      	mov	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002a12:	4648      	mov	r0, r9
 8002a14:	f7ff ff0c 	bl	8002830 <WIZCHIP_READ>
 8002a18:	f010 0fff 	tst.w	r0, #255	; 0xff
      freesize = getSn_TX_FSR(sn);
 8002a1c:	b2a4      	uxth	r4, r4
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002a1e:	d06f      	beq.n	8002b00 <sendto+0x1bc>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002a20:	f8ba 3000 	ldrh.w	r3, [sl]
 8002a24:	ea13 0f08 	tst.w	r3, r8
 8002a28:	d055      	beq.n	8002ad6 <sendto+0x192>
 8002a2a:	42a5      	cmp	r5, r4
 8002a2c:	f200 80a0 	bhi.w	8002b70 <sendto+0x22c>
	wiz_send_data(sn, buf, len);
 8002a30:	4659      	mov	r1, fp
 8002a32:	462a      	mov	r2, r5
 8002a34:	4630      	mov	r0, r6
 8002a36:	f7ff ff51 	bl	80028dc <wiz_send_data>
      getSIPR((uint8_t*)&taddr);
 8002a3a:	2018      	movs	r0, #24
 8002a3c:	f7ff fef8 	bl	8002830 <WIZCHIP_READ>
 8002a40:	0a03      	lsrs	r3, r0, #8
 8002a42:	2018      	movs	r0, #24
 8002a44:	f88d 3004 	strb.w	r3, [sp, #4]
 8002a48:	f7ff fef2 	bl	8002830 <WIZCHIP_READ>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	201a      	movs	r0, #26
 8002a50:	f88d 3005 	strb.w	r3, [sp, #5]
 8002a54:	f7ff feec 	bl	8002830 <WIZCHIP_READ>
 8002a58:	0a03      	lsrs	r3, r0, #8
 8002a5a:	201a      	movs	r0, #26
 8002a5c:	f88d 3006 	strb.w	r3, [sp, #6]
 8002a60:	f7ff fee6 	bl	8002830 <WIZCHIP_READ>
 8002a64:	f88d 0007 	strb.w	r0, [sp, #7]
      if(taddr == 0)
 8002a68:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002a6c:	f1ba 0f00 	cmp.w	sl, #0
 8002a70:	d04b      	beq.n	8002b0a <sendto+0x1c6>
      else taddr = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	461c      	mov	r4, r3
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	4698      	mov	r8, r3
 8002a7a:	461e      	mov	r6, r3
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	469a      	mov	sl, r3
   setSn_TX_WRSR(sn, len);
 8002a80:	2100      	movs	r1, #0
 8002a82:	f107 0020 	add.w	r0, r7, #32
 8002a86:	f7ff fecd 	bl	8002824 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_SEND);
 8002a8a:	f107 0b02 	add.w	fp, r7, #2
   setSn_TX_WRSR(sn, len);
 8002a8e:	4629      	mov	r1, r5
 8002a90:	f107 0022 	add.w	r0, r7, #34	; 0x22
 8002a94:	f7ff fec6 	bl	8002824 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_SEND);
 8002a98:	4658      	mov	r0, fp
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	f7ff fec2 	bl	8002824 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002aa0:	4658      	mov	r0, fp
 8002aa2:	f7ff fec5 	bl	8002830 <WIZCHIP_READ>
 8002aa6:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002aaa:	d1f9      	bne.n	8002aa0 <sendto+0x15c>
 8002aac:	3706      	adds	r7, #6
 8002aae:	e001      	b.n	8002ab4 <sendto+0x170>
      else if(tmp & Sn_IR_TIMEOUT)
 8002ab0:	071b      	lsls	r3, r3, #28
 8002ab2:	d461      	bmi.n	8002b78 <sendto+0x234>
      tmp = getSn_IR(sn);
 8002ab4:	4638      	mov	r0, r7
 8002ab6:	f7ff febb 	bl	8002830 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8002aba:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(sn);
 8002abc:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 8002abe:	d5f7      	bpl.n	8002ab0 <sendto+0x16c>
         setSn_IR(sn, Sn_IR_SENDOK);
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	2110      	movs	r1, #16
 8002ac4:	f7ff feae 	bl	8002824 <WIZCHIP_WRITE>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8002ac8:	f1ba 0f00 	cmp.w	sl, #0
 8002acc:	d142      	bne.n	8002b54 <sendto+0x210>
   return (int32_t)len;
 8002ace:	4628      	mov	r0, r5
}
 8002ad0:	b003      	add	sp, #12
 8002ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8002ad6:	42a5      	cmp	r5, r4
 8002ad8:	d897      	bhi.n	8002a0a <sendto+0xc6>
 8002ada:	e7a9      	b.n	8002a30 <sendto+0xec>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002adc:	4638      	mov	r0, r7
 8002ade:	f7ff fea7 	bl	8002830 <WIZCHIP_READ>
 8002ae2:	0741      	lsls	r1, r0, #29
 8002ae4:	f53f af5b 	bmi.w	800299e <sendto+0x5a>
 8002ae8:	f06f 000a 	mvn.w	r0, #10
 8002aec:	e765      	b.n	80029ba <sendto+0x76>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002aee:	4638      	mov	r0, r7
 8002af0:	f7ff fe9e 	bl	8002830 <WIZCHIP_READ>
 8002af4:	0740      	lsls	r0, r0, #29
 8002af6:	f53f af4e 	bmi.w	8002996 <sendto+0x52>
 8002afa:	f06f 000b 	mvn.w	r0, #11
 8002afe:	e75c      	b.n	80029ba <sendto+0x76>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002b00:	f06f 0003 	mvn.w	r0, #3
}
 8002b04:	b003      	add	sp, #12
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         getSUBR((uint8_t*)&taddr);
 8002b0a:	2014      	movs	r0, #20
 8002b0c:	f7ff fe90 	bl	8002830 <WIZCHIP_READ>
 8002b10:	f3c0 290f 	ubfx	r9, r0, #8, #16
 8002b14:	2014      	movs	r0, #20
 8002b16:	f88d 9004 	strb.w	r9, [sp, #4]
 8002b1a:	f7ff fe89 	bl	8002830 <WIZCHIP_READ>
 8002b1e:	b2c6      	uxtb	r6, r0
 8002b20:	2016      	movs	r0, #22
 8002b22:	f88d 6005 	strb.w	r6, [sp, #5]
 8002b26:	f7ff fe83 	bl	8002830 <WIZCHIP_READ>
 8002b2a:	f3c0 280f 	ubfx	r8, r0, #8, #16
 8002b2e:	2016      	movs	r0, #22
 8002b30:	f88d 8006 	strb.w	r8, [sp, #6]
 8002b34:	f7ff fe7c 	bl	8002830 <WIZCHIP_READ>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8002b38:	4651      	mov	r1, sl
         getSUBR((uint8_t*)&taddr);
 8002b3a:	b2c4      	uxtb	r4, r0
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8002b3c:	2014      	movs	r0, #20
         getSUBR((uint8_t*)&taddr);
 8002b3e:	f88d 4007 	strb.w	r4, [sp, #7]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8002b42:	f7ff fe6f 	bl	8002824 <WIZCHIP_WRITE>
 8002b46:	4651      	mov	r1, sl
 8002b48:	2016      	movs	r0, #22
 8002b4a:	f7ff fe6b 	bl	8002824 <WIZCHIP_WRITE>
 8002b4e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002b52:	e795      	b.n	8002a80 <sendto+0x13c>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8002b54:	eb06 2109 	add.w	r1, r6, r9, lsl #8
 8002b58:	b289      	uxth	r1, r1
 8002b5a:	2014      	movs	r0, #20
 8002b5c:	f7ff fe62 	bl	8002824 <WIZCHIP_WRITE>
 8002b60:	eb04 2108 	add.w	r1, r4, r8, lsl #8
 8002b64:	2016      	movs	r0, #22
 8002b66:	b289      	uxth	r1, r1
 8002b68:	f7ff fe5c 	bl	8002824 <WIZCHIP_WRITE>
   return (int32_t)len;
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	e7af      	b.n	8002ad0 <sendto+0x18c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002b70:	2000      	movs	r0, #0
}
 8002b72:	b003      	add	sp, #12
 8002b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8002b78:	4638      	mov	r0, r7
 8002b7a:	2108      	movs	r1, #8
 8002b7c:	f7ff fe52 	bl	8002824 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8002b80:	f1ba 0f00 	cmp.w	sl, #0
 8002b84:	d104      	bne.n	8002b90 <sendto+0x24c>
         return SOCKERR_TIMEOUT;
 8002b86:	f06f 000c 	mvn.w	r0, #12
}
 8002b8a:	b003      	add	sp, #12
 8002b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(taddr) setSUBR((uint8_t*)&taddr);
 8002b90:	eb06 2109 	add.w	r1, r6, r9, lsl #8
 8002b94:	b289      	uxth	r1, r1
 8002b96:	2014      	movs	r0, #20
 8002b98:	f7ff fe44 	bl	8002824 <WIZCHIP_WRITE>
 8002b9c:	eb04 2108 	add.w	r1, r4, r8, lsl #8
 8002ba0:	2016      	movs	r0, #22
 8002ba2:	b289      	uxth	r1, r1
 8002ba4:	f7ff fe3e 	bl	8002824 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002ba8:	f06f 000c 	mvn.w	r0, #12
 8002bac:	e705      	b.n	80029ba <sendto+0x76>
   CHECK_SOCKNUM();
 8002bae:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb2:	e702      	b.n	80029ba <sendto+0x76>
         return SOCKERR_SOCKMODE;
 8002bb4:	f06f 0004 	mvn.w	r0, #4
 8002bb8:	e6ff      	b.n	80029ba <sendto+0x76>
   CHECK_SOCKDATA();
 8002bba:	f06f 000d 	mvn.w	r0, #13
 8002bbe:	e6fc      	b.n	80029ba <sendto+0x76>
 8002bc0:	200000ec 	.word	0x200000ec

08002bc4 <close.part.0>:
int8_t close(uint8_t sn)
 8002bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8002bc8:	f100 0808 	add.w	r8, r0, #8
 8002bcc:	ea4f 1888 	mov.w	r8, r8, lsl #6
int8_t close(uint8_t sn)
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	4607      	mov	r7, r0
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8002bd4:	4640      	mov	r0, r8
 8002bd6:	f7ff fe2b 	bl	8002830 <WIZCHIP_READ>
 8002bda:	f000 040f 	and.w	r4, r0, #15
 8002bde:	2c01      	cmp	r4, #1
 8002be0:	d02f      	beq.n	8002c42 <close.part.0+0x7e>
 8002be2:	f108 0502 	add.w	r5, r8, #2
 8002be6:	f108 0608 	add.w	r6, r8, #8
	setSn_CR(sn,Sn_CR_CLOSE);
 8002bea:	2110      	movs	r1, #16
 8002bec:	4628      	mov	r0, r5
 8002bee:	f7ff fe19 	bl	8002824 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	f7ff fe1c 	bl	8002830 <WIZCHIP_READ>
 8002bf8:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8002bfc:	d1f9      	bne.n	8002bf2 <close.part.0+0x2e>
	setSn_IR(sn, 0xFF);
 8002bfe:	f108 0006 	add.w	r0, r8, #6
 8002c02:	21ff      	movs	r1, #255	; 0xff
 8002c04:	f7ff fe0e 	bl	8002824 <WIZCHIP_WRITE>
	sock_remained_size[sn] = 0;
 8002c08:	4d28      	ldr	r5, [pc, #160]	; (8002cac <close.part.0+0xe8>)
	sock_io_mode &= ~(1<<sn);
 8002c0a:	4829      	ldr	r0, [pc, #164]	; (8002cb0 <close.part.0+0xec>)
	sock_is_sending &= ~(1<<sn);
 8002c0c:	4929      	ldr	r1, [pc, #164]	; (8002cb4 <close.part.0+0xf0>)
	sock_io_mode &= ~(1<<sn);
 8002c0e:	8802      	ldrh	r2, [r0, #0]
	sock_is_sending &= ~(1<<sn);
 8002c10:	f8b1 c000 	ldrh.w	ip, [r1]
	sock_remained_size[sn] = 0;
 8002c14:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
	sock_io_mode &= ~(1<<sn);
 8002c18:	2301      	movs	r3, #1
 8002c1a:	40bb      	lsls	r3, r7
	sock_pack_info[sn] = 0;
 8002c1c:	4d26      	ldr	r5, [pc, #152]	; (8002cb8 <close.part.0+0xf4>)
	sock_io_mode &= ~(1<<sn);
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	401a      	ands	r2, r3
	sock_pack_info[sn] = 0;
 8002c24:	55ec      	strb	r4, [r5, r7]
	sock_is_sending &= ~(1<<sn);
 8002c26:	ea03 030c 	and.w	r3, r3, ip
	sock_io_mode &= ~(1<<sn);
 8002c2a:	8002      	strh	r2, [r0, #0]
	sock_is_sending &= ~(1<<sn);
 8002c2c:	800b      	strh	r3, [r1, #0]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002c2e:	4630      	mov	r0, r6
 8002c30:	f7ff fdfe 	bl	8002830 <WIZCHIP_READ>
 8002c34:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002c38:	d1f9      	bne.n	8002c2e <close.part.0+0x6a>
}
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	b004      	add	sp, #16
 8002c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8002c42:	4638      	mov	r0, r7
 8002c44:	f7ff fe1a 	bl	800287c <getSn_TX_FSR>
 8002c48:	4605      	mov	r5, r0
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	f7ff fdf6 	bl	800283c <getTMSR>
 8002c50:	ebb5 2f80 	cmp.w	r5, r0, lsl #10
 8002c54:	d0c5      	beq.n	8002be2 <close.part.0+0x1e>
      uint8_t destip[4] = {0, 0, 0, 1};
 8002c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      setSn_MR(sn,Sn_MR_UDP);
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4640      	mov	r0, r8
      uint8_t destip[4] = {0, 0, 0, 1};
 8002c5e:	9303      	str	r3, [sp, #12]
      setSn_CR(sn,Sn_CR_OPEN);
 8002c60:	f108 0502 	add.w	r5, r8, #2
      setSn_MR(sn,Sn_MR_UDP);
 8002c64:	f7ff fdde 	bl	8002824 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8002c68:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002c6c:	f108 000a 	add.w	r0, r8, #10
 8002c70:	f7ff fdd8 	bl	8002824 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8002c74:	4621      	mov	r1, r4
 8002c76:	4628      	mov	r0, r5
 8002c78:	f7ff fdd4 	bl	8002824 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	f7ff fdd7 	bl	8002830 <WIZCHIP_READ>
 8002c82:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002c86:	d1f9      	bne.n	8002c7c <close.part.0+0xb8>
 8002c88:	f108 0608 	add.w	r6, r8, #8
      while(getSn_SR(sn) != SOCK_UDP);
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f7ff fdcf 	bl	8002830 <WIZCHIP_READ>
 8002c92:	b2c0      	uxtb	r0, r0
 8002c94:	2822      	cmp	r0, #34	; 0x22
 8002c96:	d1f9      	bne.n	8002c8c <close.part.0+0xc8>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8002c98:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002c9c:	ab03      	add	r3, sp, #12
 8002c9e:	9200      	str	r2, [sp, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4638      	mov	r0, r7
 8002ca6:	f7ff fe4d 	bl	8002944 <sendto>
 8002caa:	e79e      	b.n	8002bea <close.part.0+0x26>
 8002cac:	20000100 	.word	0x20000100
 8002cb0:	200000ec 	.word	0x200000ec
 8002cb4:	200000ee 	.word	0x200000ee
 8002cb8:	200000f0 	.word	0x200000f0

08002cbc <socket>:
	CHECK_SOCKNUM();
 8002cbc:	2808      	cmp	r0, #8
 8002cbe:	f200 8097 	bhi.w	8002df0 <socket+0x134>
{
 8002cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(protocol)
 8002cc6:	2901      	cmp	r1, #1
{
 8002cc8:	b082      	sub	sp, #8
 8002cca:	4605      	mov	r5, r0
 8002ccc:	460f      	mov	r7, r1
 8002cce:	4690      	mov	r8, r2
 8002cd0:	461e      	mov	r6, r3
	switch(protocol)
 8002cd2:	d065      	beq.n	8002da0 <socket+0xe4>
 8002cd4:	1e8b      	subs	r3, r1, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d87f      	bhi.n	8002dda <socket+0x11e>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002cda:	0771      	lsls	r1, r6, #29
 8002cdc:	f100 8085 	bmi.w	8002dea <socket+0x12e>
	if(flag != 0)
 8002ce0:	b13e      	cbz	r6, 8002cf2 <socket+0x36>
   	switch(protocol)
 8002ce2:	2f01      	cmp	r7, #1
 8002ce4:	d07e      	beq.n	8002de4 <socket+0x128>
 8002ce6:	2f02      	cmp	r7, #2
 8002ce8:	d103      	bne.n	8002cf2 <socket+0x36>
   	      if(flag & SF_IGMP_VER2)
 8002cea:	06b2      	lsls	r2, r6, #26
 8002cec:	d501      	bpl.n	8002cf2 <socket+0x36>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002cee:	0633      	lsls	r3, r6, #24
 8002cf0:	d57b      	bpl.n	8002dea <socket+0x12e>
	CHECK_SOCKNUM();
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f7ff ff66 	bl	8002bc4 <close.part.0>
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8002cf8:	f105 0408 	add.w	r4, r5, #8
 8002cfc:	f026 030f 	bic.w	r3, r6, #15
 8002d00:	01f1      	lsls	r1, r6, #7
 8002d02:	01a4      	lsls	r4, r4, #6
 8002d04:	431f      	orrs	r7, r3
 8002d06:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4339      	orrs	r1, r7
 8002d0e:	f7ff fd89 	bl	8002824 <WIZCHIP_WRITE>
	if(!port)
 8002d12:	f1b8 0f00 	cmp.w	r8, #0
 8002d16:	d032      	beq.n	8002d7e <socket+0xc2>
   setSn_PORT(sn,port);	
 8002d18:	4641      	mov	r1, r8
 8002d1a:	f104 000a 	add.w	r0, r4, #10
   setSn_CR(sn,Sn_CR_OPEN);
 8002d1e:	1ca7      	adds	r7, r4, #2
   setSn_PORT(sn,port);	
 8002d20:	f7ff fd80 	bl	8002824 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002d24:	4638      	mov	r0, r7
 8002d26:	2101      	movs	r1, #1
 8002d28:	f7ff fd7c 	bl	8002824 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	f7ff fd7f 	bl	8002830 <WIZCHIP_READ>
 8002d32:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8002d36:	d1f9      	bne.n	8002d2c <socket+0x70>
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002d38:	4f2f      	ldr	r7, [pc, #188]	; (8002df8 <socket+0x13c>)
   sock_is_sending &= ~(1<<sn);
 8002d3a:	4930      	ldr	r1, [pc, #192]	; (8002dfc <socket+0x140>)
   sock_io_mode &= ~(1 <<sn);
 8002d3c:	8838      	ldrh	r0, [r7, #0]
   sock_is_sending &= ~(1<<sn);
 8002d3e:	f8b1 c000 	ldrh.w	ip, [r1]
   sock_remained_size[sn] = 0;
 8002d42:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 8002e08 <socket+0x14c>
   sock_io_mode &= ~(1 <<sn);
 8002d46:	2301      	movs	r3, #1
 8002d48:	40ab      	lsls	r3, r5
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002d4e:	f006 0601 	and.w	r6, r6, #1
   sock_io_mode &= ~(1 <<sn);
 8002d52:	4018      	ands	r0, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002d54:	40ae      	lsls	r6, r5
 8002d56:	4306      	orrs	r6, r0
   sock_pack_info[sn] = PACK_COMPLETED;
 8002d58:	4829      	ldr	r0, [pc, #164]	; (8002e00 <socket+0x144>)
   sock_remained_size[sn] = 0;
 8002d5a:	f82e 2015 	strh.w	r2, [lr, r5, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8002d5e:	ea03 030c 	and.w	r3, r3, ip
   sock_pack_info[sn] = PACK_COMPLETED;
 8002d62:	5542      	strb	r2, [r0, r5]
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002d64:	803e      	strh	r6, [r7, #0]
   sock_is_sending &= ~(1<<sn);
 8002d66:	3408      	adds	r4, #8
 8002d68:	800b      	strh	r3, [r1, #0]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7ff fd60 	bl	8002830 <WIZCHIP_READ>
 8002d70:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002d74:	d0f9      	beq.n	8002d6a <socket+0xae>
   return (int8_t)sn;
 8002d76:	b268      	sxtb	r0, r5
}	   
 8002d78:	b002      	add	sp, #8
 8002d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   port = sock_any_port++;
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <socket+0x148>)
 8002d80:	f8b2 8000 	ldrh.w	r8, [r2]
 8002d84:	f108 0301 	add.w	r3, r8, #1
 8002d88:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d8a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8002d8e:	428b      	cmp	r3, r1
 8002d90:	bf09      	itett	eq
 8002d92:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 8002d96:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d98:	8013      	strheq	r3, [r2, #0]
	   port = sock_any_port++;
 8002d9a:	f64f 78ef 	movweq	r8, #65519	; 0xffef
 8002d9e:	e7bb      	b.n	8002d18 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8002da0:	2018      	movs	r0, #24
 8002da2:	f7ff fd45 	bl	8002830 <WIZCHIP_READ>
 8002da6:	0a03      	lsrs	r3, r0, #8
 8002da8:	2018      	movs	r0, #24
 8002daa:	f88d 3004 	strb.w	r3, [sp, #4]
 8002dae:	f7ff fd3f 	bl	8002830 <WIZCHIP_READ>
 8002db2:	4603      	mov	r3, r0
 8002db4:	201a      	movs	r0, #26
 8002db6:	f88d 3005 	strb.w	r3, [sp, #5]
 8002dba:	f7ff fd39 	bl	8002830 <WIZCHIP_READ>
 8002dbe:	0a03      	lsrs	r3, r0, #8
 8002dc0:	201a      	movs	r0, #26
 8002dc2:	f88d 3006 	strb.w	r3, [sp, #6]
 8002dc6:	f7ff fd33 	bl	8002830 <WIZCHIP_READ>
 8002dca:	f88d 0007 	strb.w	r0, [sp, #7]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002dce:	9b01      	ldr	r3, [sp, #4]
 8002dd0:	f06f 0002 	mvn.w	r0, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d180      	bne.n	8002cda <socket+0x1e>
 8002dd8:	e7ce      	b.n	8002d78 <socket+0xbc>
	switch(protocol)
 8002dda:	f06f 0004 	mvn.w	r0, #4
}	   
 8002dde:	b002      	add	sp, #8
 8002de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8002de4:	f016 0f23 	tst.w	r6, #35	; 0x23
 8002de8:	d183      	bne.n	8002cf2 <socket+0x36>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002dea:	f06f 0005 	mvn.w	r0, #5
 8002dee:	e7c3      	b.n	8002d78 <socket+0xbc>
	CHECK_SOCKNUM();
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
}	   
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	200000ec 	.word	0x200000ec
 8002dfc:	200000ee 	.word	0x200000ee
 8002e00:	200000f0 	.word	0x200000f0
 8002e04:	20000008 	.word	0x20000008
 8002e08:	20000100 	.word	0x20000100

08002e0c <listen>:
	CHECK_SOCKNUM();
 8002e0c:	2808      	cmp	r0, #8
 8002e0e:	d82c      	bhi.n	8002e6a <listen+0x5e>
{
 8002e10:	b570      	push	{r4, r5, r6, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e12:	f100 0408 	add.w	r4, r0, #8
 8002e16:	01a4      	lsls	r4, r4, #6
 8002e18:	4605      	mov	r5, r0
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff fd08 	bl	8002830 <WIZCHIP_READ>
 8002e20:	f000 000f 	and.w	r0, r0, #15
 8002e24:	2801      	cmp	r0, #1
 8002e26:	d11a      	bne.n	8002e5e <listen+0x52>
	CHECK_SOCKINIT();
 8002e28:	f104 0608 	add.w	r6, r4, #8
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	f7ff fcff 	bl	8002830 <WIZCHIP_READ>
 8002e32:	b2c0      	uxtb	r0, r0
 8002e34:	2813      	cmp	r0, #19
 8002e36:	d115      	bne.n	8002e64 <listen+0x58>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002e38:	3402      	adds	r4, #2
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	f7ff fcf1 	bl	8002824 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff fcf4 	bl	8002830 <WIZCHIP_READ>
 8002e48:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002e4c:	d1f9      	bne.n	8002e42 <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f7ff fcee 	bl	8002830 <WIZCHIP_READ>
 8002e54:	b2c0      	uxtb	r0, r0
 8002e56:	2814      	cmp	r0, #20
 8002e58:	d10a      	bne.n	8002e70 <listen+0x64>
   return SOCK_OK;
 8002e5a:	2001      	movs	r0, #1
}
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e5e:	f06f 0004 	mvn.w	r0, #4
}
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKINIT();
 8002e64:	f06f 0002 	mvn.w	r0, #2
}
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8002e6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e6e:	4770      	bx	lr
	CHECK_SOCKNUM();
 8002e70:	4628      	mov	r0, r5
 8002e72:	f7ff fea7 	bl	8002bc4 <close.part.0>
         return SOCKERR_SOCKCLOSED;
 8002e76:	f06f 0003 	mvn.w	r0, #3
}
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}

08002e7c <disconnect>:
   CHECK_SOCKNUM();
 8002e7c:	2808      	cmp	r0, #8
 8002e7e:	d83d      	bhi.n	8002efc <disconnect+0x80>
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e82:	f100 0408 	add.w	r4, r0, #8
 8002e86:	01a4      	lsls	r4, r4, #6
 8002e88:	4606      	mov	r6, r0
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff fcd0 	bl	8002830 <WIZCHIP_READ>
 8002e90:	f000 000f 	and.w	r0, r0, #15
 8002e94:	2801      	cmp	r0, #1
 8002e96:	d12e      	bne.n	8002ef6 <disconnect+0x7a>
	setSn_CR(sn,Sn_CR_DISCON);
 8002e98:	1ca5      	adds	r5, r4, #2
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	2108      	movs	r1, #8
 8002e9e:	f7ff fcc1 	bl	8002824 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	f7ff fcc4 	bl	8002830 <WIZCHIP_READ>
 8002ea8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8002eac:	d1f9      	bne.n	8002ea2 <disconnect+0x26>
	sock_is_sending &= ~(1<<sn);
 8002eae:	4d15      	ldr	r5, [pc, #84]	; (8002f04 <disconnect+0x88>)
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <disconnect+0x8c>)
	sock_is_sending &= ~(1<<sn);
 8002eb2:	882a      	ldrh	r2, [r5, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002eb4:	881b      	ldrh	r3, [r3, #0]
	sock_is_sending &= ~(1<<sn);
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	40b1      	lsls	r1, r6
 8002eba:	ea22 0201 	bic.w	r2, r2, r1
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002ebe:	4133      	asrs	r3, r6
	sock_is_sending &= ~(1<<sn);
 8002ec0:	802a      	strh	r2, [r5, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002ec2:	07da      	lsls	r2, r3, #31
 8002ec4:	d410      	bmi.n	8002ee8 <disconnect+0x6c>
 8002ec6:	f104 0508 	add.w	r5, r4, #8
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002eca:	3406      	adds	r4, #6
 8002ecc:	e003      	b.n	8002ed6 <disconnect+0x5a>
 8002ece:	f7ff fcaf 	bl	8002830 <WIZCHIP_READ>
 8002ed2:	0703      	lsls	r3, r0, #28
 8002ed4:	d409      	bmi.n	8002eea <disconnect+0x6e>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f7ff fcaa 	bl	8002830 <WIZCHIP_READ>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f013 0fff 	tst.w	r3, #255	; 0xff
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002ee2:	4620      	mov	r0, r4
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002ee4:	d1f3      	bne.n	8002ece <disconnect+0x52>
	return SOCK_OK;
 8002ee6:	2001      	movs	r0, #1
}
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8002eea:	4630      	mov	r0, r6
 8002eec:	f7ff fe6a 	bl	8002bc4 <close.part.0>
	      return SOCKERR_TIMEOUT;
 8002ef0:	f06f 000c 	mvn.w	r0, #12
}
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002ef6:	f06f 0004 	mvn.w	r0, #4
}
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	200000ee 	.word	0x200000ee
 8002f08:	200000ec 	.word	0x200000ec

08002f0c <send>:
{
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	b083      	sub	sp, #12
   CHECK_SOCKNUM();
 8002f12:	2808      	cmp	r0, #8
{
 8002f14:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8002f16:	f200 808b 	bhi.w	8003030 <send+0x124>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f1a:	f100 0808 	add.w	r8, r0, #8
 8002f1e:	ea4f 1888 	mov.w	r8, r8, lsl #6
 8002f22:	4605      	mov	r5, r0
 8002f24:	4640      	mov	r0, r8
 8002f26:	4614      	mov	r4, r2
 8002f28:	f7ff fc82 	bl	8002830 <WIZCHIP_READ>
 8002f2c:	f000 000f 	and.w	r0, r0, #15
 8002f30:	2801      	cmp	r0, #1
 8002f32:	f040 8083 	bne.w	800303c <send+0x130>
   CHECK_SOCKDATA();
 8002f36:	2c00      	cmp	r4, #0
 8002f38:	d07d      	beq.n	8003036 <send+0x12a>
   tmp = getSn_SR(sn);
 8002f3a:	f108 0708 	add.w	r7, r8, #8
 8002f3e:	4638      	mov	r0, r7
 8002f40:	f7ff fc76 	bl	8002830 <WIZCHIP_READ>
 8002f44:	b2c0      	uxtb	r0, r0
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002f46:	2817      	cmp	r0, #23
 8002f48:	d001      	beq.n	8002f4e <send+0x42>
 8002f4a:	281c      	cmp	r0, #28
 8002f4c:	d179      	bne.n	8003042 <send+0x136>
   if( sock_is_sending & (1<<sn) )
 8002f4e:	f8df b104 	ldr.w	fp, [pc, #260]	; 8003054 <send+0x148>
 8002f52:	f8bb 3000 	ldrh.w	r3, [fp]
 8002f56:	412b      	asrs	r3, r5
 8002f58:	07d9      	lsls	r1, r3, #31
 8002f5a:	d443      	bmi.n	8002fe4 <send+0xd8>
 8002f5c:	2601      	movs	r6, #1
 8002f5e:	40ae      	lsls	r6, r5
   freesize = getSn_TxMAX(sn);
 8002f60:	4628      	mov	r0, r5
 8002f62:	f7ff fc6b 	bl	800283c <getTMSR>
 8002f66:	0280      	lsls	r0, r0, #10
 8002f68:	b280      	uxth	r0, r0
 8002f6a:	4284      	cmp	r4, r0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002f6c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8003058 <send+0x14c>
 8002f70:	bf28      	it	cs
 8002f72:	4604      	movcs	r4, r0
      freesize = getSn_TX_FSR(sn);
 8002f74:	4628      	mov	r0, r5
 8002f76:	f7ff fc81 	bl	800287c <getSn_TX_FSR>
 8002f7a:	4682      	mov	sl, r0
      tmp = getSn_SR(sn);
 8002f7c:	4638      	mov	r0, r7
 8002f7e:	f7ff fc57 	bl	8002830 <WIZCHIP_READ>
 8002f82:	b2c3      	uxtb	r3, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002f84:	2b17      	cmp	r3, #23
      freesize = getSn_TX_FSR(sn);
 8002f86:	fa1f fa8a 	uxth.w	sl, sl
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002f8a:	d001      	beq.n	8002f90 <send+0x84>
 8002f8c:	2b1c      	cmp	r3, #28
 8002f8e:	d13a      	bne.n	8003006 <send+0xfa>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002f90:	f8b9 3000 	ldrh.w	r3, [r9]
 8002f94:	4233      	tst	r3, r6
 8002f96:	d033      	beq.n	8003000 <send+0xf4>
 8002f98:	4554      	cmp	r4, sl
 8002f9a:	d82d      	bhi.n	8002ff8 <send+0xec>
   wiz_send_data(sn, buf, len);
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	9901      	ldr	r1, [sp, #4]
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f7ff fc9b 	bl	80028dc <wiz_send_data>
      setSn_TX_WRSR(sn,len);
 8002fa6:	f108 0020 	add.w	r0, r8, #32
 8002faa:	2100      	movs	r1, #0
 8002fac:	f7ff fc3a 	bl	8002824 <WIZCHIP_WRITE>
 8002fb0:	f108 0022 	add.w	r0, r8, #34	; 0x22
 8002fb4:	4621      	mov	r1, r4
   setSn_CR(sn,Sn_CR_SEND);
 8002fb6:	f108 0802 	add.w	r8, r8, #2
      setSn_TX_WRSR(sn,len);
 8002fba:	f7ff fc33 	bl	8002824 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_SEND);
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	f7ff fc2f 	bl	8002824 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	f7ff fc32 	bl	8002830 <WIZCHIP_READ>
 8002fcc:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002fd0:	d1f9      	bne.n	8002fc6 <send+0xba>
   sock_is_sending |= (1 << sn);
 8002fd2:	f8bb 3000 	ldrh.w	r3, [fp]
   return (int32_t)len;
 8002fd6:	4620      	mov	r0, r4
   sock_is_sending |= (1 << sn);
 8002fd8:	431e      	orrs	r6, r3
 8002fda:	f8ab 6000 	strh.w	r6, [fp]
}
 8002fde:	b003      	add	sp, #12
 8002fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp = getSn_IR(sn);
 8002fe4:	f108 0606 	add.w	r6, r8, #6
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f7ff fc21 	bl	8002830 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8002fee:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(sn);
 8002ff0:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 8002ff2:	d410      	bmi.n	8003016 <send+0x10a>
      else if(tmp & Sn_IR_TIMEOUT)
 8002ff4:	071b      	lsls	r3, r3, #28
 8002ff6:	d427      	bmi.n	8003048 <send+0x13c>
      else return SOCK_BUSY;
 8002ff8:	2000      	movs	r0, #0
}
 8002ffa:	b003      	add	sp, #12
 8002ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8003000:	4554      	cmp	r4, sl
 8003002:	d8b7      	bhi.n	8002f74 <send+0x68>
 8003004:	e7ca      	b.n	8002f9c <send+0x90>
	CHECK_SOCKNUM();
 8003006:	4628      	mov	r0, r5
 8003008:	f7ff fddc 	bl	8002bc4 <close.part.0>
         return SOCKERR_SOCKSTATUS;
 800300c:	f06f 0006 	mvn.w	r0, #6
}
 8003010:	b003      	add	sp, #12
 8003012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8003016:	4630      	mov	r0, r6
 8003018:	2110      	movs	r1, #16
 800301a:	f7ff fc03 	bl	8002824 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 800301e:	2601      	movs	r6, #1
 8003020:	f8bb 3000 	ldrh.w	r3, [fp]
 8003024:	40ae      	lsls	r6, r5
 8003026:	ea23 0306 	bic.w	r3, r3, r6
 800302a:	f8ab 3000 	strh.w	r3, [fp]
 800302e:	e797      	b.n	8002f60 <send+0x54>
   CHECK_SOCKNUM();
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	e7e1      	b.n	8002ffa <send+0xee>
   CHECK_SOCKDATA();
 8003036:	f06f 000d 	mvn.w	r0, #13
 800303a:	e7de      	b.n	8002ffa <send+0xee>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800303c:	f06f 0004 	mvn.w	r0, #4
 8003040:	e7db      	b.n	8002ffa <send+0xee>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003042:	f06f 0006 	mvn.w	r0, #6
 8003046:	e7d8      	b.n	8002ffa <send+0xee>
	CHECK_SOCKNUM();
 8003048:	4628      	mov	r0, r5
 800304a:	f7ff fdbb 	bl	8002bc4 <close.part.0>
         return SOCKERR_TIMEOUT;
 800304e:	f06f 000c 	mvn.w	r0, #12
 8003052:	e7d2      	b.n	8002ffa <send+0xee>
 8003054:	200000ee 	.word	0x200000ee
 8003058:	200000ec 	.word	0x200000ec

0800305c <recv>:
{
 800305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003060:	b085      	sub	sp, #20
   CHECK_SOCKNUM();
 8003062:	2808      	cmp	r0, #8
{
 8003064:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8003066:	f200 80f2 	bhi.w	800324e <recv+0x1f2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800306a:	f100 0908 	add.w	r9, r0, #8
 800306e:	ea4f 1989 	mov.w	r9, r9, lsl #6
 8003072:	4683      	mov	fp, r0
 8003074:	4648      	mov	r0, r9
 8003076:	4616      	mov	r6, r2
 8003078:	f7ff fbda 	bl	8002830 <WIZCHIP_READ>
 800307c:	f000 040f 	and.w	r4, r0, #15
 8003080:	2c01      	cmp	r4, #1
 8003082:	f040 80ea 	bne.w	800325a <recv+0x1fe>
   CHECK_SOCKDATA();
 8003086:	2e00      	cmp	r6, #0
 8003088:	f000 80e4 	beq.w	8003254 <recv+0x1f8>
   recvsize = getSn_RxMAX(sn);
 800308c:	4658      	mov	r0, fp
 800308e:	f7ff fbe5 	bl	800285c <getRMSR>
   if(sock_remained_size[sn] == 0)
 8003092:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8003268 <recv+0x20c>
   recvsize = getSn_RxMAX(sn);
 8003096:	0280      	lsls	r0, r0, #10
   if(sock_remained_size[sn] == 0)
 8003098:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
   recvsize = getSn_RxMAX(sn);
 800309c:	b283      	uxth	r3, r0
 800309e:	9300      	str	r3, [sp, #0]
   if(sock_remained_size[sn] == 0)
 80030a0:	bb3a      	cbnz	r2, 80030f2 <recv+0x96>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80030a2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800326c <recv+0x210>
 80030a6:	fa04 f40b 	lsl.w	r4, r4, fp
 80030aa:	f109 0708 	add.w	r7, r9, #8
         recvsize = getSn_RX_RSR(sn);
 80030ae:	4658      	mov	r0, fp
 80030b0:	f7ff fbf8 	bl	80028a4 <getSn_RX_RSR>
 80030b4:	4605      	mov	r5, r0
         tmp = getSn_SR(sn);
 80030b6:	4638      	mov	r0, r7
 80030b8:	f7ff fbba 	bl	8002830 <WIZCHIP_READ>
 80030bc:	4602      	mov	r2, r0
 80030be:	b2d2      	uxtb	r2, r2
         if (tmp != SOCK_ESTABLISHED)
 80030c0:	2a17      	cmp	r2, #23
         recvsize = getSn_RX_RSR(sn);
 80030c2:	b2ad      	uxth	r5, r5
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80030c4:	4658      	mov	r0, fp
         if (tmp != SOCK_ESTABLISHED)
 80030c6:	d05b      	beq.n	8003180 <recv+0x124>
            if(tmp == SOCK_CLOSE_WAIT)
 80030c8:	2a1c      	cmp	r2, #28
 80030ca:	f040 8091 	bne.w	80031f0 <recv+0x194>
               if(recvsize != 0) break;
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	d15c      	bne.n	800318c <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80030d2:	f7ff fbd3 	bl	800287c <getSn_TX_FSR>
 80030d6:	4605      	mov	r5, r0
 80030d8:	4658      	mov	r0, fp
 80030da:	f7ff fbaf 	bl	800283c <getTMSR>
 80030de:	ebb5 2f80 	cmp.w	r5, r0, lsl #10
 80030e2:	f000 8085 	beq.w	80031f0 <recv+0x194>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80030e6:	f8b8 2000 	ldrh.w	r2, [r8]
 80030ea:	4222      	tst	r2, r4
 80030ec:	d0df      	beq.n	80030ae <recv+0x52>
 80030ee:	2000      	movs	r0, #0
 80030f0:	e043      	b.n	800317a <recv+0x11e>
 80030f2:	461d      	mov	r5, r3
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 80030f4:	4648      	mov	r0, r9
 80030f6:	f7ff fb9b 	bl	8002830 <WIZCHIP_READ>
 80030fa:	05c3      	lsls	r3, r0, #23
 80030fc:	d570      	bpl.n	80031e0 <recv+0x184>
      mr = getMR();
 80030fe:	2000      	movs	r0, #0
 8003100:	f7ff fb96 	bl	8002830 <WIZCHIP_READ>
 8003104:	4604      	mov	r4, r0
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 8003106:	4648      	mov	r0, r9
 8003108:	f7ff fb92 	bl	8002830 <WIZCHIP_READ>
 800310c:	05c7      	lsls	r7, r0, #23
 800310e:	d57c      	bpl.n	800320a <recv+0x1ae>
 8003110:	4c53      	ldr	r4, [pc, #332]	; (8003260 <recv+0x204>)
      sock_remained_size[sn] = recvsize;
 8003112:	f82a 501b 	strh.w	r5, [sl, fp, lsl #1]
 8003116:	f814 200b 	ldrb.w	r2, [r4, fp]
 800311a:	f002 0002 	and.w	r0, r2, #2
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 800311e:	9b00      	ldr	r3, [sp, #0]
 8003120:	42b3      	cmp	r3, r6
 8003122:	bf28      	it	cs
 8003124:	4633      	movcs	r3, r6
 8003126:	42ab      	cmp	r3, r5
 8003128:	bf28      	it	cs
 800312a:	462b      	movcs	r3, r5
 800312c:	4698      	mov	r8, r3
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800312e:	2800      	cmp	r0, #0
 8003130:	f000 808b 	beq.w	800324a <recv+0x1ee>
      *buf = sock_remained_byte[sn];
 8003134:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <recv+0x208>)
 8003136:	9b01      	ldr	r3, [sp, #4]
 8003138:	f812 200b 	ldrb.w	r2, [r2, fp]
 800313c:	f803 2b01 	strb.w	r2, [r3], #1
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8003140:	f814 200b 	ldrb.w	r2, [r4, fp]
      *buf = sock_remained_byte[sn];
 8003144:	9301      	str	r3, [sp, #4]
      sock_remained_size[sn] -= 1;
 8003146:	1e69      	subs	r1, r5, #1
 8003148:	b28d      	uxth	r5, r1
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 800314a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
      recvsize -= 1;
 800314e:	f108 36ff 	add.w	r6, r8, #4294967295
      sock_remained_size[sn] -= 1;
 8003152:	f82a 501b 	strh.w	r5, [sl, fp, lsl #1]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8003156:	f804 200b 	strb.w	r2, [r4, fp]
      recvsize -= 1;
 800315a:	b2b6      	uxth	r6, r6
   if(recvsize != 0)
 800315c:	b9f6      	cbnz	r6, 800319c <recv+0x140>
   if(sock_remained_size[sn] != 0)
 800315e:	2d00      	cmp	r5, #0
 8003160:	d14e      	bne.n	8003200 <recv+0x1a4>
   else sock_pack_info[sn] = PACK_COMPLETED;
 8003162:	2200      	movs	r2, #0
 8003164:	f804 200b 	strb.w	r2, [r4, fp]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 8003168:	4648      	mov	r0, r9
 800316a:	f7ff fb61 	bl	8002830 <WIZCHIP_READ>
 800316e:	05c3      	lsls	r3, r0, #23
 8003170:	bf44      	itt	mi
 8003172:	2200      	movmi	r2, #0
 8003174:	f82a 201b 	strhmi.w	r2, [sl, fp, lsl #1]
   return (int32_t)len;
 8003178:	4640      	mov	r0, r8
}
 800317a:	b005      	add	sp, #20
 800317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003180:	f8b8 2000 	ldrh.w	r2, [r8]
 8003184:	4222      	tst	r2, r4
 8003186:	d006      	beq.n	8003196 <recv+0x13a>
 8003188:	2d00      	cmp	r5, #0
 800318a:	d0b0      	beq.n	80030ee <recv+0x92>
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 800318c:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
 8003190:	2a00      	cmp	r2, #0
 8003192:	d0b4      	beq.n	80030fe <recv+0xa2>
 8003194:	e7ae      	b.n	80030f4 <recv+0x98>
         if(recvsize != 0) break;
 8003196:	2d00      	cmp	r5, #0
 8003198:	d089      	beq.n	80030ae <recv+0x52>
 800319a:	e7f7      	b.n	800318c <recv+0x130>
      wiz_recv_data(sn, buf, recvsize);
 800319c:	9901      	ldr	r1, [sp, #4]
 800319e:	4658      	mov	r0, fp
 80031a0:	4632      	mov	r2, r6
      setSn_CR(sn,Sn_CR_RECV);
 80031a2:	f109 0702 	add.w	r7, r9, #2
      wiz_recv_data(sn, buf, recvsize);
 80031a6:	f7ff fbad 	bl	8002904 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 80031aa:	4638      	mov	r0, r7
 80031ac:	2140      	movs	r1, #64	; 0x40
 80031ae:	f7ff fb39 	bl	8002824 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 80031b2:	4638      	mov	r0, r7
 80031b4:	f7ff fb3c 	bl	8002830 <WIZCHIP_READ>
 80031b8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80031bc:	d1f9      	bne.n	80031b2 <recv+0x156>
   sock_remained_size[sn] -= recvsize;
 80031be:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
 80031c2:	1b92      	subs	r2, r2, r6
 80031c4:	b292      	uxth	r2, r2
 80031c6:	f82a 201b 	strh.w	r2, [sl, fp, lsl #1]
   if(sock_remained_size[sn] != 0)
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	d0c9      	beq.n	8003162 <recv+0x106>
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80031ce:	07f1      	lsls	r1, r6, #31
      sock_pack_info[sn] |= PACK_REMAINED;
 80031d0:	f814 200b 	ldrb.w	r2, [r4, fp]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80031d4:	d514      	bpl.n	8003200 <recv+0x1a4>
 80031d6:	f042 0203 	orr.w	r2, r2, #3
 80031da:	f804 200b 	strb.w	r2, [r4, fp]
 80031de:	e7c3      	b.n	8003168 <recv+0x10c>
 80031e0:	4c1f      	ldr	r4, [pc, #124]	; (8003260 <recv+0x204>)
 80031e2:	f83a 501b 	ldrh.w	r5, [sl, fp, lsl #1]
 80031e6:	f814 200b 	ldrb.w	r2, [r4, fp]
 80031ea:	f002 0002 	and.w	r0, r2, #2
 80031ee:	e796      	b.n	800311e <recv+0xc2>
	CHECK_SOCKNUM();
 80031f0:	4658      	mov	r0, fp
 80031f2:	f7ff fce7 	bl	8002bc4 <close.part.0>
                  return SOCKERR_SOCKSTATUS;
 80031f6:	f06f 0006 	mvn.w	r0, #6
}
 80031fa:	b005      	add	sp, #20
 80031fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sock_pack_info[sn] |= PACK_REMAINED;
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	f804 200b 	strb.w	r2, [r4, fp]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8003208:	e7ae      	b.n	8003168 <recv+0x10c>
         wiz_recv_data(sn,head,2);
 800320a:	2202      	movs	r2, #2
 800320c:	a903      	add	r1, sp, #12
 800320e:	4658      	mov	r0, fp
 8003210:	f7ff fb78 	bl	8002904 <wiz_recv_data>
         if(mr & MR_FS)
 8003214:	05e0      	lsls	r0, r4, #23
 8003216:	9b00      	ldr	r3, [sp, #0]
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8003218:	bf4b      	itete	mi
 800321a:	f89d 200d 	ldrbmi.w	r2, [sp, #13]
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 800321e:	f89d 200c 	ldrbpl.w	r2, [sp, #12]
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8003222:	f89d 100c 	ldrbmi.w	r1, [sp, #12]
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 8003226:	f89d 100d 	ldrbpl.w	r1, [sp, #13]
         sock_pack_info[sn] = PACK_FIRST;
 800322a:	4c0d      	ldr	r4, [pc, #52]	; (8003260 <recv+0x204>)
 800322c:	429e      	cmp	r6, r3
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 800322e:	ea41 2502 	orr.w	r5, r1, r2, lsl #8
         sock_pack_info[sn] = PACK_FIRST;
 8003232:	bf28      	it	cs
 8003234:	461e      	movcs	r6, r3
 8003236:	42ae      	cmp	r6, r5
 8003238:	bf28      	it	cs
 800323a:	462e      	movcs	r6, r5
 800323c:	2280      	movs	r2, #128	; 0x80
      sock_remained_size[sn] = recvsize;
 800323e:	f82a 501b 	strh.w	r5, [sl, fp, lsl #1]
         sock_pack_info[sn] = PACK_FIRST;
 8003242:	f804 200b 	strb.w	r2, [r4, fp]
      sock_remained_size[sn] = recvsize;
 8003246:	46b0      	mov	r8, r6
 8003248:	e788      	b.n	800315c <recv+0x100>
 800324a:	461e      	mov	r6, r3
 800324c:	e786      	b.n	800315c <recv+0x100>
   CHECK_SOCKNUM();
 800324e:	f04f 30ff 	mov.w	r0, #4294967295
 8003252:	e792      	b.n	800317a <recv+0x11e>
   CHECK_SOCKDATA();
 8003254:	f06f 000d 	mvn.w	r0, #13
 8003258:	e78f      	b.n	800317a <recv+0x11e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800325a:	f06f 0004 	mvn.w	r0, #4
 800325e:	e78c      	b.n	800317a <recv+0x11e>
 8003260:	200000f0 	.word	0x200000f0
 8003264:	200000f8 	.word	0x200000f8
 8003268:	20000100 	.word	0x20000100
 800326c:	200000ec 	.word	0x200000ec

08003270 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003274:	8800      	ldrh	r0, [r0, #0]
 8003276:	b280      	uxth	r0, r0
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop

0800327c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800327c:	8001      	strh	r1, [r0, #0]
 800327e:	4770      	bx	lr

08003280 <wizchip_cris_exit>:
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop

08003284 <wizchip_cs_select>:
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop

08003288 <wizchip_cs_deselect>:
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <reg_wizchip_bus_cbfunc+0x20>)
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	05d2      	lsls	r2, r2, #23
 8003292:	d400      	bmi.n	8003296 <reg_wizchip_bus_cbfunc+0xa>
 8003294:	e7fe      	b.n	8003294 <reg_wizchip_bus_cbfunc+0x8>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8003296:	b118      	cbz	r0, 80032a0 <reg_wizchip_bus_cbfunc+0x14>
 8003298:	b111      	cbz	r1, 80032a0 <reg_wizchip_bus_cbfunc+0x14>
 800329a:	e9c3 0107 	strd	r0, r1, [r3, #28]
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}
 800329e:	4770      	bx	lr
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 80032a0:	4903      	ldr	r1, [pc, #12]	; (80032b0 <reg_wizchip_bus_cbfunc+0x24>)
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 80032a2:	4804      	ldr	r0, [pc, #16]	; (80032b4 <reg_wizchip_bus_cbfunc+0x28>)
 80032a4:	e9c3 0107 	strd	r0, r1, [r3, #28]
}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000000c 	.word	0x2000000c
 80032b0:	0800327d 	.word	0x0800327d
 80032b4:	08003275 	.word	0x08003275

080032b8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80032b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80032bc:	2008      	movs	r0, #8
{
 80032be:	b08b      	sub	sp, #44	; 0x2c
   getSHAR(mac);
 80032c0:	f7ff fab6 	bl	8002830 <WIZCHIP_READ>
 80032c4:	4602      	mov	r2, r0
 80032c6:	2008      	movs	r0, #8
 80032c8:	9209      	str	r2, [sp, #36]	; 0x24
 80032ca:	f7ff fab1 	bl	8002830 <WIZCHIP_READ>
 80032ce:	4603      	mov	r3, r0
 80032d0:	200a      	movs	r0, #10
 80032d2:	9308      	str	r3, [sp, #32]
 80032d4:	f7ff faac 	bl	8002830 <WIZCHIP_READ>
 80032d8:	4683      	mov	fp, r0
 80032da:	200a      	movs	r0, #10
 80032dc:	f7ff faa8 	bl	8002830 <WIZCHIP_READ>
 80032e0:	4682      	mov	sl, r0
 80032e2:	200c      	movs	r0, #12
 80032e4:	f7ff faa4 	bl	8002830 <WIZCHIP_READ>
 80032e8:	4601      	mov	r1, r0
 80032ea:	200c      	movs	r0, #12
 80032ec:	9100      	str	r1, [sp, #0]
 80032ee:	f7ff fa9f 	bl	8002830 <WIZCHIP_READ>
 80032f2:	4601      	mov	r1, r0
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80032f4:	2010      	movs	r0, #16
   getSHAR(mac);
 80032f6:	9101      	str	r1, [sp, #4]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80032f8:	f7ff fa9a 	bl	8002830 <WIZCHIP_READ>
 80032fc:	4601      	mov	r1, r0
 80032fe:	2010      	movs	r0, #16
 8003300:	9102      	str	r1, [sp, #8]
 8003302:	f7ff fa95 	bl	8002830 <WIZCHIP_READ>
 8003306:	4601      	mov	r1, r0
 8003308:	2012      	movs	r0, #18
 800330a:	9103      	str	r1, [sp, #12]
 800330c:	f7ff fa90 	bl	8002830 <WIZCHIP_READ>
 8003310:	4601      	mov	r1, r0
 8003312:	2012      	movs	r0, #18
 8003314:	9104      	str	r1, [sp, #16]
 8003316:	f7ff fa8b 	bl	8002830 <WIZCHIP_READ>
 800331a:	4601      	mov	r1, r0
 800331c:	2014      	movs	r0, #20
 800331e:	9105      	str	r1, [sp, #20]
 8003320:	f7ff fa86 	bl	8002830 <WIZCHIP_READ>
 8003324:	4601      	mov	r1, r0
 8003326:	2014      	movs	r0, #20
 8003328:	9106      	str	r1, [sp, #24]
 800332a:	f7ff fa81 	bl	8002830 <WIZCHIP_READ>
 800332e:	4601      	mov	r1, r0
 8003330:	2016      	movs	r0, #22
 8003332:	9107      	str	r1, [sp, #28]
 8003334:	f7ff fa7c 	bl	8002830 <WIZCHIP_READ>
 8003338:	4681      	mov	r9, r0
 800333a:	2016      	movs	r0, #22
 800333c:	f7ff fa78 	bl	8002830 <WIZCHIP_READ>
 8003340:	4680      	mov	r8, r0
 8003342:	2018      	movs	r0, #24
 8003344:	f7ff fa74 	bl	8002830 <WIZCHIP_READ>
 8003348:	4607      	mov	r7, r0
 800334a:	2018      	movs	r0, #24
 800334c:	f7ff fa70 	bl	8002830 <WIZCHIP_READ>
 8003350:	4606      	mov	r6, r0
 8003352:	201a      	movs	r0, #26
 8003354:	f7ff fa6c 	bl	8002830 <WIZCHIP_READ>
 8003358:	4605      	mov	r5, r0
 800335a:	201a      	movs	r0, #26
 800335c:	f7ff fa68 	bl	8002830 <WIZCHIP_READ>
   setMR(MR_RST);
 8003360:	2180      	movs	r1, #128	; 0x80
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003362:	4604      	mov	r4, r0
   setMR(MR_RST);
 8003364:	2000      	movs	r0, #0
 8003366:	f7ff fa5d 	bl	8002824 <WIZCHIP_WRITE>
   getMR(); // for delay
 800336a:	2000      	movs	r0, #0
 800336c:	f7ff fa60 	bl	8002830 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003372:	9b08      	ldr	r3, [sp, #32]
 8003374:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8003378:	fa51 f183 	uxtab	r1, r1, r3
 800337c:	b289      	uxth	r1, r1
 800337e:	2008      	movs	r0, #8
 8003380:	f7ff fa50 	bl	8002824 <WIZCHIP_WRITE>
 8003384:	f02b 01ff 	bic.w	r1, fp, #255	; 0xff
 8003388:	fa51 f18a 	uxtab	r1, r1, sl
 800338c:	b289      	uxth	r1, r1
 800338e:	200a      	movs	r0, #10
 8003390:	f7ff fa48 	bl	8002824 <WIZCHIP_WRITE>
 8003394:	9b00      	ldr	r3, [sp, #0]
 8003396:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	fa51 f183 	uxtab	r1, r1, r3
 80033a0:	b289      	uxth	r1, r1
 80033a2:	200c      	movs	r0, #12
 80033a4:	f7ff fa3e 	bl	8002824 <WIZCHIP_WRITE>
   setGAR(gw);
 80033a8:	9b02      	ldr	r3, [sp, #8]
 80033aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ae:	9b03      	ldr	r3, [sp, #12]
 80033b0:	fa51 f183 	uxtab	r1, r1, r3
 80033b4:	b289      	uxth	r1, r1
 80033b6:	2010      	movs	r0, #16
 80033b8:	f7ff fa34 	bl	8002824 <WIZCHIP_WRITE>
 80033bc:	9b04      	ldr	r3, [sp, #16]
 80033be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033c2:	9b05      	ldr	r3, [sp, #20]
 80033c4:	fa51 f183 	uxtab	r1, r1, r3
 80033c8:	b289      	uxth	r1, r1
 80033ca:	2012      	movs	r0, #18
 80033cc:	f7ff fa2a 	bl	8002824 <WIZCHIP_WRITE>
   setSUBR(sn);
 80033d0:	9b06      	ldr	r3, [sp, #24]
 80033d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033d6:	9b07      	ldr	r3, [sp, #28]
 80033d8:	fa51 f183 	uxtab	r1, r1, r3
 80033dc:	b289      	uxth	r1, r1
 80033de:	2014      	movs	r0, #20
 80033e0:	f7ff fa20 	bl	8002824 <WIZCHIP_WRITE>
 80033e4:	f029 01ff 	bic.w	r1, r9, #255	; 0xff
 80033e8:	fa51 f188 	uxtab	r1, r1, r8
 80033ec:	b289      	uxth	r1, r1
 80033ee:	2016      	movs	r0, #22
 80033f0:	f7ff fa18 	bl	8002824 <WIZCHIP_WRITE>
   setSIPR(sip);
 80033f4:	f027 01ff 	bic.w	r1, r7, #255	; 0xff
 80033f8:	fa51 f186 	uxtab	r1, r1, r6
 80033fc:	b289      	uxth	r1, r1
 80033fe:	2018      	movs	r0, #24
 8003400:	f7ff fa10 	bl	8002824 <WIZCHIP_WRITE>
 8003404:	f025 01ff 	bic.w	r1, r5, #255	; 0xff
 8003408:	fa51 f184 	uxtab	r1, r1, r4
 800340c:	b289      	uxth	r1, r1
 800340e:	201a      	movs	r0, #26
}
 8003410:	b00b      	add	sp, #44	; 0x2c
 8003412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   setSIPR(sip);
 8003416:	f7ff ba05 	b.w	8002824 <WIZCHIP_WRITE>
 800341a:	bf00      	nop

0800341c <ctlwizchip>:
{
 800341c:	b510      	push	{r4, lr}
 800341e:	460c      	mov	r4, r1
 8003420:	2808      	cmp	r0, #8
 8003422:	d841      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003424:	e8df f000 	tbb	[pc, r0]
 8003428:	47550543 	.word	0x47550543
 800342c:	40406079 	.word	0x40406079
 8003430:	6b          	.byte	0x6b
 8003431:	00          	.byte	0x00
         if(arg != 0) 
 8003432:	2900      	cmp	r1, #0
 8003434:	d03b      	beq.n	80034ae <ctlwizchip+0x92>
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8003436:	f7ff ff3f 	bl	80032b8 <wizchip_sw_reset>
      tmp = 0;
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800343a:	7823      	ldrb	r3, [r4, #0]
 800343c:	2b3f      	cmp	r3, #63	; 0x3f
 800343e:	d833      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003440:	7862      	ldrb	r2, [r4, #1]
 8003442:	2a3f      	cmp	r2, #63	; 0x3f
 8003444:	d830      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003446:	78a1      	ldrb	r1, [r4, #2]
			tmp += txsize[i];
 8003448:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800344a:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 800344c:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800344e:	d82b      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003450:	78e2      	ldrb	r2, [r4, #3]
			tmp += txsize[i];
 8003452:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003454:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8003456:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003458:	d826      	bhi.n	80034a8 <ctlwizchip+0x8c>
 800345a:	7921      	ldrb	r1, [r4, #4]
			tmp += txsize[i];
 800345c:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800345e:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 8003460:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003462:	d821      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003464:	7962      	ldrb	r2, [r4, #5]
			tmp += txsize[i];
 8003466:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003468:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 800346a:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800346c:	d81c      	bhi.n	80034a8 <ctlwizchip+0x8c>
 800346e:	79a1      	ldrb	r1, [r4, #6]
			tmp += txsize[i];
 8003470:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003472:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 8003474:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003476:	d817      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003478:	79e2      	ldrb	r2, [r4, #7]
			tmp += txsize[i];
 800347a:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800347c:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 800347e:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003480:	d812      	bhi.n	80034a8 <ctlwizchip+0x8c>
			tmp += txsize[i];
 8003482:	4413      	add	r3, r2
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8003484:	075b      	lsls	r3, r3, #29
 8003486:	d10f      	bne.n	80034a8 <ctlwizchip+0x8c>
   {
      tmp = 0;
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003488:	7a23      	ldrb	r3, [r4, #8]
 800348a:	2b3f      	cmp	r3, #63	; 0x3f
 800348c:	d80c      	bhi.n	80034a8 <ctlwizchip+0x8c>
 800348e:	7a62      	ldrb	r2, [r4, #9]
 8003490:	2a3f      	cmp	r2, #63	; 0x3f
 8003492:	d809      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003494:	7aa1      	ldrb	r1, [r4, #10]
			tmp += rxsize[i];
 8003496:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003498:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 800349a:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800349c:	d804      	bhi.n	80034a8 <ctlwizchip+0x8c>
 800349e:	7ae2      	ldrb	r2, [r4, #11]
			tmp += rxsize[i];
 80034a0:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80034a2:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 80034a4:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80034a6:	d945      	bls.n	8003534 <ctlwizchip+0x118>
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034ac:	bd10      	pop	{r4, pc}
         wizchip_sw_reset();
 80034ae:	f7ff ff03 	bl	80032b8 <wizchip_sw_reset>
   return 0;
 80034b2:	2000      	movs	r0, #0
}
 80034b4:	bd10      	pop	{r4, pc}
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80034b6:	880b      	ldrh	r3, [r1, #0]
   return 0;
}

void wizchip_clrinterrupt(intr_kind intr)
{
   uint8_t ir  = (uint8_t)intr;
 80034b8:	b2d9      	uxtb	r1, r3
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 80034ba:	f041 0210 	orr.w	r2, r1, #16
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80034be:	0a19      	lsrs	r1, r3, #8
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 80034c0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80034c4:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 80034c8:	2002      	movs	r0, #2
 80034ca:	f7ff f9ab 	bl	8002824 <WIZCHIP_WRITE>
   return 0;
 80034ce:	2000      	movs	r0, #0
}
 80034d0:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80034d2:	2002      	movs	r0, #2
 80034d4:	f7ff f9ac 	bl	8002830 <WIZCHIP_READ>
   ir = (uint8_t)(ret >> 8);
 80034d8:	0a03      	lsrs	r3, r0, #8
 80034da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 80034de:	eb03 2000 	add.w	r0, r3, r0, lsl #8
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80034e2:	8020      	strh	r0, [r4, #0]
   return 0;
 80034e4:	2000      	movs	r0, #0
}
 80034e6:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 80034e8:	2004      	movs	r0, #4
 80034ea:	f7ff f9a1 	bl	8002830 <WIZCHIP_READ>
   imr = (uint8_t)(ret >> 8);
 80034ee:	0a03      	lsrs	r3, r0, #8
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 80034f0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80034f4:	eb03 2000 	add.w	r0, r3, r0, lsl #8
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80034f8:	8020      	strh	r0, [r4, #0]
   return 0;
 80034fa:	2000      	movs	r0, #0
}
 80034fc:	bd10      	pop	{r4, pc}
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <ctlwizchip+0x150>)
 8003500:	789a      	ldrb	r2, [r3, #2]
 8003502:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003504:	78da      	ldrb	r2, [r3, #3]
 8003506:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003508:	791a      	ldrb	r2, [r3, #4]
 800350a:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800350c:	795a      	ldrb	r2, [r3, #5]
 800350e:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003510:	799b      	ldrb	r3, [r3, #6]
 8003512:	710b      	strb	r3, [r1, #4]
         ((uint8_t*)arg)[5] = 0;
 8003514:	2000      	movs	r0, #0
 8003516:	7148      	strb	r0, [r1, #5]
}
 8003518:	bd10      	pop	{r4, pc}
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800351a:	880b      	ldrh	r3, [r1, #0]
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 800351c:	f003 02ef 	and.w	r2, r3, #239	; 0xef
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003520:	0a19      	lsrs	r1, r3, #8
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8003522:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8003526:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 800352a:	2004      	movs	r0, #4
 800352c:	f7ff f97a 	bl	8002824 <WIZCHIP_WRITE>
   return 0;
 8003530:	2000      	movs	r0, #0
}
 8003532:	bd10      	pop	{r4, pc}
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003534:	7b21      	ldrb	r1, [r4, #12]
			tmp += rxsize[i];
 8003536:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003538:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 800353a:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800353c:	d8b4      	bhi.n	80034a8 <ctlwizchip+0x8c>
 800353e:	7b62      	ldrb	r2, [r4, #13]
			tmp += rxsize[i];
 8003540:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003542:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 8003544:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003546:	d8af      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003548:	7ba1      	ldrb	r1, [r4, #14]
			tmp += rxsize[i];
 800354a:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800354c:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 800354e:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003550:	d8aa      	bhi.n	80034a8 <ctlwizchip+0x8c>
 8003552:	7be0      	ldrb	r0, [r4, #15]
			tmp += rxsize[i];
 8003554:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8003556:	283f      	cmp	r0, #63	; 0x3f
			tmp += rxsize[i];
 8003558:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800355a:	d8a5      	bhi.n	80034a8 <ctlwizchip+0x8c>
			tmp += rxsize[i];
 800355c:	4418      	add	r0, r3
		if(tmp % 8) return -1;
 800355e:	f010 0007 	ands.w	r0, r0, #7
 8003562:	bf18      	it	ne
 8003564:	2001      	movne	r0, #1
 8003566:	4240      	negs	r0, r0
}
 8003568:	bd10      	pop	{r4, pc}
 800356a:	bf00      	nop
 800356c:	2000000c 	.word	0x2000000c

08003570 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003570:	b510      	push	{r4, lr}
 8003572:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8003574:	2008      	movs	r0, #8
 8003576:	7823      	ldrb	r3, [r4, #0]
 8003578:	7861      	ldrb	r1, [r4, #1]
 800357a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800357e:	b289      	uxth	r1, r1
 8003580:	f7ff f950 	bl	8002824 <WIZCHIP_WRITE>
 8003584:	78a3      	ldrb	r3, [r4, #2]
 8003586:	78e1      	ldrb	r1, [r4, #3]
 8003588:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800358c:	b289      	uxth	r1, r1
 800358e:	200a      	movs	r0, #10
 8003590:	f7ff f948 	bl	8002824 <WIZCHIP_WRITE>
 8003594:	7923      	ldrb	r3, [r4, #4]
 8003596:	7961      	ldrb	r1, [r4, #5]
 8003598:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800359c:	b289      	uxth	r1, r1
 800359e:	200c      	movs	r0, #12
 80035a0:	f7ff f940 	bl	8002824 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 80035a4:	7ba3      	ldrb	r3, [r4, #14]
 80035a6:	7be1      	ldrb	r1, [r4, #15]
 80035a8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80035ac:	b289      	uxth	r1, r1
 80035ae:	2010      	movs	r0, #16
 80035b0:	f7ff f938 	bl	8002824 <WIZCHIP_WRITE>
 80035b4:	7c23      	ldrb	r3, [r4, #16]
 80035b6:	7c61      	ldrb	r1, [r4, #17]
 80035b8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80035bc:	b289      	uxth	r1, r1
 80035be:	2012      	movs	r0, #18
 80035c0:	f7ff f930 	bl	8002824 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 80035c4:	7aa3      	ldrb	r3, [r4, #10]
 80035c6:	7ae1      	ldrb	r1, [r4, #11]
 80035c8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80035cc:	b289      	uxth	r1, r1
 80035ce:	2014      	movs	r0, #20
 80035d0:	f7ff f928 	bl	8002824 <WIZCHIP_WRITE>
 80035d4:	7b23      	ldrb	r3, [r4, #12]
 80035d6:	7b61      	ldrb	r1, [r4, #13]
 80035d8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80035dc:	b289      	uxth	r1, r1
 80035de:	2016      	movs	r0, #22
 80035e0:	f7ff f920 	bl	8002824 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 80035e4:	79a3      	ldrb	r3, [r4, #6]
 80035e6:	79e1      	ldrb	r1, [r4, #7]
 80035e8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80035ec:	b289      	uxth	r1, r1
 80035ee:	2018      	movs	r0, #24
 80035f0:	f7ff f918 	bl	8002824 <WIZCHIP_WRITE>
 80035f4:	7a23      	ldrb	r3, [r4, #8]
 80035f6:	7a61      	ldrb	r1, [r4, #9]
 80035f8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80035fc:	b289      	uxth	r1, r1
 80035fe:	201a      	movs	r0, #26
 8003600:	f7ff f910 	bl	8002824 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <wizchip_setnetinfo+0xa4>)
   _DNS_[1] = pnetinfo->dns[1];
   _DNS_[2] = pnetinfo->dns[2];
   _DNS_[3] = pnetinfo->dns[3];
   _DHCP_   = pnetinfo->dhcp;
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <wizchip_setnetinfo+0xa8>)
   _DNS_[0] = pnetinfo->dns[0];
 8003608:	f8d4 0012 	ldr.w	r0, [r4, #18]
   _DHCP_   = pnetinfo->dhcp;
 800360c:	7da2      	ldrb	r2, [r4, #22]
   _DNS_[0] = pnetinfo->dns[0];
 800360e:	6008      	str	r0, [r1, #0]
   _DHCP_   = pnetinfo->dhcp;
 8003610:	701a      	strb	r2, [r3, #0]
}
 8003612:	bd10      	pop	{r4, pc}
 8003614:	20000114 	.word	0x20000114
 8003618:	20000110 	.word	0x20000110

0800361c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8003620:	2008      	movs	r0, #8
 8003622:	f7ff f905 	bl	8002830 <WIZCHIP_READ>
 8003626:	0a00      	lsrs	r0, r0, #8
 8003628:	7020      	strb	r0, [r4, #0]
 800362a:	2008      	movs	r0, #8
 800362c:	f7ff f900 	bl	8002830 <WIZCHIP_READ>
 8003630:	7060      	strb	r0, [r4, #1]
 8003632:	200a      	movs	r0, #10
 8003634:	f7ff f8fc 	bl	8002830 <WIZCHIP_READ>
 8003638:	0a00      	lsrs	r0, r0, #8
 800363a:	70a0      	strb	r0, [r4, #2]
 800363c:	200a      	movs	r0, #10
 800363e:	f7ff f8f7 	bl	8002830 <WIZCHIP_READ>
 8003642:	70e0      	strb	r0, [r4, #3]
 8003644:	200c      	movs	r0, #12
 8003646:	f7ff f8f3 	bl	8002830 <WIZCHIP_READ>
 800364a:	0a00      	lsrs	r0, r0, #8
 800364c:	7120      	strb	r0, [r4, #4]
 800364e:	200c      	movs	r0, #12
 8003650:	f7ff f8ee 	bl	8002830 <WIZCHIP_READ>
 8003654:	7160      	strb	r0, [r4, #5]
   getGAR(pnetinfo->gw);
 8003656:	2010      	movs	r0, #16
 8003658:	f7ff f8ea 	bl	8002830 <WIZCHIP_READ>
 800365c:	0a00      	lsrs	r0, r0, #8
 800365e:	73a0      	strb	r0, [r4, #14]
 8003660:	2010      	movs	r0, #16
 8003662:	f7ff f8e5 	bl	8002830 <WIZCHIP_READ>
 8003666:	73e0      	strb	r0, [r4, #15]
 8003668:	2012      	movs	r0, #18
 800366a:	f7ff f8e1 	bl	8002830 <WIZCHIP_READ>
 800366e:	0a00      	lsrs	r0, r0, #8
 8003670:	7420      	strb	r0, [r4, #16]
 8003672:	2012      	movs	r0, #18
 8003674:	f7ff f8dc 	bl	8002830 <WIZCHIP_READ>
 8003678:	7460      	strb	r0, [r4, #17]
   getSUBR(pnetinfo->sn);
 800367a:	2014      	movs	r0, #20
 800367c:	f7ff f8d8 	bl	8002830 <WIZCHIP_READ>
 8003680:	0a00      	lsrs	r0, r0, #8
 8003682:	72a0      	strb	r0, [r4, #10]
 8003684:	2014      	movs	r0, #20
 8003686:	f7ff f8d3 	bl	8002830 <WIZCHIP_READ>
 800368a:	72e0      	strb	r0, [r4, #11]
 800368c:	2016      	movs	r0, #22
 800368e:	f7ff f8cf 	bl	8002830 <WIZCHIP_READ>
 8003692:	0a00      	lsrs	r0, r0, #8
 8003694:	7320      	strb	r0, [r4, #12]
 8003696:	2016      	movs	r0, #22
 8003698:	f7ff f8ca 	bl	8002830 <WIZCHIP_READ>
 800369c:	7360      	strb	r0, [r4, #13]
   getSIPR(pnetinfo->ip);
 800369e:	2018      	movs	r0, #24
 80036a0:	f7ff f8c6 	bl	8002830 <WIZCHIP_READ>
 80036a4:	0a00      	lsrs	r0, r0, #8
 80036a6:	71a0      	strb	r0, [r4, #6]
 80036a8:	2018      	movs	r0, #24
 80036aa:	f7ff f8c1 	bl	8002830 <WIZCHIP_READ>
 80036ae:	71e0      	strb	r0, [r4, #7]
 80036b0:	201a      	movs	r0, #26
 80036b2:	f7ff f8bd 	bl	8002830 <WIZCHIP_READ>
 80036b6:	0a00      	lsrs	r0, r0, #8
 80036b8:	7220      	strb	r0, [r4, #8]
 80036ba:	201a      	movs	r0, #26
 80036bc:	f7ff f8b8 	bl	8002830 <WIZCHIP_READ>
   pnetinfo->dns[0]= _DNS_[0];
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <wizchip_getnetinfo+0xc0>)
   pnetinfo->dns[1]= _DNS_[1];
   pnetinfo->dns[2]= _DNS_[2];
   pnetinfo->dns[3]= _DNS_[3];
   pnetinfo->dhcp  = _DHCP_;
 80036c2:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <wizchip_getnetinfo+0xc4>)
   pnetinfo->dns[0]= _DNS_[0];
 80036c4:	781e      	ldrb	r6, [r3, #0]
   pnetinfo->dns[1]= _DNS_[1];
 80036c6:	785d      	ldrb	r5, [r3, #1]
   pnetinfo->dns[2]= _DNS_[2];
 80036c8:	7899      	ldrb	r1, [r3, #2]
   pnetinfo->dhcp  = _DHCP_;
 80036ca:	7812      	ldrb	r2, [r2, #0]
   pnetinfo->dns[3]= _DNS_[3];
 80036cc:	78db      	ldrb	r3, [r3, #3]
   getSIPR(pnetinfo->ip);
 80036ce:	7260      	strb	r0, [r4, #9]
   pnetinfo->dns[0]= _DNS_[0];
 80036d0:	74a6      	strb	r6, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80036d2:	74e5      	strb	r5, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80036d4:	7521      	strb	r1, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80036d6:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 80036d8:	75a2      	strb	r2, [r4, #22]
}
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	20000114 	.word	0x20000114
 80036e0:	20000110 	.word	0x20000110

080036e4 <ctlnetwork>:
{
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	460c      	mov	r4, r1
 80036e8:	2805      	cmp	r0, #5
 80036ea:	d836      	bhi.n	800375a <ctlnetwork+0x76>
 80036ec:	e8df f000 	tbb	[pc, r0]
 80036f0:	2517120d 	.word	0x2517120d
 80036f4:	032b      	.short	0x032b
   setRTR(nettime->time_100us);
}

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
   nettime->retry_cnt = getRCR();
 80036f6:	201e      	movs	r0, #30
 80036f8:	f7ff f89a 	bl	8002830 <WIZCHIP_READ>
 80036fc:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
 80036fe:	201c      	movs	r0, #28
 8003700:	f7ff f896 	bl	8002830 <WIZCHIP_READ>
 8003704:	8060      	strh	r0, [r4, #2]
   return 0;
 8003706:	2000      	movs	r0, #0
}
 8003708:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800370a:	4608      	mov	r0, r1
 800370c:	f7ff ff30 	bl	8003570 <wizchip_setnetinfo>
   return 0;
 8003710:	2000      	movs	r0, #0
}
 8003712:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003714:	4608      	mov	r0, r1
 8003716:	f7ff ff81 	bl	800361c <wizchip_getnetinfo>
   return 0;
 800371a:	2000      	movs	r0, #0
}
 800371c:	bd38      	pop	{r3, r4, r5, pc}
         return wizchip_setnetmode(*(netmode_type*)arg);
 800371e:	780d      	ldrb	r5, [r1, #0]
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8003720:	f035 0438 	bics.w	r4, r5, #56	; 0x38
 8003724:	d119      	bne.n	800375a <ctlnetwork+0x76>
   tmp = getMR();
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff f882 	bl	8002830 <WIZCHIP_READ>
 800372c:	b2c1      	uxtb	r1, r0
   setMR(tmp);
 800372e:	4329      	orrs	r1, r5
 8003730:	4620      	mov	r0, r4
 8003732:	f7ff f877 	bl	8002824 <WIZCHIP_WRITE>
   return 0;
 8003736:	4620      	mov	r0, r4
}
 8003738:	bd38      	pop	{r3, r4, r5, pc}
   return (netmode_type) getMR();
 800373a:	2000      	movs	r0, #0
 800373c:	f7ff f878 	bl	8002830 <WIZCHIP_READ>
 8003740:	7020      	strb	r0, [r4, #0]
   return 0;
 8003742:	2000      	movs	r0, #0
}
 8003744:	bd38      	pop	{r3, r4, r5, pc}
   setRCR(nettime->retry_cnt);
 8003746:	7809      	ldrb	r1, [r1, #0]
 8003748:	201e      	movs	r0, #30
 800374a:	f7ff f86b 	bl	8002824 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800374e:	8861      	ldrh	r1, [r4, #2]
 8003750:	201c      	movs	r0, #28
 8003752:	f7ff f867 	bl	8002824 <WIZCHIP_WRITE>
   return 0;
 8003756:	2000      	movs	r0, #0
}
 8003758:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 800375a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800375e:	bd38      	pop	{r3, r4, r5, pc}

08003760 <W5300_write>:
	HAL_Delay(100);
}

void W5300_write(uint32_t addr, iodata_t wd)
{
	_W5300_DATA(addr) = wd;
 8003760:	0040      	lsls	r0, r0, #1
 8003762:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8003766:	8001      	strh	r1, [r0, #0]
}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop

0800376c <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
	return _W5300_DATA(addr);
 800376c:	0040      	lsls	r0, r0, #1
 800376e:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8003772:	8800      	ldrh	r0, [r0, #0]
}
 8003774:	b280      	uxth	r0, r0
 8003776:	4770      	bx	lr

08003778 <CamImagTransferFrame.constprop.0>:
	{
		ret = send(_CAM_SOCK_NUM, (uint8_t *)data_buf, size+4);
	}
}

void CamImagTransferFrame(unsigned int Cmd, unsigned int Para)
 8003778:	b500      	push	{lr}
  	data_buf[1] = 0;
  	data_buf[2] = Para>>8;
  	data_buf[3] = Para;


	if(gImgTransferFlag)
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <CamImagTransferFrame.constprop.0+0x40>)
void CamImagTransferFrame(unsigned int Cmd, unsigned int Para)
 800377c:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
	if(gImgTransferFlag)
 8003780:	681b      	ldr	r3, [r3, #0]
  	data_buf[2] = Para>>8;
 8003782:	ba40      	rev16	r0, r0
  	data_buf[0] = Cmd;
 8003784:	22fa      	movs	r2, #250	; 0xfa
  	data_buf[2] = Para>>8;
 8003786:	f8ad 0002 	strh.w	r0, [sp, #2]
  	data_buf[0] = Cmd;
 800378a:	f8ad 2000 	strh.w	r2, [sp]
	if(gImgTransferFlag)
 800378e:	b91b      	cbnz	r3, 8003798 <CamImagTransferFrame.constprop.0+0x20>
	{
		HAL_Delay(1);
		ret = send(_CAM_SOCK_NUM, data_buf, size+4);
		HAL_Delay(1);
	}
}
 8003790:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
 8003794:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_Delay(1);
 8003798:	2001      	movs	r0, #1
 800379a:	f7fc ff35 	bl	8000608 <HAL_Delay>
		ret = send(_CAM_SOCK_NUM, data_buf, size+4);
 800379e:	4669      	mov	r1, sp
 80037a0:	f240 5204 	movw	r2, #1284	; 0x504
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7ff fbb1 	bl	8002f0c <send>
		HAL_Delay(1);
 80037aa:	2001      	movs	r0, #1
 80037ac:	f7fc ff2c 	bl	8000608 <HAL_Delay>
}
 80037b0:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
 80037b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80037b8:	2000003c 	.word	0x2000003c

080037bc <CamImagTransferLine.constprop.0>:
void CamImagTransferLine(unsigned int Cmd, unsigned int Para)
 80037bc:	b500      	push	{lr}
 80037be:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
  	data_buf[2] = Para>>8;
 80037c2:	ba40      	rev16	r0, r0
  	data_buf[0] = Cmd;
 80037c4:	23fb      	movs	r3, #251	; 0xfb
  	data_buf[2] = Para>>8;
 80037c6:	f8ad 0002 	strh.w	r0, [sp, #2]
  	memcpy((uint8_t *)&data_buf[4], (uint8_t *)&FrameBuffer, size);
 80037ca:	490c      	ldr	r1, [pc, #48]	; (80037fc <CamImagTransferLine.constprop.0+0x40>)
  	data_buf[0] = Cmd;
 80037cc:	f8ad 3000 	strh.w	r3, [sp]
  	memcpy((uint8_t *)&data_buf[4], (uint8_t *)&FrameBuffer, size);
 80037d0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80037d4:	a801      	add	r0, sp, #4
 80037d6:	f000 fe91 	bl	80044fc <memcpy>
	if(gImgTransferFlag)
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <CamImagTransferLine.constprop.0+0x44>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b91b      	cbnz	r3, 80037e8 <CamImagTransferLine.constprop.0+0x2c>
}
 80037e0:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
 80037e4:	f85d fb04 	ldr.w	pc, [sp], #4
		ret = send(_CAM_SOCK_NUM, (uint8_t *)data_buf, size+4);
 80037e8:	4669      	mov	r1, sp
 80037ea:	f240 5204 	movw	r2, #1284	; 0x504
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7ff fb8c 	bl	8002f0c <send>
}
 80037f4:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
 80037f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80037fc:	200001f0 	.word	0x200001f0
 8003800:	2000003c 	.word	0x2000003c

08003804 <_write>:


int _write( int32_t file , uint8_t *ptr , int32_t len )
{
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Implement your write code here, this is used by puts and printf for example */
    for ( int16_t i = 0 ; i < len ; ++i )
 8003806:	1e16      	subs	r6, r2, #0
 8003808:	dd0e      	ble.n	8003828 <_write+0x24>
    {
        HAL_UART_Transmit( &huart1, ptr++, 1, 100);
 800380a:	4f08      	ldr	r7, [pc, #32]	; (800382c <_write+0x28>)
 800380c:	460d      	mov	r5, r1
    for ( int16_t i = 0 ; i < len ; ++i )
 800380e:	2400      	movs	r4, #0
        HAL_UART_Transmit( &huart1, ptr++, 1, 100);
 8003810:	3401      	adds	r4, #1
 8003812:	4629      	mov	r1, r5
 8003814:	2364      	movs	r3, #100	; 0x64
 8003816:	2201      	movs	r2, #1
 8003818:	4638      	mov	r0, r7
 800381a:	b224      	sxth	r4, r4
 800381c:	f7fe ff0c 	bl	8002638 <HAL_UART_Transmit>
    for ( int16_t i = 0 ; i < len ; ++i )
 8003820:	42b4      	cmp	r4, r6
        HAL_UART_Transmit( &huart1, ptr++, 1, 100);
 8003822:	f105 0501 	add.w	r5, r5, #1
    for ( int16_t i = 0 ; i < len ; ++i )
 8003826:	dbf3      	blt.n	8003810 <_write+0xc>
    }
    return len;
}
 8003828:	4630      	mov	r0, r6
 800382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382c:	20000c80 	.word	0x20000c80

08003830 <print_network_information>:



void print_network_information(void)
{
 8003830:	b510      	push	{r4, lr}
    wizchip_getnetinfo(&gWIZNETINFO);
 8003832:	4c19      	ldr	r4, [pc, #100]	; (8003898 <print_network_information+0x68>)
{
 8003834:	b084      	sub	sp, #16
    wizchip_getnetinfo(&gWIZNETINFO);
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff fef0 	bl	800361c <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800383c:	7961      	ldrb	r1, [r4, #5]
 800383e:	7922      	ldrb	r2, [r4, #4]
 8003840:	78e3      	ldrb	r3, [r4, #3]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003848:	78a3      	ldrb	r3, [r4, #2]
 800384a:	7862      	ldrb	r2, [r4, #1]
 800384c:	7821      	ldrb	r1, [r4, #0]
 800384e:	4813      	ldr	r0, [pc, #76]	; (800389c <print_network_information+0x6c>)
 8003850:	f000 fe6a 	bl	8004528 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8003854:	7a63      	ldrb	r3, [r4, #9]
 8003856:	79e2      	ldrb	r2, [r4, #7]
 8003858:	79a1      	ldrb	r1, [r4, #6]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	4810      	ldr	r0, [pc, #64]	; (80038a0 <print_network_information+0x70>)
 800385e:	7a23      	ldrb	r3, [r4, #8]
 8003860:	f000 fe62 	bl	8004528 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8003864:	7b63      	ldrb	r3, [r4, #13]
 8003866:	7ae2      	ldrb	r2, [r4, #11]
 8003868:	7aa1      	ldrb	r1, [r4, #10]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	480d      	ldr	r0, [pc, #52]	; (80038a4 <print_network_information+0x74>)
 800386e:	7b23      	ldrb	r3, [r4, #12]
 8003870:	f000 fe5a 	bl	8004528 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8003874:	7c63      	ldrb	r3, [r4, #17]
 8003876:	7be2      	ldrb	r2, [r4, #15]
 8003878:	7ba1      	ldrb	r1, [r4, #14]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	480a      	ldr	r0, [pc, #40]	; (80038a8 <print_network_information+0x78>)
 800387e:	7c23      	ldrb	r3, [r4, #16]
 8003880:	f000 fe52 	bl	8004528 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8003884:	7d63      	ldrb	r3, [r4, #21]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	7ce2      	ldrb	r2, [r4, #19]
 800388a:	7d23      	ldrb	r3, [r4, #20]
 800388c:	7ca1      	ldrb	r1, [r4, #18]
 800388e:	4807      	ldr	r0, [pc, #28]	; (80038ac <print_network_information+0x7c>)
 8003890:	f000 fe4a 	bl	8004528 <iprintf>
}
 8003894:	b004      	add	sp, #16
 8003896:	bd10      	pop	{r4, pc}
 8003898:	20000040 	.word	0x20000040
 800389c:	080054e0 	.word	0x080054e0
 80038a0:	08005510 	.word	0x08005510
 80038a4:	0800552c 	.word	0x0800552c
 80038a8:	08005548 	.word	0x08005548
 80038ac:	08005564 	.word	0x08005564

080038b0 <_InitW5300>:

void _InitW5300(void);

void _InitW5300(void)
{
 80038b0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2108      	movs	r1, #8
 80038b6:	4815      	ldr	r0, [pc, #84]	; (800390c <_InitW5300+0x5c>)
 80038b8:	f7fd fda6 	bl	8001408 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80038bc:	200a      	movs	r0, #10
 80038be:	f7fc fea3 	bl	8000608 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 80038c2:	2201      	movs	r2, #1
 80038c4:	2108      	movs	r1, #8
 80038c6:	4811      	ldr	r0, [pc, #68]	; (800390c <_InitW5300+0x5c>)
 80038c8:	f7fd fd9e 	bl	8001408 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80038cc:	2064      	movs	r0, #100	; 0x64
 80038ce:	f7fc fe9b 	bl	8000608 <HAL_Delay>
	unsigned int tmpaddr[4];

	Reset_W5300();
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 80038d2:	490f      	ldr	r1, [pc, #60]	; (8003910 <_InitW5300+0x60>)
 80038d4:	480f      	ldr	r0, [pc, #60]	; (8003914 <_InitW5300+0x64>)
 80038d6:	f7ff fcd9 	bl	800328c <reg_wizchip_bus_cbfunc>

	printf("getMR() = %04X\r\n", getMR());
 80038da:	2000      	movs	r0, #0
 80038dc:	f7fe ffa8 	bl	8002830 <WIZCHIP_READ>
 80038e0:	4601      	mov	r1, r0
 80038e2:	480d      	ldr	r0, [pc, #52]	; (8003918 <_InitW5300+0x68>)
 80038e4:	f000 fe20 	bl	8004528 <iprintf>

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 80038e8:	490c      	ldr	r1, [pc, #48]	; (800391c <_InitW5300+0x6c>)
 80038ea:	2001      	movs	r0, #1
 80038ec:	f7ff fd96 	bl	800341c <ctlwizchip>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d007      	beq.n	8003904 <_InitW5300+0x54>
	{
		printf("W5300 memory initialization failed\r\n");
	}

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80038f4:	490a      	ldr	r1, [pc, #40]	; (8003920 <_InitW5300+0x70>)
 80038f6:	2000      	movs	r0, #0
 80038f8:	f7ff fef4 	bl	80036e4 <ctlnetwork>
	print_network_information();
}
 80038fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print_network_information();
 8003900:	f7ff bf96 	b.w	8003830 <print_network_information>
		printf("W5300 memory initialization failed\r\n");
 8003904:	4807      	ldr	r0, [pc, #28]	; (8003924 <_InitW5300+0x74>)
 8003906:	f000 fe95 	bl	8004634 <puts>
 800390a:	e7f3      	b.n	80038f4 <_InitW5300+0x44>
 800390c:	40021000 	.word	0x40021000
 8003910:	08003761 	.word	0x08003761
 8003914:	0800376d 	.word	0x0800376d
 8003918:	08005580 	.word	0x08005580
 800391c:	20000058 	.word	0x20000058
 8003920:	20000040 	.word	0x20000040
 8003924:	08005594 	.word	0x08005594

08003928 <HAL_DCMI_FrameEventCallback>:


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{

}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop

0800392c <HAL_DCMI_VsyncEventCallback>:


void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
	gCameraFrameFlag++;
 800392c:	4a02      	ldr	r2, [pc, #8]	; (8003938 <HAL_DCMI_VsyncEventCallback+0xc>)
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	3301      	adds	r3, #1
 8003932:	6013      	str	r3, [r2, #0]
}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000118 	.word	0x20000118

0800393c <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
	gCameraLineFlag++;
 800393c:	4a02      	ldr	r2, [pc, #8]	; (8003948 <HAL_DCMI_LineEventCallback+0xc>)
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	3301      	adds	r3, #1
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	2000011c 	.word	0x2000011c

0800394c <CAMERA_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void CAMERA_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	460e      	mov	r6, r1
  status = HAL_I2C_Mem_Write(&hI2C_Cam, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 8003952:	2301      	movs	r3, #1
 8003954:	2764      	movs	r7, #100	; 0x64
 8003956:	f10d 0517 	add.w	r5, sp, #23
 800395a:	4601      	mov	r1, r0
{
 800395c:	4614      	mov	r4, r2
  status = HAL_I2C_Mem_Write(&hI2C_Cam, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 800395e:	e9cd 5300 	strd	r5, r3, [sp]
 8003962:	9702      	str	r7, [sp, #8]
 8003964:	4632      	mov	r2, r6
 8003966:	4803      	ldr	r0, [pc, #12]	; (8003974 <CAMERA_IO_Write+0x28>)
 8003968:	f88d 4017 	strb.w	r4, [sp, #23]
 800396c:	f7fd fff8 	bl	8001960 <HAL_I2C_Mem_Write>
  I2Cx_Write(Addr, Reg, Value);
}
 8003970:	b007      	add	sp, #28
 8003972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003974:	2000013c 	.word	0x2000013c

08003978 <CAMERA_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003978:	b530      	push	{r4, r5, lr}
 800397a:	b087      	sub	sp, #28
  status = HAL_I2C_Mem_Read(&hI2C_Cam, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 800397c:	2301      	movs	r3, #1
 800397e:	f10d 0417 	add.w	r4, sp, #23
 8003982:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
{
 8003986:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hI2C_Cam, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8003988:	9400      	str	r4, [sp, #0]
 800398a:	4601      	mov	r1, r0
 800398c:	e9cd 3501 	strd	r3, r5, [sp, #4]
  uint8_t Value = 0;
 8003990:	2400      	movs	r4, #0
  status = HAL_I2C_Mem_Read(&hI2C_Cam, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8003992:	4804      	ldr	r0, [pc, #16]	; (80039a4 <CAMERA_IO_Read+0x2c>)
  uint8_t Value = 0;
 8003994:	f88d 4017 	strb.w	r4, [sp, #23]
  status = HAL_I2C_Mem_Read(&hI2C_Cam, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8003998:	f7fe f8d6 	bl	8001b48 <HAL_I2C_Mem_Read>
  return I2Cx_Read(Addr, Reg);
}
 800399c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80039a0:	b007      	add	sp, #28
 80039a2:	bd30      	pop	{r4, r5, pc}
 80039a4:	2000013c 	.word	0x2000013c

080039a8 <CAMERA_Delay>:
  * @brief  Camera delay
  * @param  Delay: Delay in ms
  */
void CAMERA_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80039a8:	f7fc be2e 	b.w	8000608 <HAL_Delay>

080039ac <CAMERA_IO_Init>:
}

void CAMERA_IO_Init(void)
{
 80039ac:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80039ae:	4c0d      	ldr	r4, [pc, #52]	; (80039e4 <CAMERA_IO_Init+0x38>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	4620      	mov	r0, r4
 80039b4:	2104      	movs	r1, #4
 80039b6:	f7fd fd27 	bl	8001408 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80039ba:	200a      	movs	r0, #10
 80039bc:	f7fc fe24 	bl	8000608 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80039c0:	4620      	mov	r0, r4
 80039c2:	2200      	movs	r2, #0
 80039c4:	2104      	movs	r1, #4
 80039c6:	f7fd fd1f 	bl	8001408 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80039ca:	200a      	movs	r0, #10
 80039cc:	f7fc fe1c 	bl	8000608 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80039d0:	4620      	mov	r0, r4
 80039d2:	2201      	movs	r2, #1
 80039d4:	2104      	movs	r1, #4
 80039d6:	f7fd fd17 	bl	8001408 <HAL_GPIO_WritePin>
	HAL_Delay(100);
}
 80039da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 80039de:	2064      	movs	r0, #100	; 0x64
 80039e0:	f7fc be12 	b.w	8000608 <HAL_Delay>
 80039e4:	40021000 	.word	0x40021000

080039e8 <_init_cam>:

void _init_cam(void)
{
 80039e8:	b500      	push	{lr}
	volatile uint32_t idc = ov2640_ReadID(CAMERA_I2C_ADDRESS);
 80039ea:	2060      	movs	r0, #96	; 0x60
{
 80039ec:	b083      	sub	sp, #12
	volatile uint32_t idc = ov2640_ReadID(CAMERA_I2C_ADDRESS);
 80039ee:	f000 fb1b 	bl	8004028 <ov2640_ReadID>
 80039f2:	9001      	str	r0, [sp, #4]
	printf("camera id = %x\r\n", idc);
 80039f4:	9901      	ldr	r1, [sp, #4]
 80039f6:	4805      	ldr	r0, [pc, #20]	; (8003a0c <_init_cam+0x24>)
 80039f8:	f000 fd96 	bl	8004528 <iprintf>

	ov2640_Init(CAMERA_I2C_ADDRESS, CAMERA_R640x480);
 80039fc:	2103      	movs	r1, #3
 80039fe:	2060      	movs	r0, #96	; 0x60
}
 8003a00:	b003      	add	sp, #12
 8003a02:	f85d eb04 	ldr.w	lr, [sp], #4
	ov2640_Init(CAMERA_I2C_ADDRESS, CAMERA_R640x480);
 8003a06:	f000 bab3 	b.w	8003f70 <ov2640_Init>
 8003a0a:	bf00      	nop
 8003a0c:	080055b8 	.word	0x080055b8

08003a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a12:	2400      	movs	r4, #0
{
 8003a14:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a16:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8003a1a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a1e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a22:	e9cd 4405 	strd	r4, r4, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <SystemClock_Config+0xa4>)
 8003a28:	9400      	str	r4, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a2a:	9402      	str	r4, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a30:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003a34:	6411      	str	r1, [r2, #64]	; 0x40
 8003a36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a38:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003a3c:	9200      	str	r2, [sp, #0]
 8003a3e:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a40:	9401      	str	r4, [sp, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003a52:	2203      	movs	r2, #3
 8003a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a58:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a62:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a66:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a68:	2204      	movs	r2, #4
 8003a6a:	23a8      	movs	r3, #168	; 0xa8
 8003a6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a70:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a72:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a74:	900b      	str	r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a76:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a78:	a808      	add	r0, sp, #32
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a7a:	260f      	movs	r6, #15
 8003a7c:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a7e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a82:	910c      	str	r1, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a84:	9d01      	ldr	r5, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a86:	f7fe f9e3 	bl	8001e50 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a8a:	e9cd 6702 	strd	r6, r7, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a92:	a802      	add	r0, sp, #8
 8003a94:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a96:	2600      	movs	r6, #0
 8003a98:	f44f 57a0 	mov.w	r7, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a9c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003aa2:	f7fe fc43 	bl	800232c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7fe fbb6 	bl	800221c <HAL_RCC_MCOConfig>
}
 8003ab0:	b015      	add	sp, #84	; 0x54
 8003ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40007000 	.word	0x40007000

08003abc <main>:
{
 8003abc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f04f 0a00 	mov.w	sl, #0
{
 8003ac4:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8003ac6:	f7fc fd73 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 8003aca:	f7ff ffa1 	bl	8003a10 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ace:	e9cd aa0a 	strd	sl, sl, [sp, #40]	; 0x28
 8003ad2:	e9cd aa0c 	strd	sl, sl, [sp, #48]	; 0x30

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ad6:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8003e20 <main+0x364>
 8003ada:	f8cd a008 	str.w	sl, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ade:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ae2:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003ae6:	48b9      	ldr	r0, [pc, #740]	; (8003dcc <main+0x310>)
  hdcmi.Instance = DCMI;
 8003ae8:	4fb9      	ldr	r7, [pc, #740]	; (8003dd0 <main+0x314>)
 8003aea:	f8df 8338 	ldr.w	r8, [pc, #824]	; 8003e24 <main+0x368>
			printf("rx size=%d	\r\n", size);
 8003aee:	f8df b338 	ldr.w	fp, [pc, #824]	; 8003e28 <main+0x36c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003af2:	f043 0310 	orr.w	r3, r3, #16
 8003af6:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003afa:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	9302      	str	r3, [sp, #8]
 8003b04:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b06:	f8cd a00c 	str.w	sl, [sp, #12]
 8003b0a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b0e:	f043 0320 	orr.w	r3, r3, #32
 8003b12:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003b16:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b22:	f8cd a010 	str.w	sl, [sp, #16]
 8003b26:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2e:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003b32:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	9304      	str	r3, [sp, #16]
 8003b3c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b3e:	f8cd a014 	str.w	sl, [sp, #20]
 8003b42:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b46:	f043 0304 	orr.w	r3, r3, #4
 8003b4a:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003b4e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	9305      	str	r3, [sp, #20]
 8003b58:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5a:	f8cd a018 	str.w	sl, [sp, #24]
 8003b5e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003b6a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	9306      	str	r3, [sp, #24]
 8003b74:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b76:	f8cd a01c 	str.w	sl, [sp, #28]
 8003b7a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b7e:	f043 0302 	orr.w	r3, r3, #2
 8003b82:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003b86:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	9307      	str	r3, [sp, #28]
 8003b90:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b92:	f8cd a020 	str.w	sl, [sp, #32]
 8003b96:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003b9a:	f043 0308 	orr.w	r3, r3, #8
 8003b9e:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003ba2:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	9308      	str	r3, [sp, #32]
 8003bac:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bae:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003bb2:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bba:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003bbe:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003bc6:	4652      	mov	r2, sl
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bc8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003bca:	210c      	movs	r1, #12
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003bce:	f7fd fc1b 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003bd2:	4652      	mov	r2, sl
 8003bd4:	487f      	ldr	r0, [pc, #508]	; (8003dd4 <main+0x318>)
 8003bd6:	2104      	movs	r1, #4
 8003bd8:	f7fd fc16 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8003bdc:	4652      	mov	r2, sl
 8003bde:	487e      	ldr	r0, [pc, #504]	; (8003dd8 <main+0x31c>)
 8003be0:	2102      	movs	r1, #2
 8003be2:	f7fd fc11 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8003be6:	4652      	mov	r2, sl
 8003be8:	487c      	ldr	r0, [pc, #496]	; (8003ddc <main+0x320>)
 8003bea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8003bee:	f7fd fc0b 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8003bf2:	4652      	mov	r2, sl
 8003bf4:	487a      	ldr	r0, [pc, #488]	; (8003de0 <main+0x324>)
 8003bf6:	2108      	movs	r1, #8
 8003bf8:	f7fd fc06 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003bfc:	2400      	movs	r4, #0
 8003bfe:	2500      	movs	r5, #0
 8003c00:	220c      	movs	r2, #12
 8003c02:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c04:	4871      	ldr	r0, [pc, #452]	; (8003dcc <main+0x310>)
 8003c06:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c0c:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c10:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c12:	f7fd fae9 	bl	80011e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c16:	2240      	movs	r2, #64	; 0x40
 8003c18:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c1a:	4872      	ldr	r0, [pc, #456]	; (8003de4 <main+0x328>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c1c:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c1e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c24:	f7fd fae0 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c28:	2204      	movs	r2, #4
 8003c2a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c2c:	4869      	ldr	r0, [pc, #420]	; (8003dd4 <main+0x318>)
 8003c2e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c30:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003c34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c38:	f7fd fad6 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c40:	4865      	ldr	r0, [pc, #404]	; (8003dd8 <main+0x31c>)
 8003c42:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c44:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003c48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4c:	f7fd facc 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c54:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c56:	4862      	ldr	r0, [pc, #392]	; (8003de0 <main+0x324>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c58:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c5a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c60:	f7fd fac2 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003c64:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003c68:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c6a:	485c      	ldr	r0, [pc, #368]	; (8003ddc <main+0x320>)
 8003c6c:	4e5e      	ldr	r6, [pc, #376]	; (8003de8 <main+0x32c>)
 8003c6e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003c70:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003c74:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c78:	f7fd fab6 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c80:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c82:	485a      	ldr	r0, [pc, #360]	; (8003dec <main+0x330>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c84:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c88:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c8a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003c8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c92:	f7fd faa9 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c96:	2208      	movs	r2, #8
 8003c98:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c9a:	4851      	ldr	r0, [pc, #324]	; (8003de0 <main+0x324>)
 8003c9c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c9e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003ca2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ca6:	f7fd fa9f 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003caa:	2238      	movs	r2, #56	; 0x38
 8003cac:	2302      	movs	r3, #2
 8003cae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb2:	4849      	ldr	r0, [pc, #292]	; (8003dd8 <main+0x31c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cba:	2405      	movs	r4, #5
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003cbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cc0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc2:	f7fd fa91 	bl	80011e8 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cc6:	f8cd a004 	str.w	sl, [sp, #4]
 8003cca:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003cce:	4c48      	ldr	r4, [pc, #288]	; (8003df0 <main+0x334>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cd4:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003cd8:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003cdc:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8003e2c <main+0x370>
 8003ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003ce4:	4652      	mov	r2, sl
 8003ce6:	4651      	mov	r1, sl
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ce8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003cea:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cec:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003cee:	f7fc fcb1 	bl	8000654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003cf2:	2039      	movs	r0, #57	; 0x39
 8003cf4:	f7fc fce6 	bl	80006c4 <HAL_NVIC_EnableIRQ>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003cf8:	483e      	ldr	r0, [pc, #248]	; (8003df4 <main+0x338>)
  Timing.AddressHoldTime = 4;
  Timing.DataSetupTime = 4;
  Timing.BusTurnAroundDuration = 4;
  Timing.CLKDivision = 4;
  Timing.DataLatency = 4;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003cfa:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003cfe:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003d02:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003d04:	6044      	str	r4, [r0, #4]
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK2;
 8003d06:	2302      	movs	r3, #2
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003d08:	2410      	movs	r4, #16
  Timing.AddressSetupTime = 4;
 8003d0a:	2504      	movs	r5, #4
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003d0c:	4652      	mov	r2, sl
 8003d0e:	a90a      	add	r1, sp, #40	; 0x28
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK2;
 8003d10:	6083      	str	r3, [r0, #8]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003d12:	6144      	str	r4, [r0, #20]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  Timing.AddressSetupTime = 4;
 8003d18:	2404      	movs	r4, #4
 8003d1a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003d1e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8003d22:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003d26:	e9c0 aa03 	strd	sl, sl, [r0, #12]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003d2a:	e9c0 aa06 	strd	sl, sl, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003d2e:	e9c0 aa08 	strd	sl, sl, [r0, #32]
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003d32:	e9c0 aa0b 	strd	sl, sl, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003d36:	e9c0 aa0d 	strd	sl, sl, [r0, #52]	; 0x34
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003d3a:	f8c0 a044 	str.w	sl, [r0, #68]	; 0x44
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003d3e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003d40:	f7fe fbb2 	bl	80024a8 <HAL_SRAM_Init>
  huart1.Instance = USART1;
 8003d44:	482c      	ldr	r0, [pc, #176]	; (8003df8 <main+0x33c>)
 8003d46:	492d      	ldr	r1, [pc, #180]	; (8003dfc <main+0x340>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d48:	f8c0 a008 	str.w	sl, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8003d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d50:	230c      	movs	r3, #12
  huart1.Init.BaudRate = 115200;
 8003d52:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d56:	e9c0 aa03 	strd	sl, sl, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d5a:	e9c0 aa06 	strd	sl, sl, [r0, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d5e:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d60:	f7fe fbce 	bl	8002500 <HAL_UART_Init>
  hdcmi.Instance = DCMI;
 8003d64:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <main+0x344>)
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8003d66:	f8c7 a004 	str.w	sl, [r7, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003d6a:	2320      	movs	r3, #32
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003d6c:	4638      	mov	r0, r7
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8003d6e:	e9c7 aa03 	strd	sl, sl, [r7, #12]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003d72:	e9c7 aa05 	strd	sl, sl, [r7, #20]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8003d76:	f8c7 a020 	str.w	sl, [r7, #32]
  hdcmi.Instance = DCMI;
 8003d7a:	603a      	str	r2, [r7, #0]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003d7e:	f7fc fdd7 	bl	8000930 <HAL_DCMI_Init>
  hi2c2.Instance = I2C2;
 8003d82:	4820      	ldr	r0, [pc, #128]	; (8003e04 <main+0x348>)
 8003d84:	4920      	ldr	r1, [pc, #128]	; (8003e08 <main+0x34c>)
  hi2c2.Init.ClockSpeed = 100000;
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <main+0x350>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d88:	f8c0 a008 	str.w	sl, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 8003d90:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d94:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003d96:	e9c0 aa05 	strd	sl, sl, [r0, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d9a:	e9c0 aa07 	strd	sl, sl, [r0, #28]
  hi2c2.Init.OwnAddress1 = 0;
 8003d9e:	f8c0 a00c 	str.w	sl, [r0, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003da2:	f7fd fd19 	bl	80017d8 <HAL_I2C_Init>
	printf("W5300 Camera Test\r\n");
 8003da6:	481a      	ldr	r0, [pc, #104]	; (8003e10 <main+0x354>)
 8003da8:	4c1a      	ldr	r4, [pc, #104]	; (8003e14 <main+0x358>)
 8003daa:	4d1b      	ldr	r5, [pc, #108]	; (8003e18 <main+0x35c>)
 8003dac:	f000 fc42 	bl	8004634 <puts>
	_init_cam();
 8003db0:	f7ff fe1a 	bl	80039e8 <_init_cam>
	_InitW5300();
 8003db4:	f7ff fd7c 	bl	80038b0 <_InitW5300>

void CameraStat(void)
{
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)&FrameBuffer, _IMAGE_SIZE_X*_UDP_TX_BUF_RATE);
 8003db8:	4651      	mov	r1, sl
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <main+0x360>)
			ret = recv(sn, buf, size);
 8003dbc:	f8df a070 	ldr.w	sl, [pc, #112]	; 8003e30 <main+0x374>
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003dc6:	f7fc fceb 	bl	80007a0 <HAL_DCMI_Start_DMA>
 8003dca:	e033      	b.n	8003e34 <main+0x378>
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	20000c40 	.word	0x20000c40
 8003dd4:	40020800 	.word	0x40020800
 8003dd8:	40020400 	.word	0x40020400
 8003ddc:	40021800 	.word	0x40021800
 8003de0:	40020c00 	.word	0x40020c00
 8003de4:	40021400 	.word	0x40021400
 8003de8:	20000118 	.word	0x20000118
 8003dec:	40020000 	.word	0x40020000
 8003df0:	a0000104 	.word	0xa0000104
 8003df4:	20000bf0 	.word	0x20000bf0
 8003df8:	20000c80 	.word	0x20000c80
 8003dfc:	40011000 	.word	0x40011000
 8003e00:	50050000 	.word	0x50050000
 8003e04:	2000013c 	.word	0x2000013c
 8003e08:	40005800 	.word	0x40005800
 8003e0c:	000186a0 	.word	0x000186a0
 8003e10:	08005604 	.word	0x08005604
 8003e14:	20000124 	.word	0x20000124
 8003e18:	2000011c 	.word	0x2000011c
 8003e1c:	200001f0 	.word	0x200001f0
 8003e20:	40023800 	.word	0x40023800
 8003e24:	20000038 	.word	0x20000038
 8003e28:	080055f4 	.word	0x080055f4
 8003e2c:	20000120 	.word	0x20000120
 8003e30:	20000cc4 	.word	0x20000cc4
   switch(getSn_SR(sn))
 8003e34:	f44f 7002 	mov.w	r0, #520	; 0x208
		ProcessCamTcps(_CAM_SOCK_NUM, ethBuf0, dDestport);
 8003e38:	f8d8 7000 	ldr.w	r7, [r8]
   switch(getSn_SR(sn))
 8003e3c:	f7fe fcf8 	bl	8002830 <WIZCHIP_READ>
 8003e40:	b2c0      	uxtb	r0, r0
 8003e42:	281c      	cmp	r0, #28
 8003e44:	d831      	bhi.n	8003eaa <main+0x3ee>
 8003e46:	e8df f000 	tbb	[pc, r0]
 8003e4a:	305d      	.short	0x305d
 8003e4c:	30303030 	.word	0x30303030
 8003e50:	30303030 	.word	0x30303030
 8003e54:	30303030 	.word	0x30303030
 8003e58:	30303030 	.word	0x30303030
 8003e5c:	30305930 	.word	0x30305930
 8003e60:	30300f30 	.word	0x30300f30
 8003e64:	3030      	.short	0x3030
 8003e66:	3e          	.byte	0x3e
 8003e67:	00          	.byte	0x00
         if(getSn_IR(sn) & Sn_IR_CON)
 8003e68:	f240 2006 	movw	r0, #518	; 0x206
 8003e6c:	f7fe fce0 	bl	8002830 <WIZCHIP_READ>
 8003e70:	07c3      	lsls	r3, r0, #31
 8003e72:	d44e      	bmi.n	8003f12 <main+0x456>
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fe fd15 	bl	80028a4 <getSn_RX_RSR>
 8003e7a:	b287      	uxth	r7, r0
 8003e7c:	b1af      	cbz	r7, 8003eaa <main+0x3ee>
			if(size > ETH_MAX_BUF_SIZE) size = ETH_MAX_BUF_SIZE;
 8003e7e:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 8003e82:	bf28      	it	cs
 8003e84:	f44f 6700 	movcs.w	r7, #2048	; 0x800
			ret = recv(sn, buf, size);
 8003e88:	463a      	mov	r2, r7
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7ff f8e5 	bl	800305c <recv>
			cmd = buf[0];
 8003e92:	4b30      	ldr	r3, [pc, #192]	; (8003f54 <main+0x498>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
            if(cmd == _CMD_LED)
 8003e96:	2bf0      	cmp	r3, #240	; 0xf0
 8003e98:	d041      	beq.n	8003f1e <main+0x462>
            else if(cmd == _CMD_CAM_START)
 8003e9a:	2bfe      	cmp	r3, #254	; 0xfe
 8003e9c:	d04b      	beq.n	8003f36 <main+0x47a>
            else if(cmd == _CMD_CAM_STOP)
 8003e9e:	2bfd      	cmp	r3, #253	; 0xfd
 8003ea0:	d050      	beq.n	8003f44 <main+0x488>
			printf("rx size=%d	\r\n", size);
 8003ea2:	4639      	mov	r1, r7
 8003ea4:	4658      	mov	r0, fp
 8003ea6:	f000 fb3f 	bl	8004528 <iprintf>
	  	if(gCameraFrameFlag>0)
 8003eaa:	6833      	ldr	r3, [r6, #0]
 8003eac:	b98b      	cbnz	r3, 8003ed2 <main+0x416>
		if(gCameraLineFlag>0)
 8003eae:	682b      	ldr	r3, [r5, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0bf      	beq.n	8003e34 <main+0x378>
			gCameraLineFlag = 0;
 8003eb4:	2300      	movs	r3, #0
			CamImagTransferLine(_CMD_CAM_LINE, gLineCnt);
 8003eb6:	6820      	ldr	r0, [r4, #0]
			gCameraLineFlag = 0;
 8003eb8:	602b      	str	r3, [r5, #0]
			CamImagTransferLine(_CMD_CAM_LINE, gLineCnt);
 8003eba:	f7ff fc7f 	bl	80037bc <CamImagTransferLine.constprop.0>
			gLineCnt++;
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	e7b6      	b.n	8003e34 <main+0x378>
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7fe ffd8 	bl	8002e7c <disconnect>
	  	if(gCameraFrameFlag>0)
 8003ecc:	6833      	ldr	r3, [r6, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ed      	beq.n	8003eae <main+0x3f2>
	  		CamImagTransferFrame(_CMD_CAM_FRAME, gLineCnt);
 8003ed2:	6820      	ldr	r0, [r4, #0]
	  		gCameraFrameFlag = 0;
 8003ed4:	2700      	movs	r7, #0
 8003ed6:	6037      	str	r7, [r6, #0]
	  		CamImagTransferFrame(_CMD_CAM_FRAME, gLineCnt);
 8003ed8:	f7ff fc4e 	bl	8003778 <CamImagTransferFrame.constprop.0>
	  		printf(">%d, %d\r\n", gFrameCnt, gLineCnt);
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	f8d9 1000 	ldr.w	r1, [r9]
 8003ee2:	481d      	ldr	r0, [pc, #116]	; (8003f58 <main+0x49c>)
 8003ee4:	f000 fb20 	bl	8004528 <iprintf>
	  		gFrameCnt++;
 8003ee8:	f8d9 3000 	ldr.w	r3, [r9]
		if(gCameraLineFlag>0)
 8003eec:	682a      	ldr	r2, [r5, #0]
	  		gLineCnt = 0;
 8003eee:	6027      	str	r7, [r4, #0]
	  		gFrameCnt++;
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f8c9 3000 	str.w	r3, [r9]
		if(gCameraLineFlag>0)
 8003ef6:	2a00      	cmp	r2, #0
 8003ef8:	d09c      	beq.n	8003e34 <main+0x378>
 8003efa:	e7db      	b.n	8003eb4 <main+0x3f8>
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8003efc:	2000      	movs	r0, #0
 8003efe:	f7fe ff85 	bl	8002e0c <listen>
 8003f02:	e7d2      	b.n	8003eaa <main+0x3ee>
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8003f04:	2300      	movs	r3, #0
 8003f06:	b2ba      	uxth	r2, r7
 8003f08:	4618      	mov	r0, r3
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	f7fe fed6 	bl	8002cbc <socket>
 8003f10:	e7cb      	b.n	8003eaa <main+0x3ee>
			setSn_IR(sn,Sn_IR_CON);
 8003f12:	2101      	movs	r1, #1
 8003f14:	f240 2006 	movw	r0, #518	; 0x206
 8003f18:	f7fe fc84 	bl	8002824 <WIZCHIP_WRITE>
 8003f1c:	e7aa      	b.n	8003e74 <main+0x3b8>
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <main+0x498>)
 8003f20:	885a      	ldrh	r2, [r3, #2]
 8003f22:	ba52      	rev16	r2, r2
 8003f24:	b292      	uxth	r2, r2
            	if(para == 0)
 8003f26:	b10a      	cbz	r2, 8003f2c <main+0x470>
            	else if(para == 1)
 8003f28:	2a01      	cmp	r2, #1
 8003f2a:	d1ba      	bne.n	8003ea2 <main+0x3e6>
            		Led1On();
 8003f2c:	480b      	ldr	r0, [pc, #44]	; (8003f5c <main+0x4a0>)
 8003f2e:	2104      	movs	r1, #4
 8003f30:	f7fd fa6a 	bl	8001408 <HAL_GPIO_WritePin>
 8003f34:	e7b5      	b.n	8003ea2 <main+0x3e6>
            	gImgTransferFlag = 1;
 8003f36:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <main+0x4a4>)
            	printf("Cam Stream Start\r\n");
 8003f38:	480a      	ldr	r0, [pc, #40]	; (8003f64 <main+0x4a8>)
            	gImgTransferFlag = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	6013      	str	r3, [r2, #0]
            	printf("Cam Stream Start\r\n");
 8003f3e:	f000 fb79 	bl	8004634 <puts>
 8003f42:	e7ae      	b.n	8003ea2 <main+0x3e6>
            	gImgTransferFlag = 0;
 8003f44:	4a06      	ldr	r2, [pc, #24]	; (8003f60 <main+0x4a4>)
            	printf("Cam Stream Stop\r\n");
 8003f46:	4808      	ldr	r0, [pc, #32]	; (8003f68 <main+0x4ac>)
            	gImgTransferFlag = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6013      	str	r3, [r2, #0]
            	printf("Cam Stream Stop\r\n");
 8003f4c:	f000 fb72 	bl	8004634 <puts>
 8003f50:	e7a7      	b.n	8003ea2 <main+0x3e6>
 8003f52:	bf00      	nop
 8003f54:	20000cc4 	.word	0x20000cc4
 8003f58:	08005618 	.word	0x08005618
 8003f5c:	40020800 	.word	0x40020800
 8003f60:	2000003c 	.word	0x2000003c
 8003f64:	080055cc 	.word	0x080055cc
 8003f68:	080055e0 	.word	0x080055e0

08003f6c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop

08003f70 <ov2640_Init>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  resolution: Camera resolution
  * @retval None
  */
void ov2640_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
  
  /* Initialize I2C */
  CAMERA_IO_Init();
  
  /* Prepare the camera to be configured */
  CAMERA_IO_Write(DeviceAddr, OV2640_DSP_RA_DLMT, 0x01);
 8003f72:	b2c4      	uxtb	r4, r0
{
 8003f74:	460d      	mov	r5, r1
  CAMERA_IO_Init();
 8003f76:	f7ff fd19 	bl	80039ac <CAMERA_IO_Init>
  CAMERA_IO_Write(DeviceAddr, OV2640_DSP_RA_DLMT, 0x01);
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	21ff      	movs	r1, #255	; 0xff
 8003f80:	f7ff fce4 	bl	800394c <CAMERA_IO_Write>
  CAMERA_IO_Write(DeviceAddr, OV2640_SENSOR_COM7, 0x80);
 8003f84:	4620      	mov	r0, r4
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	2112      	movs	r1, #18
 8003f8a:	f7ff fcdf 	bl	800394c <CAMERA_IO_Write>
  CAMERA_Delay(200);
 8003f8e:	20c8      	movs	r0, #200	; 0xc8
 8003f90:	f7ff fd0a 	bl	80039a8 <CAMERA_Delay>
  
  /* Initialize OV2640 */
  switch (resolution)
 8003f94:	2d03      	cmp	r5, #3
 8003f96:	d811      	bhi.n	8003fbc <ov2640_Init+0x4c>
 8003f98:	e8df f005 	tbb	[pc, r5]
 8003f9c:	0211202f 	.word	0x0211202f
 8003fa0:	4d1d      	ldr	r5, [pc, #116]	; (8004018 <ov2640_Init+0xa8>)
 8003fa2:	f505 76ed 	add.w	r6, r5, #474	; 0x1da
    }
  case CAMERA_R640x480:
    {
      for(index=0; index<(sizeof(OV2640_VGA)/2); index++)
      {
        CAMERA_IO_Write(DeviceAddr, OV2640_VGA[index][0], OV2640_VGA[index][1]);
 8003fa6:	786a      	ldrb	r2, [r5, #1]
 8003fa8:	f815 1b02 	ldrb.w	r1, [r5], #2
 8003fac:	4620      	mov	r0, r4
 8003fae:	f7ff fccd 	bl	800394c <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8003fb2:	2002      	movs	r0, #2
 8003fb4:	f7ff fcf8 	bl	80039a8 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV2640_VGA)/2); index++)
 8003fb8:	42b5      	cmp	r5, r6
 8003fba:	d1f4      	bne.n	8003fa6 <ov2640_Init+0x36>
  default:
    {
      break;
    }
  }
}
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	4d17      	ldr	r5, [pc, #92]	; (800401c <ov2640_Init+0xac>)
 8003fc0:	f505 76ed 	add.w	r6, r5, #474	; 0x1da
        CAMERA_IO_Write(DeviceAddr, OV2640_480x272[index][0], OV2640_480x272[index][1]);
 8003fc4:	786a      	ldrb	r2, [r5, #1]
 8003fc6:	f815 1b02 	ldrb.w	r1, [r5], #2
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7ff fcbe 	bl	800394c <CAMERA_IO_Write>
        CAMERA_Delay(2);
 8003fd0:	2002      	movs	r0, #2
 8003fd2:	f7ff fce9 	bl	80039a8 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV2640_480x272)/2); index++)
 8003fd6:	42b5      	cmp	r5, r6
 8003fd8:	d1f4      	bne.n	8003fc4 <ov2640_Init+0x54>
}
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	4d10      	ldr	r5, [pc, #64]	; (8004020 <ov2640_Init+0xb0>)
 8003fde:	f505 76dc 	add.w	r6, r5, #440	; 0x1b8
        CAMERA_IO_Write(DeviceAddr, OV2640_QVGA[index][0], OV2640_QVGA[index][1]);
 8003fe2:	786a      	ldrb	r2, [r5, #1]
 8003fe4:	f815 1b02 	ldrb.w	r1, [r5], #2
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7ff fcaf 	bl	800394c <CAMERA_IO_Write>
        CAMERA_Delay(1);
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f7ff fcda 	bl	80039a8 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV2640_QVGA)/2); index++)
 8003ff4:	42b5      	cmp	r5, r6
 8003ff6:	d1f4      	bne.n	8003fe2 <ov2640_Init+0x72>
}
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
 8003ffa:	4d0a      	ldr	r5, [pc, #40]	; (8004024 <ov2640_Init+0xb4>)
 8003ffc:	f505 76dc 	add.w	r6, r5, #440	; 0x1b8
        CAMERA_IO_Write(DeviceAddr, OV2640_QQVGA[index][0], OV2640_QQVGA[index][1]);
 8004000:	786a      	ldrb	r2, [r5, #1]
 8004002:	f815 1b02 	ldrb.w	r1, [r5], #2
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff fca0 	bl	800394c <CAMERA_IO_Write>
        CAMERA_Delay(1);
 800400c:	2001      	movs	r0, #1
 800400e:	f7ff fccb 	bl	80039a8 <CAMERA_Delay>
      for(index=0; index<(sizeof(OV2640_QQVGA)/2); index++)
 8004012:	42ae      	cmp	r6, r5
 8004014:	d1f4      	bne.n	8004000 <ov2640_Init+0x90>
}
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	08005b70 	.word	0x08005b70
 800401c:	08005624 	.word	0x08005624
 8004020:	080059b8 	.word	0x080059b8
 8004024:	08005800 	.word	0x08005800

08004028 <ov2640_ReadID>:
  * @brief  Read the OV2640 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV2640 ID
  */
uint16_t ov2640_ReadID(uint16_t DeviceAddr)
{
 8004028:	b500      	push	{lr}
 800402a:	b083      	sub	sp, #12
  /* Initialize I2C */
  CAMERA_IO_Init();
  
  /* Prepare the sensor to read the Camera ID */
  CAMERA_IO_Write(DeviceAddr, OV2640_DSP_RA_DLMT, 0x01);
 800402c:	b2c0      	uxtb	r0, r0
 800402e:	9001      	str	r0, [sp, #4]
  CAMERA_IO_Init();
 8004030:	f7ff fcbc 	bl	80039ac <CAMERA_IO_Init>
  CAMERA_IO_Write(DeviceAddr, OV2640_DSP_RA_DLMT, 0x01);
 8004034:	9801      	ldr	r0, [sp, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	21ff      	movs	r1, #255	; 0xff
 800403a:	f7ff fc87 	bl	800394c <CAMERA_IO_Write>
  
  /* Get the camera ID */
  return (CAMERA_IO_Read(DeviceAddr, OV2640_SENSOR_PIDH));
 800403e:	9801      	ldr	r0, [sp, #4]
 8004040:	210a      	movs	r1, #10
 8004042:	f7ff fc99 	bl	8003978 <CAMERA_IO_Read>
}
 8004046:	b280      	uxth	r0, r0
 8004048:	b003      	add	sp, #12
 800404a:	f85d fb04 	ldr.w	pc, [sp], #4
 800404e:	bf00      	nop

08004050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004050:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <HAL_MspInit+0x34>)
 8004054:	2100      	movs	r1, #0
 8004056:	9100      	str	r1, [sp, #0]
 8004058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
 8004060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004062:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004066:	9200      	str	r2, [sp, #0]
 8004068:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	9101      	str	r1, [sp, #4]
 800406c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004072:	641a      	str	r2, [r3, #64]	; 0x40
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800407e:	b002      	add	sp, #8
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800

08004088 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdcmi->Instance==DCMI)
 800408c:	6802      	ldr	r2, [r0, #0]
 800408e:	4b52      	ldr	r3, [pc, #328]	; (80041d8 <HAL_DCMI_MspInit+0x150>)
{
 8004090:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004092:	2600      	movs	r6, #0
  if(hdcmi->Instance==DCMI)
 8004094:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004096:	e9cd 6606 	strd	r6, r6, [sp, #24]
 800409a:	e9cd 6608 	strd	r6, r6, [sp, #32]
 800409e:	960a      	str	r6, [sp, #40]	; 0x28
  if(hdcmi->Instance==DCMI)
 80040a0:	d002      	beq.n	80040a8 <HAL_DCMI_MspInit+0x20>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80040a2:	b00d      	add	sp, #52	; 0x34
 80040a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 80040a8:	4b4c      	ldr	r3, [pc, #304]	; (80041dc <HAL_DCMI_MspInit+0x154>)
 80040aa:	9601      	str	r6, [sp, #4]
 80040ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_dcmi.Instance = DMA2_Stream1;
 80040ae:	4d4c      	ldr	r5, [pc, #304]	; (80041e0 <HAL_DCMI_MspInit+0x158>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34
 80040b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b8:	f002 0201 	and.w	r2, r2, #1
 80040bc:	9201      	str	r2, [sp, #4]
 80040be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040c0:	9602      	str	r6, [sp, #8]
 80040c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c4:	f042 0210 	orr.w	r2, r2, #16
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
 80040ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040cc:	f002 0210 	and.w	r2, r2, #16
 80040d0:	9202      	str	r2, [sp, #8]
 80040d2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d4:	9603      	str	r6, [sp, #12]
 80040d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
 80040de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e0:	f002 0201 	and.w	r2, r2, #1
 80040e4:	9203      	str	r2, [sp, #12]
 80040e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040e8:	9604      	str	r6, [sp, #16]
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	f042 0204 	orr.w	r2, r2, #4
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
 80040f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f4:	f002 0204 	and.w	r2, r2, #4
 80040f8:	9204      	str	r2, [sp, #16]
 80040fa:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fc:	9605      	str	r6, [sp, #20]
 80040fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004100:	f042 0202 	orr.w	r2, r2, #2
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 800410c:	f04f 0800 	mov.w	r8, #0
 8004110:	f04f 0900 	mov.w	r9, #0
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004114:	270d      	movs	r7, #13
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004116:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8004118:	2273      	movs	r2, #115	; 0x73
 800411a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800411c:	a906      	add	r1, sp, #24
 800411e:	4604      	mov	r4, r0
 8004120:	4830      	ldr	r0, [pc, #192]	; (80041e4 <HAL_DCMI_MspInit+0x15c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004122:	f8dd c014 	ldr.w	ip, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8004126:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800412a:	e9cd 8908 	strd	r8, r9, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800412e:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004130:	f7fd f85a 	bl	80011e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8004134:	2250      	movs	r2, #80	; 0x50
 8004136:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004138:	482b      	ldr	r0, [pc, #172]	; (80041e8 <HAL_DCMI_MspInit+0x160>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800413a:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800413e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004142:	e9cd 8908 	strd	r8, r9, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004146:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414a:	f7fd f84d 	bl	80011e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800414e:	f04f 0b02 	mov.w	fp, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004152:	4826      	ldr	r0, [pc, #152]	; (80041ec <HAL_DCMI_MspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004154:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004156:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004158:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800415c:	e9cd ab06 	strd	sl, fp, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004160:	f7fd f842 	bl	80011e8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004164:	4822      	ldr	r0, [pc, #136]	; (80041f0 <HAL_DCMI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004166:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004168:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800416a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800416e:	e9cd ab06 	strd	sl, fp, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004172:	f7fd f839 	bl	80011e8 <HAL_GPIO_Init>
    hdma_dcmi.Instance = DMA2_Stream1;
 8004176:	481f      	ldr	r0, [pc, #124]	; (80041f4 <HAL_DCMI_MspInit+0x16c>)
 8004178:	6028      	str	r0, [r5, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800417a:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800417e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004182:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004186:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800418a:	f44f 7980 	mov.w	r9, #256	; 0x100
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800418e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004192:	2204      	movs	r2, #4
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004194:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8004196:	4628      	mov	r0, r5
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004198:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800419c:	e9c5 ec04 	strd	lr, ip, [r5, #16]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80041a0:	e9c5 7906 	strd	r7, r9, [r5, #24]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80041a4:	e9c5 1208 	strd	r1, r2, [r5, #32]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041a8:	60ae      	str	r6, [r5, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80041aa:	60ee      	str	r6, [r5, #12]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80041ac:	f8c5 8004 	str.w	r8, [r5, #4]
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041b0:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80041b2:	f7fc fbf9 	bl	80009a8 <HAL_DMA_Init>
 80041b6:	b960      	cbnz	r0, 80041d2 <HAL_DCMI_MspInit+0x14a>
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80041b8:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80041ba:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80041bc:	4611      	mov	r1, r2
 80041be:	204e      	movs	r0, #78	; 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80041c0:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80041c2:	f7fc fa47 	bl	8000654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80041c6:	204e      	movs	r0, #78	; 0x4e
 80041c8:	f7fc fa7c 	bl	80006c4 <HAL_NVIC_EnableIRQ>
}
 80041cc:	b00d      	add	sp, #52	; 0x34
 80041ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Error_Handler();
 80041d2:	f7ff fecb 	bl	8003f6c <Error_Handler>
 80041d6:	e7ef      	b.n	80041b8 <HAL_DCMI_MspInit+0x130>
 80041d8:	50050000 	.word	0x50050000
 80041dc:	40023800 	.word	0x40023800
 80041e0:	20000190 	.word	0x20000190
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40020000 	.word	0x40020000
 80041ec:	40020800 	.word	0x40020800
 80041f0:	40020400 	.word	0x40020400
 80041f4:	40026428 	.word	0x40026428

080041f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041f8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C2)
 80041fa:	6802      	ldr	r2, [r0, #0]
 80041fc:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_I2C_MspInit+0x68>)
{
 80041fe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 8004202:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004204:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004208:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800420c:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C2)
 800420e:	d001      	beq.n	8004214 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004210:	b008      	add	sp, #32
 8004212:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004214:	4d13      	ldr	r5, [pc, #76]	; (8004264 <HAL_I2C_MspInit+0x6c>)
 8004216:	9400      	str	r4, [sp, #0]
 8004218:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421a:	4813      	ldr	r0, [pc, #76]	; (8004268 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	632b      	str	r3, [r5, #48]	; 0x30
 8004222:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800422a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800422e:	2312      	movs	r3, #18
 8004230:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004234:	2201      	movs	r2, #1
 8004236:	2303      	movs	r3, #3
 8004238:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800423e:	2304      	movs	r3, #4
 8004240:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004242:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004244:	f7fc ffd0 	bl	80011e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004248:	9401      	str	r4, [sp, #4]
 800424a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800424c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004250:	642b      	str	r3, [r5, #64]	; 0x40
 8004252:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	9b01      	ldr	r3, [sp, #4]
}
 800425c:	b008      	add	sp, #32
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	40005800 	.word	0x40005800
 8004264:	40023800 	.word	0x40023800
 8004268:	40020400 	.word	0x40020400

0800426c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800426c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800426e:	6801      	ldr	r1, [r0, #0]
 8004270:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <HAL_UART_MspInit+0x6c>)
{
 8004272:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004274:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 8004276:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800427c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004280:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 8004282:	d001      	beq.n	8004288 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004284:	b009      	add	sp, #36	; 0x24
 8004286:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004288:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004290:	4812      	ldr	r0, [pc, #72]	; (80042dc <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004292:	f041 0110 	orr.w	r1, r1, #16
 8004296:	6451      	str	r1, [r2, #68]	; 0x44
 8004298:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800429a:	f001 0110 	and.w	r1, r1, #16
 800429e:	9100      	str	r1, [sp, #0]
 80042a0:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6313      	str	r3, [r2, #48]	; 0x30
 80042ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042b4:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80042ba:	2200      	movs	r2, #0
 80042bc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042be:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80042c0:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80042c4:	2502      	movs	r5, #2
 80042c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80042ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ce:	f7fc ff8b 	bl	80011e8 <HAL_GPIO_Init>
}
 80042d2:	b009      	add	sp, #36	; 0x24
 80042d4:	bd30      	pop	{r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	40011000 	.word	0x40011000
 80042dc:	40020000 	.word	0x40020000

080042e0 <HAL_SRAM_MspInit>:
static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FSMC_Initialized) {
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <HAL_SRAM_MspInit+0x90>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	b102      	cbz	r2, 80042e8 <HAL_SRAM_MspInit+0x8>
 80042e6:	4770      	bx	lr
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80042e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ea:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_FSMC_CLK_ENABLE();
 80042ec:	4921      	ldr	r1, [pc, #132]	; (8004374 <HAL_SRAM_MspInit+0x94>)
 80042ee:	9201      	str	r2, [sp, #4]
  FSMC_Initialized = 1;
 80042f0:	2001      	movs	r0, #1
 80042f2:	6018      	str	r0, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80042f4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042f6:	4820      	ldr	r0, [pc, #128]	; (8004378 <HAL_SRAM_MspInit+0x98>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	638b      	str	r3, [r1, #56]	; 0x38
 80042fe:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004300:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004304:	2400      	movs	r4, #0
 8004306:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004308:	260c      	movs	r6, #12
  __HAL_RCC_FSMC_CLK_ENABLE();
 800430a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800430c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800430e:	f24f 023f 	movw	r2, #61503	; 0xf03f
 8004312:	2302      	movs	r3, #2
 8004314:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004318:	e9cd 4504 	strd	r4, r5, [sp, #16]
  __HAL_RCC_FSMC_CLK_ENABLE();
 800431c:	9f01      	ldr	r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800431e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004320:	f7fc ff62 	bl	80011e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004324:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004326:	f64f 7280 	movw	r2, #65408	; 0xff80
 800432a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800432c:	4813      	ldr	r0, [pc, #76]	; (800437c <HAL_SRAM_MspInit+0x9c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800432e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004330:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004334:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004338:	f7fc ff56 	bl	80011e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800433c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800433e:	f24c 7233 	movw	r2, #50995	; 0xc733
 8004342:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004344:	480e      	ldr	r0, [pc, #56]	; (8004380 <HAL_SRAM_MspInit+0xa0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004346:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800434c:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004350:	f7fc ff4a 	bl	80011e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004358:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800435a:	480a      	ldr	r0, [pc, #40]	; (8004384 <HAL_SRAM_MspInit+0xa4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800435c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800435e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004360:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004364:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004368:	f7fc ff3e 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800436c:	b009      	add	sp, #36	; 0x24
 800436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004370:	20000128 	.word	0x20000128
 8004374:	40023800 	.word	0x40023800
 8004378:	40021400 	.word	0x40021400
 800437c:	40021000 	.word	0x40021000
 8004380:	40020c00 	.word	0x40020c00
 8004384:	40021800 	.word	0x40021800

08004388 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004388:	e7fe      	b.n	8004388 <NMI_Handler>
 800438a:	bf00      	nop

0800438c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800438c:	e7fe      	b.n	800438c <HardFault_Handler>
 800438e:	bf00      	nop

08004390 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004390:	e7fe      	b.n	8004390 <MemManage_Handler>
 8004392:	bf00      	nop

08004394 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004394:	e7fe      	b.n	8004394 <BusFault_Handler>
 8004396:	bf00      	nop

08004398 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004398:	e7fe      	b.n	8004398 <UsageFault_Handler>
 800439a:	bf00      	nop

0800439c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <DebugMon_Handler>:
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop

080043a4 <PendSV_Handler>:
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop

080043a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043a8:	f7fc b91c 	b.w	80005e4 <HAL_IncTick>

080043ac <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80043ac:	4801      	ldr	r0, [pc, #4]	; (80043b4 <DMA2_Stream1_IRQHandler+0x8>)
 80043ae:	f7fc bbe5 	b.w	8000b7c <HAL_DMA_IRQHandler>
 80043b2:	bf00      	nop
 80043b4:	20000190 	.word	0x20000190

080043b8 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <DCMI_IRQHandler+0x8>)
 80043ba:	f7fc ba6d 	b.w	8000898 <HAL_DCMI_IRQHandler>
 80043be:	bf00      	nop
 80043c0:	20000c40 	.word	0x20000c40

080043c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043c4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c6:	1e16      	subs	r6, r2, #0
 80043c8:	dd07      	ble.n	80043da <_read+0x16>
 80043ca:	460c      	mov	r4, r1
 80043cc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80043ce:	f3af 8000 	nop.w
 80043d2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d6:	42a5      	cmp	r5, r4
 80043d8:	d1f9      	bne.n	80043ce <_read+0xa>
	}

return len;
}
 80043da:	4630      	mov	r0, r6
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
 80043de:	bf00      	nop

080043e0 <_close>:
}

int _close(int file)
{
	return -1;
}
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop

080043e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80043e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ec:	604b      	str	r3, [r1, #4]
	return 0;
}
 80043ee:	2000      	movs	r0, #0
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop

080043f4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80043f4:	2001      	movs	r0, #1
 80043f6:	4770      	bx	lr

080043f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80043f8:	2000      	movs	r0, #0
 80043fa:	4770      	bx	lr

080043fc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043fc:	490c      	ldr	r1, [pc, #48]	; (8004430 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043fe:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004400:	680b      	ldr	r3, [r1, #0]
{
 8004402:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004404:	4c0c      	ldr	r4, [pc, #48]	; (8004438 <_sbrk+0x3c>)
 8004406:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004408:	b12b      	cbz	r3, 8004416 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800440a:	4418      	add	r0, r3
 800440c:	4290      	cmp	r0, r2
 800440e:	d807      	bhi.n	8004420 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004410:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004412:	4618      	mov	r0, r3
 8004414:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <_sbrk+0x40>)
 8004418:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800441a:	4418      	add	r0, r3
 800441c:	4290      	cmp	r0, r2
 800441e:	d9f7      	bls.n	8004410 <_sbrk+0x14>
    errno = ENOMEM;
 8004420:	f000 f842 	bl	80044a8 <__errno>
 8004424:	230c      	movs	r3, #12
 8004426:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd10      	pop	{r4, pc}
 8004430:	2000012c 	.word	0x2000012c
 8004434:	20020000 	.word	0x20020000
 8004438:	00000400 	.word	0x00000400
 800443c:	200014d8 	.word	0x200014d8

08004440 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004440:	4a03      	ldr	r2, [pc, #12]	; (8004450 <SystemInit+0x10>)
 8004442:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004446:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800444a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800448c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004458:	480d      	ldr	r0, [pc, #52]	; (8004490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800445a:	490e      	ldr	r1, [pc, #56]	; (8004494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800445c:	4a0e      	ldr	r2, [pc, #56]	; (8004498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800445e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004460:	e002      	b.n	8004468 <LoopCopyDataInit>

08004462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004466:	3304      	adds	r3, #4

08004468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800446a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800446c:	d3f9      	bcc.n	8004462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800446e:	4a0b      	ldr	r2, [pc, #44]	; (800449c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004470:	4c0b      	ldr	r4, [pc, #44]	; (80044a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004474:	e001      	b.n	800447a <LoopFillZerobss>

08004476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004478:	3204      	adds	r2, #4

0800447a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800447a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800447c:	d3fb      	bcc.n	8004476 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800447e:	f7ff ffdf 	bl	8004440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004482:	f000 f817 	bl	80044b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004486:	f7ff fb19 	bl	8003abc <main>
  bx  lr    
 800448a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800448c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004494:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8004498:	08005e0c 	.word	0x08005e0c
  ldr r2, =_sbss
 800449c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80044a0:	200014d4 	.word	0x200014d4

080044a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a4:	e7fe      	b.n	80044a4 <ADC_IRQHandler>
	...

080044a8 <__errno>:
 80044a8:	4b01      	ldr	r3, [pc, #4]	; (80044b0 <__errno+0x8>)
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	2000006c 	.word	0x2000006c

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4d0d      	ldr	r5, [pc, #52]	; (80044ec <__libc_init_array+0x38>)
 80044b8:	4c0d      	ldr	r4, [pc, #52]	; (80044f0 <__libc_init_array+0x3c>)
 80044ba:	1b64      	subs	r4, r4, r5
 80044bc:	10a4      	asrs	r4, r4, #2
 80044be:	2600      	movs	r6, #0
 80044c0:	42a6      	cmp	r6, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	4d0b      	ldr	r5, [pc, #44]	; (80044f4 <__libc_init_array+0x40>)
 80044c6:	4c0c      	ldr	r4, [pc, #48]	; (80044f8 <__libc_init_array+0x44>)
 80044c8:	f000 fffa 	bl	80054c0 <_init>
 80044cc:	1b64      	subs	r4, r4, r5
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	2600      	movs	r6, #0
 80044d2:	42a6      	cmp	r6, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044dc:	4798      	blx	r3
 80044de:	3601      	adds	r6, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e6:	4798      	blx	r3
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	08005e04 	.word	0x08005e04
 80044f0:	08005e04 	.word	0x08005e04
 80044f4:	08005e04 	.word	0x08005e04
 80044f8:	08005e08 	.word	0x08005e08

080044fc <memcpy>:
 80044fc:	440a      	add	r2, r1
 80044fe:	4291      	cmp	r1, r2
 8004500:	f100 33ff 	add.w	r3, r0, #4294967295
 8004504:	d100      	bne.n	8004508 <memcpy+0xc>
 8004506:	4770      	bx	lr
 8004508:	b510      	push	{r4, lr}
 800450a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800450e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004512:	4291      	cmp	r1, r2
 8004514:	d1f9      	bne.n	800450a <memcpy+0xe>
 8004516:	bd10      	pop	{r4, pc}

08004518 <memset>:
 8004518:	4402      	add	r2, r0
 800451a:	4603      	mov	r3, r0
 800451c:	4293      	cmp	r3, r2
 800451e:	d100      	bne.n	8004522 <memset+0xa>
 8004520:	4770      	bx	lr
 8004522:	f803 1b01 	strb.w	r1, [r3], #1
 8004526:	e7f9      	b.n	800451c <memset+0x4>

08004528 <iprintf>:
 8004528:	b40f      	push	{r0, r1, r2, r3}
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <iprintf+0x2c>)
 800452c:	b513      	push	{r0, r1, r4, lr}
 800452e:	681c      	ldr	r4, [r3, #0]
 8004530:	b124      	cbz	r4, 800453c <iprintf+0x14>
 8004532:	69a3      	ldr	r3, [r4, #24]
 8004534:	b913      	cbnz	r3, 800453c <iprintf+0x14>
 8004536:	4620      	mov	r0, r4
 8004538:	f000 fa5e 	bl	80049f8 <__sinit>
 800453c:	ab05      	add	r3, sp, #20
 800453e:	9a04      	ldr	r2, [sp, #16]
 8004540:	68a1      	ldr	r1, [r4, #8]
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	4620      	mov	r0, r4
 8004546:	f000 fc2f 	bl	8004da8 <_vfiprintf_r>
 800454a:	b002      	add	sp, #8
 800454c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004550:	b004      	add	sp, #16
 8004552:	4770      	bx	lr
 8004554:	2000006c 	.word	0x2000006c

08004558 <_puts_r>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	460e      	mov	r6, r1
 800455c:	4605      	mov	r5, r0
 800455e:	b118      	cbz	r0, 8004568 <_puts_r+0x10>
 8004560:	6983      	ldr	r3, [r0, #24]
 8004562:	b90b      	cbnz	r3, 8004568 <_puts_r+0x10>
 8004564:	f000 fa48 	bl	80049f8 <__sinit>
 8004568:	69ab      	ldr	r3, [r5, #24]
 800456a:	68ac      	ldr	r4, [r5, #8]
 800456c:	b913      	cbnz	r3, 8004574 <_puts_r+0x1c>
 800456e:	4628      	mov	r0, r5
 8004570:	f000 fa42 	bl	80049f8 <__sinit>
 8004574:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <_puts_r+0xd0>)
 8004576:	429c      	cmp	r4, r3
 8004578:	d120      	bne.n	80045bc <_puts_r+0x64>
 800457a:	686c      	ldr	r4, [r5, #4]
 800457c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800457e:	07db      	lsls	r3, r3, #31
 8004580:	d405      	bmi.n	800458e <_puts_r+0x36>
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	0598      	lsls	r0, r3, #22
 8004586:	d402      	bmi.n	800458e <_puts_r+0x36>
 8004588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800458a:	f000 fad3 	bl	8004b34 <__retarget_lock_acquire_recursive>
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	0719      	lsls	r1, r3, #28
 8004592:	d51d      	bpl.n	80045d0 <_puts_r+0x78>
 8004594:	6923      	ldr	r3, [r4, #16]
 8004596:	b1db      	cbz	r3, 80045d0 <_puts_r+0x78>
 8004598:	3e01      	subs	r6, #1
 800459a:	68a3      	ldr	r3, [r4, #8]
 800459c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045a0:	3b01      	subs	r3, #1
 80045a2:	60a3      	str	r3, [r4, #8]
 80045a4:	bb39      	cbnz	r1, 80045f6 <_puts_r+0x9e>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	da38      	bge.n	800461c <_puts_r+0xc4>
 80045aa:	4622      	mov	r2, r4
 80045ac:	210a      	movs	r1, #10
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f848 	bl	8004644 <__swbuf_r>
 80045b4:	3001      	adds	r0, #1
 80045b6:	d011      	beq.n	80045dc <_puts_r+0x84>
 80045b8:	250a      	movs	r5, #10
 80045ba:	e011      	b.n	80045e0 <_puts_r+0x88>
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <_puts_r+0xd4>)
 80045be:	429c      	cmp	r4, r3
 80045c0:	d101      	bne.n	80045c6 <_puts_r+0x6e>
 80045c2:	68ac      	ldr	r4, [r5, #8]
 80045c4:	e7da      	b.n	800457c <_puts_r+0x24>
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <_puts_r+0xd8>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	bf08      	it	eq
 80045cc:	68ec      	ldreq	r4, [r5, #12]
 80045ce:	e7d5      	b.n	800457c <_puts_r+0x24>
 80045d0:	4621      	mov	r1, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 f888 	bl	80046e8 <__swsetup_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d0dd      	beq.n	8004598 <_puts_r+0x40>
 80045dc:	f04f 35ff 	mov.w	r5, #4294967295
 80045e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045e2:	07da      	lsls	r2, r3, #31
 80045e4:	d405      	bmi.n	80045f2 <_puts_r+0x9a>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	059b      	lsls	r3, r3, #22
 80045ea:	d402      	bmi.n	80045f2 <_puts_r+0x9a>
 80045ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ee:	f000 faa2 	bl	8004b36 <__retarget_lock_release_recursive>
 80045f2:	4628      	mov	r0, r5
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da04      	bge.n	8004604 <_puts_r+0xac>
 80045fa:	69a2      	ldr	r2, [r4, #24]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	dc06      	bgt.n	800460e <_puts_r+0xb6>
 8004600:	290a      	cmp	r1, #10
 8004602:	d004      	beq.n	800460e <_puts_r+0xb6>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	6022      	str	r2, [r4, #0]
 800460a:	7019      	strb	r1, [r3, #0]
 800460c:	e7c5      	b.n	800459a <_puts_r+0x42>
 800460e:	4622      	mov	r2, r4
 8004610:	4628      	mov	r0, r5
 8004612:	f000 f817 	bl	8004644 <__swbuf_r>
 8004616:	3001      	adds	r0, #1
 8004618:	d1bf      	bne.n	800459a <_puts_r+0x42>
 800461a:	e7df      	b.n	80045dc <_puts_r+0x84>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	250a      	movs	r5, #10
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	6022      	str	r2, [r4, #0]
 8004624:	701d      	strb	r5, [r3, #0]
 8004626:	e7db      	b.n	80045e0 <_puts_r+0x88>
 8004628:	08005d88 	.word	0x08005d88
 800462c:	08005da8 	.word	0x08005da8
 8004630:	08005d68 	.word	0x08005d68

08004634 <puts>:
 8004634:	4b02      	ldr	r3, [pc, #8]	; (8004640 <puts+0xc>)
 8004636:	4601      	mov	r1, r0
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	f7ff bf8d 	b.w	8004558 <_puts_r>
 800463e:	bf00      	nop
 8004640:	2000006c 	.word	0x2000006c

08004644 <__swbuf_r>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	460e      	mov	r6, r1
 8004648:	4614      	mov	r4, r2
 800464a:	4605      	mov	r5, r0
 800464c:	b118      	cbz	r0, 8004656 <__swbuf_r+0x12>
 800464e:	6983      	ldr	r3, [r0, #24]
 8004650:	b90b      	cbnz	r3, 8004656 <__swbuf_r+0x12>
 8004652:	f000 f9d1 	bl	80049f8 <__sinit>
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <__swbuf_r+0x98>)
 8004658:	429c      	cmp	r4, r3
 800465a:	d12b      	bne.n	80046b4 <__swbuf_r+0x70>
 800465c:	686c      	ldr	r4, [r5, #4]
 800465e:	69a3      	ldr	r3, [r4, #24]
 8004660:	60a3      	str	r3, [r4, #8]
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	071a      	lsls	r2, r3, #28
 8004666:	d52f      	bpl.n	80046c8 <__swbuf_r+0x84>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	b36b      	cbz	r3, 80046c8 <__swbuf_r+0x84>
 800466c:	6923      	ldr	r3, [r4, #16]
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	1ac0      	subs	r0, r0, r3
 8004672:	6963      	ldr	r3, [r4, #20]
 8004674:	b2f6      	uxtb	r6, r6
 8004676:	4283      	cmp	r3, r0
 8004678:	4637      	mov	r7, r6
 800467a:	dc04      	bgt.n	8004686 <__swbuf_r+0x42>
 800467c:	4621      	mov	r1, r4
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f926 	bl	80048d0 <_fflush_r>
 8004684:	bb30      	cbnz	r0, 80046d4 <__swbuf_r+0x90>
 8004686:	68a3      	ldr	r3, [r4, #8]
 8004688:	3b01      	subs	r3, #1
 800468a:	60a3      	str	r3, [r4, #8]
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	6022      	str	r2, [r4, #0]
 8004692:	701e      	strb	r6, [r3, #0]
 8004694:	6963      	ldr	r3, [r4, #20]
 8004696:	3001      	adds	r0, #1
 8004698:	4283      	cmp	r3, r0
 800469a:	d004      	beq.n	80046a6 <__swbuf_r+0x62>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	07db      	lsls	r3, r3, #31
 80046a0:	d506      	bpl.n	80046b0 <__swbuf_r+0x6c>
 80046a2:	2e0a      	cmp	r6, #10
 80046a4:	d104      	bne.n	80046b0 <__swbuf_r+0x6c>
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f911 	bl	80048d0 <_fflush_r>
 80046ae:	b988      	cbnz	r0, 80046d4 <__swbuf_r+0x90>
 80046b0:	4638      	mov	r0, r7
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <__swbuf_r+0x9c>)
 80046b6:	429c      	cmp	r4, r3
 80046b8:	d101      	bne.n	80046be <__swbuf_r+0x7a>
 80046ba:	68ac      	ldr	r4, [r5, #8]
 80046bc:	e7cf      	b.n	800465e <__swbuf_r+0x1a>
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <__swbuf_r+0xa0>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	bf08      	it	eq
 80046c4:	68ec      	ldreq	r4, [r5, #12]
 80046c6:	e7ca      	b.n	800465e <__swbuf_r+0x1a>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	f000 f80c 	bl	80046e8 <__swsetup_r>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d0cb      	beq.n	800466c <__swbuf_r+0x28>
 80046d4:	f04f 37ff 	mov.w	r7, #4294967295
 80046d8:	e7ea      	b.n	80046b0 <__swbuf_r+0x6c>
 80046da:	bf00      	nop
 80046dc:	08005d88 	.word	0x08005d88
 80046e0:	08005da8 	.word	0x08005da8
 80046e4:	08005d68 	.word	0x08005d68

080046e8 <__swsetup_r>:
 80046e8:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <__swsetup_r+0xcc>)
 80046ea:	b570      	push	{r4, r5, r6, lr}
 80046ec:	681d      	ldr	r5, [r3, #0]
 80046ee:	4606      	mov	r6, r0
 80046f0:	460c      	mov	r4, r1
 80046f2:	b125      	cbz	r5, 80046fe <__swsetup_r+0x16>
 80046f4:	69ab      	ldr	r3, [r5, #24]
 80046f6:	b913      	cbnz	r3, 80046fe <__swsetup_r+0x16>
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 f97d 	bl	80049f8 <__sinit>
 80046fe:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <__swsetup_r+0xd0>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d10f      	bne.n	8004724 <__swsetup_r+0x3c>
 8004704:	686c      	ldr	r4, [r5, #4]
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800470c:	0719      	lsls	r1, r3, #28
 800470e:	d42c      	bmi.n	800476a <__swsetup_r+0x82>
 8004710:	06dd      	lsls	r5, r3, #27
 8004712:	d411      	bmi.n	8004738 <__swsetup_r+0x50>
 8004714:	2309      	movs	r3, #9
 8004716:	6033      	str	r3, [r6, #0]
 8004718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	f04f 30ff 	mov.w	r0, #4294967295
 8004722:	e03e      	b.n	80047a2 <__swsetup_r+0xba>
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <__swsetup_r+0xd4>)
 8004726:	429c      	cmp	r4, r3
 8004728:	d101      	bne.n	800472e <__swsetup_r+0x46>
 800472a:	68ac      	ldr	r4, [r5, #8]
 800472c:	e7eb      	b.n	8004706 <__swsetup_r+0x1e>
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <__swsetup_r+0xd8>)
 8004730:	429c      	cmp	r4, r3
 8004732:	bf08      	it	eq
 8004734:	68ec      	ldreq	r4, [r5, #12]
 8004736:	e7e6      	b.n	8004706 <__swsetup_r+0x1e>
 8004738:	0758      	lsls	r0, r3, #29
 800473a:	d512      	bpl.n	8004762 <__swsetup_r+0x7a>
 800473c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473e:	b141      	cbz	r1, 8004752 <__swsetup_r+0x6a>
 8004740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004744:	4299      	cmp	r1, r3
 8004746:	d002      	beq.n	800474e <__swsetup_r+0x66>
 8004748:	4630      	mov	r0, r6
 800474a:	f000 fa59 	bl	8004c00 <_free_r>
 800474e:	2300      	movs	r3, #0
 8004750:	6363      	str	r3, [r4, #52]	; 0x34
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	2300      	movs	r3, #0
 800475c:	6063      	str	r3, [r4, #4]
 800475e:	6923      	ldr	r3, [r4, #16]
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	f043 0308 	orr.w	r3, r3, #8
 8004768:	81a3      	strh	r3, [r4, #12]
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	b94b      	cbnz	r3, 8004782 <__swsetup_r+0x9a>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004778:	d003      	beq.n	8004782 <__swsetup_r+0x9a>
 800477a:	4621      	mov	r1, r4
 800477c:	4630      	mov	r0, r6
 800477e:	f000 f9ff 	bl	8004b80 <__smakebuf_r>
 8004782:	89a0      	ldrh	r0, [r4, #12]
 8004784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004788:	f010 0301 	ands.w	r3, r0, #1
 800478c:	d00a      	beq.n	80047a4 <__swsetup_r+0xbc>
 800478e:	2300      	movs	r3, #0
 8004790:	60a3      	str	r3, [r4, #8]
 8004792:	6963      	ldr	r3, [r4, #20]
 8004794:	425b      	negs	r3, r3
 8004796:	61a3      	str	r3, [r4, #24]
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	b943      	cbnz	r3, 80047ae <__swsetup_r+0xc6>
 800479c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047a0:	d1ba      	bne.n	8004718 <__swsetup_r+0x30>
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	0781      	lsls	r1, r0, #30
 80047a6:	bf58      	it	pl
 80047a8:	6963      	ldrpl	r3, [r4, #20]
 80047aa:	60a3      	str	r3, [r4, #8]
 80047ac:	e7f4      	b.n	8004798 <__swsetup_r+0xb0>
 80047ae:	2000      	movs	r0, #0
 80047b0:	e7f7      	b.n	80047a2 <__swsetup_r+0xba>
 80047b2:	bf00      	nop
 80047b4:	2000006c 	.word	0x2000006c
 80047b8:	08005d88 	.word	0x08005d88
 80047bc:	08005da8 	.word	0x08005da8
 80047c0:	08005d68 	.word	0x08005d68

080047c4 <__sflush_r>:
 80047c4:	898a      	ldrh	r2, [r1, #12]
 80047c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ca:	4605      	mov	r5, r0
 80047cc:	0710      	lsls	r0, r2, #28
 80047ce:	460c      	mov	r4, r1
 80047d0:	d458      	bmi.n	8004884 <__sflush_r+0xc0>
 80047d2:	684b      	ldr	r3, [r1, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	dc05      	bgt.n	80047e4 <__sflush_r+0x20>
 80047d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	dc02      	bgt.n	80047e4 <__sflush_r+0x20>
 80047de:	2000      	movs	r0, #0
 80047e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	d0f9      	beq.n	80047de <__sflush_r+0x1a>
 80047ea:	2300      	movs	r3, #0
 80047ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047f0:	682f      	ldr	r7, [r5, #0]
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	d032      	beq.n	800485c <__sflush_r+0x98>
 80047f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	075a      	lsls	r2, r3, #29
 80047fc:	d505      	bpl.n	800480a <__sflush_r+0x46>
 80047fe:	6863      	ldr	r3, [r4, #4]
 8004800:	1ac0      	subs	r0, r0, r3
 8004802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004804:	b10b      	cbz	r3, 800480a <__sflush_r+0x46>
 8004806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004808:	1ac0      	subs	r0, r0, r3
 800480a:	2300      	movs	r3, #0
 800480c:	4602      	mov	r2, r0
 800480e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004810:	6a21      	ldr	r1, [r4, #32]
 8004812:	4628      	mov	r0, r5
 8004814:	47b0      	blx	r6
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	d106      	bne.n	800482a <__sflush_r+0x66>
 800481c:	6829      	ldr	r1, [r5, #0]
 800481e:	291d      	cmp	r1, #29
 8004820:	d82c      	bhi.n	800487c <__sflush_r+0xb8>
 8004822:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <__sflush_r+0x108>)
 8004824:	40ca      	lsrs	r2, r1
 8004826:	07d6      	lsls	r6, r2, #31
 8004828:	d528      	bpl.n	800487c <__sflush_r+0xb8>
 800482a:	2200      	movs	r2, #0
 800482c:	6062      	str	r2, [r4, #4]
 800482e:	04d9      	lsls	r1, r3, #19
 8004830:	6922      	ldr	r2, [r4, #16]
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	d504      	bpl.n	8004840 <__sflush_r+0x7c>
 8004836:	1c42      	adds	r2, r0, #1
 8004838:	d101      	bne.n	800483e <__sflush_r+0x7a>
 800483a:	682b      	ldr	r3, [r5, #0]
 800483c:	b903      	cbnz	r3, 8004840 <__sflush_r+0x7c>
 800483e:	6560      	str	r0, [r4, #84]	; 0x54
 8004840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004842:	602f      	str	r7, [r5, #0]
 8004844:	2900      	cmp	r1, #0
 8004846:	d0ca      	beq.n	80047de <__sflush_r+0x1a>
 8004848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800484c:	4299      	cmp	r1, r3
 800484e:	d002      	beq.n	8004856 <__sflush_r+0x92>
 8004850:	4628      	mov	r0, r5
 8004852:	f000 f9d5 	bl	8004c00 <_free_r>
 8004856:	2000      	movs	r0, #0
 8004858:	6360      	str	r0, [r4, #52]	; 0x34
 800485a:	e7c1      	b.n	80047e0 <__sflush_r+0x1c>
 800485c:	6a21      	ldr	r1, [r4, #32]
 800485e:	2301      	movs	r3, #1
 8004860:	4628      	mov	r0, r5
 8004862:	47b0      	blx	r6
 8004864:	1c41      	adds	r1, r0, #1
 8004866:	d1c7      	bne.n	80047f8 <__sflush_r+0x34>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0c4      	beq.n	80047f8 <__sflush_r+0x34>
 800486e:	2b1d      	cmp	r3, #29
 8004870:	d001      	beq.n	8004876 <__sflush_r+0xb2>
 8004872:	2b16      	cmp	r3, #22
 8004874:	d101      	bne.n	800487a <__sflush_r+0xb6>
 8004876:	602f      	str	r7, [r5, #0]
 8004878:	e7b1      	b.n	80047de <__sflush_r+0x1a>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	e7ad      	b.n	80047e0 <__sflush_r+0x1c>
 8004884:	690f      	ldr	r7, [r1, #16]
 8004886:	2f00      	cmp	r7, #0
 8004888:	d0a9      	beq.n	80047de <__sflush_r+0x1a>
 800488a:	0793      	lsls	r3, r2, #30
 800488c:	680e      	ldr	r6, [r1, #0]
 800488e:	bf08      	it	eq
 8004890:	694b      	ldreq	r3, [r1, #20]
 8004892:	600f      	str	r7, [r1, #0]
 8004894:	bf18      	it	ne
 8004896:	2300      	movne	r3, #0
 8004898:	eba6 0807 	sub.w	r8, r6, r7
 800489c:	608b      	str	r3, [r1, #8]
 800489e:	f1b8 0f00 	cmp.w	r8, #0
 80048a2:	dd9c      	ble.n	80047de <__sflush_r+0x1a>
 80048a4:	6a21      	ldr	r1, [r4, #32]
 80048a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048a8:	4643      	mov	r3, r8
 80048aa:	463a      	mov	r2, r7
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b0      	blx	r6
 80048b0:	2800      	cmp	r0, #0
 80048b2:	dc06      	bgt.n	80048c2 <__sflush_r+0xfe>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	e78e      	b.n	80047e0 <__sflush_r+0x1c>
 80048c2:	4407      	add	r7, r0
 80048c4:	eba8 0800 	sub.w	r8, r8, r0
 80048c8:	e7e9      	b.n	800489e <__sflush_r+0xda>
 80048ca:	bf00      	nop
 80048cc:	20400001 	.word	0x20400001

080048d0 <_fflush_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	690b      	ldr	r3, [r1, #16]
 80048d4:	4605      	mov	r5, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	b913      	cbnz	r3, 80048e0 <_fflush_r+0x10>
 80048da:	2500      	movs	r5, #0
 80048dc:	4628      	mov	r0, r5
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	b118      	cbz	r0, 80048ea <_fflush_r+0x1a>
 80048e2:	6983      	ldr	r3, [r0, #24]
 80048e4:	b90b      	cbnz	r3, 80048ea <_fflush_r+0x1a>
 80048e6:	f000 f887 	bl	80049f8 <__sinit>
 80048ea:	4b14      	ldr	r3, [pc, #80]	; (800493c <_fflush_r+0x6c>)
 80048ec:	429c      	cmp	r4, r3
 80048ee:	d11b      	bne.n	8004928 <_fflush_r+0x58>
 80048f0:	686c      	ldr	r4, [r5, #4]
 80048f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0ef      	beq.n	80048da <_fflush_r+0xa>
 80048fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048fc:	07d0      	lsls	r0, r2, #31
 80048fe:	d404      	bmi.n	800490a <_fflush_r+0x3a>
 8004900:	0599      	lsls	r1, r3, #22
 8004902:	d402      	bmi.n	800490a <_fflush_r+0x3a>
 8004904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004906:	f000 f915 	bl	8004b34 <__retarget_lock_acquire_recursive>
 800490a:	4628      	mov	r0, r5
 800490c:	4621      	mov	r1, r4
 800490e:	f7ff ff59 	bl	80047c4 <__sflush_r>
 8004912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004914:	07da      	lsls	r2, r3, #31
 8004916:	4605      	mov	r5, r0
 8004918:	d4e0      	bmi.n	80048dc <_fflush_r+0xc>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d4dd      	bmi.n	80048dc <_fflush_r+0xc>
 8004920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004922:	f000 f908 	bl	8004b36 <__retarget_lock_release_recursive>
 8004926:	e7d9      	b.n	80048dc <_fflush_r+0xc>
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <_fflush_r+0x70>)
 800492a:	429c      	cmp	r4, r3
 800492c:	d101      	bne.n	8004932 <_fflush_r+0x62>
 800492e:	68ac      	ldr	r4, [r5, #8]
 8004930:	e7df      	b.n	80048f2 <_fflush_r+0x22>
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <_fflush_r+0x74>)
 8004934:	429c      	cmp	r4, r3
 8004936:	bf08      	it	eq
 8004938:	68ec      	ldreq	r4, [r5, #12]
 800493a:	e7da      	b.n	80048f2 <_fflush_r+0x22>
 800493c:	08005d88 	.word	0x08005d88
 8004940:	08005da8 	.word	0x08005da8
 8004944:	08005d68 	.word	0x08005d68

08004948 <std>:
 8004948:	2300      	movs	r3, #0
 800494a:	b510      	push	{r4, lr}
 800494c:	4604      	mov	r4, r0
 800494e:	e9c0 3300 	strd	r3, r3, [r0]
 8004952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004956:	6083      	str	r3, [r0, #8]
 8004958:	8181      	strh	r1, [r0, #12]
 800495a:	6643      	str	r3, [r0, #100]	; 0x64
 800495c:	81c2      	strh	r2, [r0, #14]
 800495e:	6183      	str	r3, [r0, #24]
 8004960:	4619      	mov	r1, r3
 8004962:	2208      	movs	r2, #8
 8004964:	305c      	adds	r0, #92	; 0x5c
 8004966:	f7ff fdd7 	bl	8004518 <memset>
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <std+0x38>)
 800496c:	6263      	str	r3, [r4, #36]	; 0x24
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <std+0x3c>)
 8004970:	62a3      	str	r3, [r4, #40]	; 0x28
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <std+0x40>)
 8004974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <std+0x44>)
 8004978:	6224      	str	r4, [r4, #32]
 800497a:	6323      	str	r3, [r4, #48]	; 0x30
 800497c:	bd10      	pop	{r4, pc}
 800497e:	bf00      	nop
 8004980:	08005351 	.word	0x08005351
 8004984:	08005373 	.word	0x08005373
 8004988:	080053ab 	.word	0x080053ab
 800498c:	080053cf 	.word	0x080053cf

08004990 <_cleanup_r>:
 8004990:	4901      	ldr	r1, [pc, #4]	; (8004998 <_cleanup_r+0x8>)
 8004992:	f000 b8af 	b.w	8004af4 <_fwalk_reent>
 8004996:	bf00      	nop
 8004998:	080048d1 	.word	0x080048d1

0800499c <__sfmoreglue>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	1e4a      	subs	r2, r1, #1
 80049a0:	2568      	movs	r5, #104	; 0x68
 80049a2:	4355      	muls	r5, r2
 80049a4:	460e      	mov	r6, r1
 80049a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049aa:	f000 f979 	bl	8004ca0 <_malloc_r>
 80049ae:	4604      	mov	r4, r0
 80049b0:	b140      	cbz	r0, 80049c4 <__sfmoreglue+0x28>
 80049b2:	2100      	movs	r1, #0
 80049b4:	e9c0 1600 	strd	r1, r6, [r0]
 80049b8:	300c      	adds	r0, #12
 80049ba:	60a0      	str	r0, [r4, #8]
 80049bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049c0:	f7ff fdaa 	bl	8004518 <memset>
 80049c4:	4620      	mov	r0, r4
 80049c6:	bd70      	pop	{r4, r5, r6, pc}

080049c8 <__sfp_lock_acquire>:
 80049c8:	4801      	ldr	r0, [pc, #4]	; (80049d0 <__sfp_lock_acquire+0x8>)
 80049ca:	f000 b8b3 	b.w	8004b34 <__retarget_lock_acquire_recursive>
 80049ce:	bf00      	nop
 80049d0:	200014cc 	.word	0x200014cc

080049d4 <__sfp_lock_release>:
 80049d4:	4801      	ldr	r0, [pc, #4]	; (80049dc <__sfp_lock_release+0x8>)
 80049d6:	f000 b8ae 	b.w	8004b36 <__retarget_lock_release_recursive>
 80049da:	bf00      	nop
 80049dc:	200014cc 	.word	0x200014cc

080049e0 <__sinit_lock_acquire>:
 80049e0:	4801      	ldr	r0, [pc, #4]	; (80049e8 <__sinit_lock_acquire+0x8>)
 80049e2:	f000 b8a7 	b.w	8004b34 <__retarget_lock_acquire_recursive>
 80049e6:	bf00      	nop
 80049e8:	200014c7 	.word	0x200014c7

080049ec <__sinit_lock_release>:
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <__sinit_lock_release+0x8>)
 80049ee:	f000 b8a2 	b.w	8004b36 <__retarget_lock_release_recursive>
 80049f2:	bf00      	nop
 80049f4:	200014c7 	.word	0x200014c7

080049f8 <__sinit>:
 80049f8:	b510      	push	{r4, lr}
 80049fa:	4604      	mov	r4, r0
 80049fc:	f7ff fff0 	bl	80049e0 <__sinit_lock_acquire>
 8004a00:	69a3      	ldr	r3, [r4, #24]
 8004a02:	b11b      	cbz	r3, 8004a0c <__sinit+0x14>
 8004a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a08:	f7ff bff0 	b.w	80049ec <__sinit_lock_release>
 8004a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a10:	6523      	str	r3, [r4, #80]	; 0x50
 8004a12:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <__sinit+0x68>)
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <__sinit+0x6c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a1a:	42a3      	cmp	r3, r4
 8004a1c:	bf04      	itt	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	61a3      	streq	r3, [r4, #24]
 8004a22:	4620      	mov	r0, r4
 8004a24:	f000 f820 	bl	8004a68 <__sfp>
 8004a28:	6060      	str	r0, [r4, #4]
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f000 f81c 	bl	8004a68 <__sfp>
 8004a30:	60a0      	str	r0, [r4, #8]
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 f818 	bl	8004a68 <__sfp>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	60e0      	str	r0, [r4, #12]
 8004a3c:	2104      	movs	r1, #4
 8004a3e:	6860      	ldr	r0, [r4, #4]
 8004a40:	f7ff ff82 	bl	8004948 <std>
 8004a44:	68a0      	ldr	r0, [r4, #8]
 8004a46:	2201      	movs	r2, #1
 8004a48:	2109      	movs	r1, #9
 8004a4a:	f7ff ff7d 	bl	8004948 <std>
 8004a4e:	68e0      	ldr	r0, [r4, #12]
 8004a50:	2202      	movs	r2, #2
 8004a52:	2112      	movs	r1, #18
 8004a54:	f7ff ff78 	bl	8004948 <std>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	61a3      	str	r3, [r4, #24]
 8004a5c:	e7d2      	b.n	8004a04 <__sinit+0xc>
 8004a5e:	bf00      	nop
 8004a60:	08005d64 	.word	0x08005d64
 8004a64:	08004991 	.word	0x08004991

08004a68 <__sfp>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	4607      	mov	r7, r0
 8004a6c:	f7ff ffac 	bl	80049c8 <__sfp_lock_acquire>
 8004a70:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <__sfp+0x84>)
 8004a72:	681e      	ldr	r6, [r3, #0]
 8004a74:	69b3      	ldr	r3, [r6, #24]
 8004a76:	b913      	cbnz	r3, 8004a7e <__sfp+0x16>
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7ff ffbd 	bl	80049f8 <__sinit>
 8004a7e:	3648      	adds	r6, #72	; 0x48
 8004a80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	d503      	bpl.n	8004a90 <__sfp+0x28>
 8004a88:	6833      	ldr	r3, [r6, #0]
 8004a8a:	b30b      	cbz	r3, 8004ad0 <__sfp+0x68>
 8004a8c:	6836      	ldr	r6, [r6, #0]
 8004a8e:	e7f7      	b.n	8004a80 <__sfp+0x18>
 8004a90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a94:	b9d5      	cbnz	r5, 8004acc <__sfp+0x64>
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <__sfp+0x88>)
 8004a98:	60e3      	str	r3, [r4, #12]
 8004a9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a9e:	6665      	str	r5, [r4, #100]	; 0x64
 8004aa0:	f000 f847 	bl	8004b32 <__retarget_lock_init_recursive>
 8004aa4:	f7ff ff96 	bl	80049d4 <__sfp_lock_release>
 8004aa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004aac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ab0:	6025      	str	r5, [r4, #0]
 8004ab2:	61a5      	str	r5, [r4, #24]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004abc:	f7ff fd2c 	bl	8004518 <memset>
 8004ac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ac8:	4620      	mov	r0, r4
 8004aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004acc:	3468      	adds	r4, #104	; 0x68
 8004ace:	e7d9      	b.n	8004a84 <__sfp+0x1c>
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	f7ff ff62 	bl	800499c <__sfmoreglue>
 8004ad8:	4604      	mov	r4, r0
 8004ada:	6030      	str	r0, [r6, #0]
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d1d5      	bne.n	8004a8c <__sfp+0x24>
 8004ae0:	f7ff ff78 	bl	80049d4 <__sfp_lock_release>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	e7ee      	b.n	8004ac8 <__sfp+0x60>
 8004aea:	bf00      	nop
 8004aec:	08005d64 	.word	0x08005d64
 8004af0:	ffff0001 	.word	0xffff0001

08004af4 <_fwalk_reent>:
 8004af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af8:	4606      	mov	r6, r0
 8004afa:	4688      	mov	r8, r1
 8004afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b00:	2700      	movs	r7, #0
 8004b02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b06:	f1b9 0901 	subs.w	r9, r9, #1
 8004b0a:	d505      	bpl.n	8004b18 <_fwalk_reent+0x24>
 8004b0c:	6824      	ldr	r4, [r4, #0]
 8004b0e:	2c00      	cmp	r4, #0
 8004b10:	d1f7      	bne.n	8004b02 <_fwalk_reent+0xe>
 8004b12:	4638      	mov	r0, r7
 8004b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b18:	89ab      	ldrh	r3, [r5, #12]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d907      	bls.n	8004b2e <_fwalk_reent+0x3a>
 8004b1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b22:	3301      	adds	r3, #1
 8004b24:	d003      	beq.n	8004b2e <_fwalk_reent+0x3a>
 8004b26:	4629      	mov	r1, r5
 8004b28:	4630      	mov	r0, r6
 8004b2a:	47c0      	blx	r8
 8004b2c:	4307      	orrs	r7, r0
 8004b2e:	3568      	adds	r5, #104	; 0x68
 8004b30:	e7e9      	b.n	8004b06 <_fwalk_reent+0x12>

08004b32 <__retarget_lock_init_recursive>:
 8004b32:	4770      	bx	lr

08004b34 <__retarget_lock_acquire_recursive>:
 8004b34:	4770      	bx	lr

08004b36 <__retarget_lock_release_recursive>:
 8004b36:	4770      	bx	lr

08004b38 <__swhatbuf_r>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	460e      	mov	r6, r1
 8004b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b40:	2900      	cmp	r1, #0
 8004b42:	b096      	sub	sp, #88	; 0x58
 8004b44:	4614      	mov	r4, r2
 8004b46:	461d      	mov	r5, r3
 8004b48:	da07      	bge.n	8004b5a <__swhatbuf_r+0x22>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	602b      	str	r3, [r5, #0]
 8004b4e:	89b3      	ldrh	r3, [r6, #12]
 8004b50:	061a      	lsls	r2, r3, #24
 8004b52:	d410      	bmi.n	8004b76 <__swhatbuf_r+0x3e>
 8004b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b58:	e00e      	b.n	8004b78 <__swhatbuf_r+0x40>
 8004b5a:	466a      	mov	r2, sp
 8004b5c:	f000 fc5e 	bl	800541c <_fstat_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	dbf2      	blt.n	8004b4a <__swhatbuf_r+0x12>
 8004b64:	9a01      	ldr	r2, [sp, #4]
 8004b66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b6e:	425a      	negs	r2, r3
 8004b70:	415a      	adcs	r2, r3
 8004b72:	602a      	str	r2, [r5, #0]
 8004b74:	e7ee      	b.n	8004b54 <__swhatbuf_r+0x1c>
 8004b76:	2340      	movs	r3, #64	; 0x40
 8004b78:	2000      	movs	r0, #0
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	b016      	add	sp, #88	; 0x58
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}

08004b80 <__smakebuf_r>:
 8004b80:	898b      	ldrh	r3, [r1, #12]
 8004b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b84:	079d      	lsls	r5, r3, #30
 8004b86:	4606      	mov	r6, r0
 8004b88:	460c      	mov	r4, r1
 8004b8a:	d507      	bpl.n	8004b9c <__smakebuf_r+0x1c>
 8004b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	2301      	movs	r3, #1
 8004b96:	6163      	str	r3, [r4, #20]
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	ab01      	add	r3, sp, #4
 8004b9e:	466a      	mov	r2, sp
 8004ba0:	f7ff ffca 	bl	8004b38 <__swhatbuf_r>
 8004ba4:	9900      	ldr	r1, [sp, #0]
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 f879 	bl	8004ca0 <_malloc_r>
 8004bae:	b948      	cbnz	r0, 8004bc4 <__smakebuf_r+0x44>
 8004bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb4:	059a      	lsls	r2, r3, #22
 8004bb6:	d4ef      	bmi.n	8004b98 <__smakebuf_r+0x18>
 8004bb8:	f023 0303 	bic.w	r3, r3, #3
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	e7e3      	b.n	8004b8c <__smakebuf_r+0xc>
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <__smakebuf_r+0x7c>)
 8004bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	6020      	str	r0, [r4, #0]
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	9b00      	ldr	r3, [sp, #0]
 8004bd4:	6163      	str	r3, [r4, #20]
 8004bd6:	9b01      	ldr	r3, [sp, #4]
 8004bd8:	6120      	str	r0, [r4, #16]
 8004bda:	b15b      	cbz	r3, 8004bf4 <__smakebuf_r+0x74>
 8004bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 fc2d 	bl	8005440 <_isatty_r>
 8004be6:	b128      	cbz	r0, 8004bf4 <__smakebuf_r+0x74>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	89a0      	ldrh	r0, [r4, #12]
 8004bf6:	4305      	orrs	r5, r0
 8004bf8:	81a5      	strh	r5, [r4, #12]
 8004bfa:	e7cd      	b.n	8004b98 <__smakebuf_r+0x18>
 8004bfc:	08004991 	.word	0x08004991

08004c00 <_free_r>:
 8004c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c02:	2900      	cmp	r1, #0
 8004c04:	d048      	beq.n	8004c98 <_free_r+0x98>
 8004c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c0a:	9001      	str	r0, [sp, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c12:	bfb8      	it	lt
 8004c14:	18e4      	addlt	r4, r4, r3
 8004c16:	f000 fc35 	bl	8005484 <__malloc_lock>
 8004c1a:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <_free_r+0x9c>)
 8004c1c:	9801      	ldr	r0, [sp, #4]
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	4615      	mov	r5, r2
 8004c22:	b933      	cbnz	r3, 8004c32 <_free_r+0x32>
 8004c24:	6063      	str	r3, [r4, #4]
 8004c26:	6014      	str	r4, [r2, #0]
 8004c28:	b003      	add	sp, #12
 8004c2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c2e:	f000 bc2f 	b.w	8005490 <__malloc_unlock>
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	d90b      	bls.n	8004c4e <_free_r+0x4e>
 8004c36:	6821      	ldr	r1, [r4, #0]
 8004c38:	1862      	adds	r2, r4, r1
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	bf04      	itt	eq
 8004c3e:	681a      	ldreq	r2, [r3, #0]
 8004c40:	685b      	ldreq	r3, [r3, #4]
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	bf04      	itt	eq
 8004c46:	1852      	addeq	r2, r2, r1
 8004c48:	6022      	streq	r2, [r4, #0]
 8004c4a:	602c      	str	r4, [r5, #0]
 8004c4c:	e7ec      	b.n	8004c28 <_free_r+0x28>
 8004c4e:	461a      	mov	r2, r3
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	b10b      	cbz	r3, 8004c58 <_free_r+0x58>
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	d9fa      	bls.n	8004c4e <_free_r+0x4e>
 8004c58:	6811      	ldr	r1, [r2, #0]
 8004c5a:	1855      	adds	r5, r2, r1
 8004c5c:	42a5      	cmp	r5, r4
 8004c5e:	d10b      	bne.n	8004c78 <_free_r+0x78>
 8004c60:	6824      	ldr	r4, [r4, #0]
 8004c62:	4421      	add	r1, r4
 8004c64:	1854      	adds	r4, r2, r1
 8004c66:	42a3      	cmp	r3, r4
 8004c68:	6011      	str	r1, [r2, #0]
 8004c6a:	d1dd      	bne.n	8004c28 <_free_r+0x28>
 8004c6c:	681c      	ldr	r4, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	6053      	str	r3, [r2, #4]
 8004c72:	4421      	add	r1, r4
 8004c74:	6011      	str	r1, [r2, #0]
 8004c76:	e7d7      	b.n	8004c28 <_free_r+0x28>
 8004c78:	d902      	bls.n	8004c80 <_free_r+0x80>
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	6003      	str	r3, [r0, #0]
 8004c7e:	e7d3      	b.n	8004c28 <_free_r+0x28>
 8004c80:	6825      	ldr	r5, [r4, #0]
 8004c82:	1961      	adds	r1, r4, r5
 8004c84:	428b      	cmp	r3, r1
 8004c86:	bf04      	itt	eq
 8004c88:	6819      	ldreq	r1, [r3, #0]
 8004c8a:	685b      	ldreq	r3, [r3, #4]
 8004c8c:	6063      	str	r3, [r4, #4]
 8004c8e:	bf04      	itt	eq
 8004c90:	1949      	addeq	r1, r1, r5
 8004c92:	6021      	streq	r1, [r4, #0]
 8004c94:	6054      	str	r4, [r2, #4]
 8004c96:	e7c7      	b.n	8004c28 <_free_r+0x28>
 8004c98:	b003      	add	sp, #12
 8004c9a:	bd30      	pop	{r4, r5, pc}
 8004c9c:	20000130 	.word	0x20000130

08004ca0 <_malloc_r>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	1ccd      	adds	r5, r1, #3
 8004ca4:	f025 0503 	bic.w	r5, r5, #3
 8004ca8:	3508      	adds	r5, #8
 8004caa:	2d0c      	cmp	r5, #12
 8004cac:	bf38      	it	cc
 8004cae:	250c      	movcc	r5, #12
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	db01      	blt.n	8004cba <_malloc_r+0x1a>
 8004cb6:	42a9      	cmp	r1, r5
 8004cb8:	d903      	bls.n	8004cc2 <_malloc_r+0x22>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc2:	f000 fbdf 	bl	8005484 <__malloc_lock>
 8004cc6:	4921      	ldr	r1, [pc, #132]	; (8004d4c <_malloc_r+0xac>)
 8004cc8:	680a      	ldr	r2, [r1, #0]
 8004cca:	4614      	mov	r4, r2
 8004ccc:	b99c      	cbnz	r4, 8004cf6 <_malloc_r+0x56>
 8004cce:	4f20      	ldr	r7, [pc, #128]	; (8004d50 <_malloc_r+0xb0>)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	b923      	cbnz	r3, 8004cde <_malloc_r+0x3e>
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f000 fb2a 	bl	8005330 <_sbrk_r>
 8004cdc:	6038      	str	r0, [r7, #0]
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 fb25 	bl	8005330 <_sbrk_r>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	d123      	bne.n	8004d32 <_malloc_r+0x92>
 8004cea:	230c      	movs	r3, #12
 8004cec:	6033      	str	r3, [r6, #0]
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f000 fbce 	bl	8005490 <__malloc_unlock>
 8004cf4:	e7e3      	b.n	8004cbe <_malloc_r+0x1e>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	1b5b      	subs	r3, r3, r5
 8004cfa:	d417      	bmi.n	8004d2c <_malloc_r+0x8c>
 8004cfc:	2b0b      	cmp	r3, #11
 8004cfe:	d903      	bls.n	8004d08 <_malloc_r+0x68>
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	441c      	add	r4, r3
 8004d04:	6025      	str	r5, [r4, #0]
 8004d06:	e004      	b.n	8004d12 <_malloc_r+0x72>
 8004d08:	6863      	ldr	r3, [r4, #4]
 8004d0a:	42a2      	cmp	r2, r4
 8004d0c:	bf0c      	ite	eq
 8004d0e:	600b      	streq	r3, [r1, #0]
 8004d10:	6053      	strne	r3, [r2, #4]
 8004d12:	4630      	mov	r0, r6
 8004d14:	f000 fbbc 	bl	8005490 <__malloc_unlock>
 8004d18:	f104 000b 	add.w	r0, r4, #11
 8004d1c:	1d23      	adds	r3, r4, #4
 8004d1e:	f020 0007 	bic.w	r0, r0, #7
 8004d22:	1ac2      	subs	r2, r0, r3
 8004d24:	d0cc      	beq.n	8004cc0 <_malloc_r+0x20>
 8004d26:	1a1b      	subs	r3, r3, r0
 8004d28:	50a3      	str	r3, [r4, r2]
 8004d2a:	e7c9      	b.n	8004cc0 <_malloc_r+0x20>
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	6864      	ldr	r4, [r4, #4]
 8004d30:	e7cc      	b.n	8004ccc <_malloc_r+0x2c>
 8004d32:	1cc4      	adds	r4, r0, #3
 8004d34:	f024 0403 	bic.w	r4, r4, #3
 8004d38:	42a0      	cmp	r0, r4
 8004d3a:	d0e3      	beq.n	8004d04 <_malloc_r+0x64>
 8004d3c:	1a21      	subs	r1, r4, r0
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f000 faf6 	bl	8005330 <_sbrk_r>
 8004d44:	3001      	adds	r0, #1
 8004d46:	d1dd      	bne.n	8004d04 <_malloc_r+0x64>
 8004d48:	e7cf      	b.n	8004cea <_malloc_r+0x4a>
 8004d4a:	bf00      	nop
 8004d4c:	20000130 	.word	0x20000130
 8004d50:	20000134 	.word	0x20000134

08004d54 <__sfputc_r>:
 8004d54:	6893      	ldr	r3, [r2, #8]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	b410      	push	{r4}
 8004d5c:	6093      	str	r3, [r2, #8]
 8004d5e:	da08      	bge.n	8004d72 <__sfputc_r+0x1e>
 8004d60:	6994      	ldr	r4, [r2, #24]
 8004d62:	42a3      	cmp	r3, r4
 8004d64:	db01      	blt.n	8004d6a <__sfputc_r+0x16>
 8004d66:	290a      	cmp	r1, #10
 8004d68:	d103      	bne.n	8004d72 <__sfputc_r+0x1e>
 8004d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d6e:	f7ff bc69 	b.w	8004644 <__swbuf_r>
 8004d72:	6813      	ldr	r3, [r2, #0]
 8004d74:	1c58      	adds	r0, r3, #1
 8004d76:	6010      	str	r0, [r2, #0]
 8004d78:	7019      	strb	r1, [r3, #0]
 8004d7a:	4608      	mov	r0, r1
 8004d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <__sfputs_r>:
 8004d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d84:	4606      	mov	r6, r0
 8004d86:	460f      	mov	r7, r1
 8004d88:	4614      	mov	r4, r2
 8004d8a:	18d5      	adds	r5, r2, r3
 8004d8c:	42ac      	cmp	r4, r5
 8004d8e:	d101      	bne.n	8004d94 <__sfputs_r+0x12>
 8004d90:	2000      	movs	r0, #0
 8004d92:	e007      	b.n	8004da4 <__sfputs_r+0x22>
 8004d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d98:	463a      	mov	r2, r7
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f7ff ffda 	bl	8004d54 <__sfputc_r>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d1f3      	bne.n	8004d8c <__sfputs_r+0xa>
 8004da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004da8 <_vfiprintf_r>:
 8004da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dac:	460d      	mov	r5, r1
 8004dae:	b09d      	sub	sp, #116	; 0x74
 8004db0:	4614      	mov	r4, r2
 8004db2:	4698      	mov	r8, r3
 8004db4:	4606      	mov	r6, r0
 8004db6:	b118      	cbz	r0, 8004dc0 <_vfiprintf_r+0x18>
 8004db8:	6983      	ldr	r3, [r0, #24]
 8004dba:	b90b      	cbnz	r3, 8004dc0 <_vfiprintf_r+0x18>
 8004dbc:	f7ff fe1c 	bl	80049f8 <__sinit>
 8004dc0:	4b89      	ldr	r3, [pc, #548]	; (8004fe8 <_vfiprintf_r+0x240>)
 8004dc2:	429d      	cmp	r5, r3
 8004dc4:	d11b      	bne.n	8004dfe <_vfiprintf_r+0x56>
 8004dc6:	6875      	ldr	r5, [r6, #4]
 8004dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dca:	07d9      	lsls	r1, r3, #31
 8004dcc:	d405      	bmi.n	8004dda <_vfiprintf_r+0x32>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	059a      	lsls	r2, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_vfiprintf_r+0x32>
 8004dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dd6:	f7ff fead 	bl	8004b34 <__retarget_lock_acquire_recursive>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	071b      	lsls	r3, r3, #28
 8004dde:	d501      	bpl.n	8004de4 <_vfiprintf_r+0x3c>
 8004de0:	692b      	ldr	r3, [r5, #16]
 8004de2:	b9eb      	cbnz	r3, 8004e20 <_vfiprintf_r+0x78>
 8004de4:	4629      	mov	r1, r5
 8004de6:	4630      	mov	r0, r6
 8004de8:	f7ff fc7e 	bl	80046e8 <__swsetup_r>
 8004dec:	b1c0      	cbz	r0, 8004e20 <_vfiprintf_r+0x78>
 8004dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004df0:	07dc      	lsls	r4, r3, #31
 8004df2:	d50e      	bpl.n	8004e12 <_vfiprintf_r+0x6a>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	b01d      	add	sp, #116	; 0x74
 8004dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfe:	4b7b      	ldr	r3, [pc, #492]	; (8004fec <_vfiprintf_r+0x244>)
 8004e00:	429d      	cmp	r5, r3
 8004e02:	d101      	bne.n	8004e08 <_vfiprintf_r+0x60>
 8004e04:	68b5      	ldr	r5, [r6, #8]
 8004e06:	e7df      	b.n	8004dc8 <_vfiprintf_r+0x20>
 8004e08:	4b79      	ldr	r3, [pc, #484]	; (8004ff0 <_vfiprintf_r+0x248>)
 8004e0a:	429d      	cmp	r5, r3
 8004e0c:	bf08      	it	eq
 8004e0e:	68f5      	ldreq	r5, [r6, #12]
 8004e10:	e7da      	b.n	8004dc8 <_vfiprintf_r+0x20>
 8004e12:	89ab      	ldrh	r3, [r5, #12]
 8004e14:	0598      	lsls	r0, r3, #22
 8004e16:	d4ed      	bmi.n	8004df4 <_vfiprintf_r+0x4c>
 8004e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e1a:	f7ff fe8c 	bl	8004b36 <__retarget_lock_release_recursive>
 8004e1e:	e7e9      	b.n	8004df4 <_vfiprintf_r+0x4c>
 8004e20:	2300      	movs	r3, #0
 8004e22:	9309      	str	r3, [sp, #36]	; 0x24
 8004e24:	2320      	movs	r3, #32
 8004e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e2e:	2330      	movs	r3, #48	; 0x30
 8004e30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ff4 <_vfiprintf_r+0x24c>
 8004e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e38:	f04f 0901 	mov.w	r9, #1
 8004e3c:	4623      	mov	r3, r4
 8004e3e:	469a      	mov	sl, r3
 8004e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e44:	b10a      	cbz	r2, 8004e4a <_vfiprintf_r+0xa2>
 8004e46:	2a25      	cmp	r2, #37	; 0x25
 8004e48:	d1f9      	bne.n	8004e3e <_vfiprintf_r+0x96>
 8004e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e4e:	d00b      	beq.n	8004e68 <_vfiprintf_r+0xc0>
 8004e50:	465b      	mov	r3, fp
 8004e52:	4622      	mov	r2, r4
 8004e54:	4629      	mov	r1, r5
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff ff93 	bl	8004d82 <__sfputs_r>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f000 80aa 	beq.w	8004fb6 <_vfiprintf_r+0x20e>
 8004e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e64:	445a      	add	r2, fp
 8004e66:	9209      	str	r2, [sp, #36]	; 0x24
 8004e68:	f89a 3000 	ldrb.w	r3, [sl]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80a2 	beq.w	8004fb6 <_vfiprintf_r+0x20e>
 8004e72:	2300      	movs	r3, #0
 8004e74:	f04f 32ff 	mov.w	r2, #4294967295
 8004e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e7c:	f10a 0a01 	add.w	sl, sl, #1
 8004e80:	9304      	str	r3, [sp, #16]
 8004e82:	9307      	str	r3, [sp, #28]
 8004e84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e88:	931a      	str	r3, [sp, #104]	; 0x68
 8004e8a:	4654      	mov	r4, sl
 8004e8c:	2205      	movs	r2, #5
 8004e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e92:	4858      	ldr	r0, [pc, #352]	; (8004ff4 <_vfiprintf_r+0x24c>)
 8004e94:	f7fb f99c 	bl	80001d0 <memchr>
 8004e98:	9a04      	ldr	r2, [sp, #16]
 8004e9a:	b9d8      	cbnz	r0, 8004ed4 <_vfiprintf_r+0x12c>
 8004e9c:	06d1      	lsls	r1, r2, #27
 8004e9e:	bf44      	itt	mi
 8004ea0:	2320      	movmi	r3, #32
 8004ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ea6:	0713      	lsls	r3, r2, #28
 8004ea8:	bf44      	itt	mi
 8004eaa:	232b      	movmi	r3, #43	; 0x2b
 8004eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb6:	d015      	beq.n	8004ee4 <_vfiprintf_r+0x13c>
 8004eb8:	9a07      	ldr	r2, [sp, #28]
 8004eba:	4654      	mov	r4, sl
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f04f 0c0a 	mov.w	ip, #10
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ec8:	3b30      	subs	r3, #48	; 0x30
 8004eca:	2b09      	cmp	r3, #9
 8004ecc:	d94e      	bls.n	8004f6c <_vfiprintf_r+0x1c4>
 8004ece:	b1b0      	cbz	r0, 8004efe <_vfiprintf_r+0x156>
 8004ed0:	9207      	str	r2, [sp, #28]
 8004ed2:	e014      	b.n	8004efe <_vfiprintf_r+0x156>
 8004ed4:	eba0 0308 	sub.w	r3, r0, r8
 8004ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	9304      	str	r3, [sp, #16]
 8004ee0:	46a2      	mov	sl, r4
 8004ee2:	e7d2      	b.n	8004e8a <_vfiprintf_r+0xe2>
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	1d19      	adds	r1, r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	9103      	str	r1, [sp, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bfbb      	ittet	lt
 8004ef0:	425b      	neglt	r3, r3
 8004ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8004ef6:	9307      	strge	r3, [sp, #28]
 8004ef8:	9307      	strlt	r3, [sp, #28]
 8004efa:	bfb8      	it	lt
 8004efc:	9204      	strlt	r2, [sp, #16]
 8004efe:	7823      	ldrb	r3, [r4, #0]
 8004f00:	2b2e      	cmp	r3, #46	; 0x2e
 8004f02:	d10c      	bne.n	8004f1e <_vfiprintf_r+0x176>
 8004f04:	7863      	ldrb	r3, [r4, #1]
 8004f06:	2b2a      	cmp	r3, #42	; 0x2a
 8004f08:	d135      	bne.n	8004f76 <_vfiprintf_r+0x1ce>
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	1d1a      	adds	r2, r3, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	9203      	str	r2, [sp, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bfb8      	it	lt
 8004f16:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f1a:	3402      	adds	r4, #2
 8004f1c:	9305      	str	r3, [sp, #20]
 8004f1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005004 <_vfiprintf_r+0x25c>
 8004f22:	7821      	ldrb	r1, [r4, #0]
 8004f24:	2203      	movs	r2, #3
 8004f26:	4650      	mov	r0, sl
 8004f28:	f7fb f952 	bl	80001d0 <memchr>
 8004f2c:	b140      	cbz	r0, 8004f40 <_vfiprintf_r+0x198>
 8004f2e:	2340      	movs	r3, #64	; 0x40
 8004f30:	eba0 000a 	sub.w	r0, r0, sl
 8004f34:	fa03 f000 	lsl.w	r0, r3, r0
 8004f38:	9b04      	ldr	r3, [sp, #16]
 8004f3a:	4303      	orrs	r3, r0
 8004f3c:	3401      	adds	r4, #1
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f44:	482c      	ldr	r0, [pc, #176]	; (8004ff8 <_vfiprintf_r+0x250>)
 8004f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f4a:	2206      	movs	r2, #6
 8004f4c:	f7fb f940 	bl	80001d0 <memchr>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d03f      	beq.n	8004fd4 <_vfiprintf_r+0x22c>
 8004f54:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <_vfiprintf_r+0x254>)
 8004f56:	bb1b      	cbnz	r3, 8004fa0 <_vfiprintf_r+0x1f8>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	3307      	adds	r3, #7
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	3308      	adds	r3, #8
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f66:	443b      	add	r3, r7
 8004f68:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6a:	e767      	b.n	8004e3c <_vfiprintf_r+0x94>
 8004f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f70:	460c      	mov	r4, r1
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7a5      	b.n	8004ec2 <_vfiprintf_r+0x11a>
 8004f76:	2300      	movs	r3, #0
 8004f78:	3401      	adds	r4, #1
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f04f 0c0a 	mov.w	ip, #10
 8004f82:	4620      	mov	r0, r4
 8004f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f88:	3a30      	subs	r2, #48	; 0x30
 8004f8a:	2a09      	cmp	r2, #9
 8004f8c:	d903      	bls.n	8004f96 <_vfiprintf_r+0x1ee>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0c5      	beq.n	8004f1e <_vfiprintf_r+0x176>
 8004f92:	9105      	str	r1, [sp, #20]
 8004f94:	e7c3      	b.n	8004f1e <_vfiprintf_r+0x176>
 8004f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e7f0      	b.n	8004f82 <_vfiprintf_r+0x1da>
 8004fa0:	ab03      	add	r3, sp, #12
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	462a      	mov	r2, r5
 8004fa6:	4b16      	ldr	r3, [pc, #88]	; (8005000 <_vfiprintf_r+0x258>)
 8004fa8:	a904      	add	r1, sp, #16
 8004faa:	4630      	mov	r0, r6
 8004fac:	f3af 8000 	nop.w
 8004fb0:	4607      	mov	r7, r0
 8004fb2:	1c78      	adds	r0, r7, #1
 8004fb4:	d1d6      	bne.n	8004f64 <_vfiprintf_r+0x1bc>
 8004fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fb8:	07d9      	lsls	r1, r3, #31
 8004fba:	d405      	bmi.n	8004fc8 <_vfiprintf_r+0x220>
 8004fbc:	89ab      	ldrh	r3, [r5, #12]
 8004fbe:	059a      	lsls	r2, r3, #22
 8004fc0:	d402      	bmi.n	8004fc8 <_vfiprintf_r+0x220>
 8004fc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fc4:	f7ff fdb7 	bl	8004b36 <__retarget_lock_release_recursive>
 8004fc8:	89ab      	ldrh	r3, [r5, #12]
 8004fca:	065b      	lsls	r3, r3, #25
 8004fcc:	f53f af12 	bmi.w	8004df4 <_vfiprintf_r+0x4c>
 8004fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd2:	e711      	b.n	8004df8 <_vfiprintf_r+0x50>
 8004fd4:	ab03      	add	r3, sp, #12
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <_vfiprintf_r+0x258>)
 8004fdc:	a904      	add	r1, sp, #16
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f000 f880 	bl	80050e4 <_printf_i>
 8004fe4:	e7e4      	b.n	8004fb0 <_vfiprintf_r+0x208>
 8004fe6:	bf00      	nop
 8004fe8:	08005d88 	.word	0x08005d88
 8004fec:	08005da8 	.word	0x08005da8
 8004ff0:	08005d68 	.word	0x08005d68
 8004ff4:	08005dc8 	.word	0x08005dc8
 8004ff8:	08005dd2 	.word	0x08005dd2
 8004ffc:	00000000 	.word	0x00000000
 8005000:	08004d83 	.word	0x08004d83
 8005004:	08005dce 	.word	0x08005dce

08005008 <_printf_common>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4616      	mov	r6, r2
 800500e:	4699      	mov	r9, r3
 8005010:	688a      	ldr	r2, [r1, #8]
 8005012:	690b      	ldr	r3, [r1, #16]
 8005014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005018:	4293      	cmp	r3, r2
 800501a:	bfb8      	it	lt
 800501c:	4613      	movlt	r3, r2
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005024:	4607      	mov	r7, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b10a      	cbz	r2, 800502e <_printf_common+0x26>
 800502a:	3301      	adds	r3, #1
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	0699      	lsls	r1, r3, #26
 8005032:	bf42      	ittt	mi
 8005034:	6833      	ldrmi	r3, [r6, #0]
 8005036:	3302      	addmi	r3, #2
 8005038:	6033      	strmi	r3, [r6, #0]
 800503a:	6825      	ldr	r5, [r4, #0]
 800503c:	f015 0506 	ands.w	r5, r5, #6
 8005040:	d106      	bne.n	8005050 <_printf_common+0x48>
 8005042:	f104 0a19 	add.w	sl, r4, #25
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	6832      	ldr	r2, [r6, #0]
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	42ab      	cmp	r3, r5
 800504e:	dc26      	bgt.n	800509e <_printf_common+0x96>
 8005050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005054:	1e13      	subs	r3, r2, #0
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	bf18      	it	ne
 800505a:	2301      	movne	r3, #1
 800505c:	0692      	lsls	r2, r2, #26
 800505e:	d42b      	bmi.n	80050b8 <_printf_common+0xb0>
 8005060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d01e      	beq.n	80050ac <_printf_common+0xa4>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	68e5      	ldr	r5, [r4, #12]
 8005072:	6832      	ldr	r2, [r6, #0]
 8005074:	f003 0306 	and.w	r3, r3, #6
 8005078:	2b04      	cmp	r3, #4
 800507a:	bf08      	it	eq
 800507c:	1aad      	subeq	r5, r5, r2
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	bf0c      	ite	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	2500      	movne	r5, #0
 800508a:	4293      	cmp	r3, r2
 800508c:	bfc4      	itt	gt
 800508e:	1a9b      	subgt	r3, r3, r2
 8005090:	18ed      	addgt	r5, r5, r3
 8005092:	2600      	movs	r6, #0
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xc8>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xa8>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c0      	blx	r8
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xac>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c6      	b.n	8005046 <_printf_common+0x3e>
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	2030      	movs	r0, #48	; 0x30
 80050be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c2:	4422      	add	r2, r4
 80050c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050cc:	3302      	adds	r3, #2
 80050ce:	e7c7      	b.n	8005060 <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4649      	mov	r1, r9
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa4>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x8e>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	460c      	mov	r4, r1
 80050ea:	4691      	mov	r9, r2
 80050ec:	7e27      	ldrb	r7, [r4, #24]
 80050ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050f0:	2f78      	cmp	r7, #120	; 0x78
 80050f2:	4680      	mov	r8, r0
 80050f4:	469a      	mov	sl, r3
 80050f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	; 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d8 	beq.w	80052b6 <_printf_i+0x1d2>
 8005106:	2f58      	cmp	r7, #88	; 0x58
 8005108:	f000 80a3 	beq.w	8005252 <_printf_i+0x16e>
 800510c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a001      	add	r0, pc, #4	; (adr r0, 8005124 <_printf_i+0x40>)
 8005120:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	0800529d 	.word	0x0800529d
 8005154:	080051c1 	.word	0x080051c1
 8005158:	0800527f 	.word	0x0800527f
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052bf 	.word	0x080052bf
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005287 	.word	0x08005287
 800517c:	680b      	ldr	r3, [r1, #0]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	600a      	str	r2, [r1, #0]
 8005184:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e0a3      	b.n	80052d8 <_printf_i+0x1f4>
 8005190:	6825      	ldr	r5, [r4, #0]
 8005192:	6808      	ldr	r0, [r1, #0]
 8005194:	062e      	lsls	r6, r5, #24
 8005196:	f100 0304 	add.w	r3, r0, #4
 800519a:	d50a      	bpl.n	80051b2 <_printf_i+0xce>
 800519c:	6805      	ldr	r5, [r0, #0]
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	da03      	bge.n	80051ac <_printf_i+0xc8>
 80051a4:	232d      	movs	r3, #45	; 0x2d
 80051a6:	426d      	negs	r5, r5
 80051a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ac:	485e      	ldr	r0, [pc, #376]	; (8005328 <_printf_i+0x244>)
 80051ae:	230a      	movs	r3, #10
 80051b0:	e019      	b.n	80051e6 <_printf_i+0x102>
 80051b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051b6:	6805      	ldr	r5, [r0, #0]
 80051b8:	600b      	str	r3, [r1, #0]
 80051ba:	bf18      	it	ne
 80051bc:	b22d      	sxthne	r5, r5
 80051be:	e7ef      	b.n	80051a0 <_printf_i+0xbc>
 80051c0:	680b      	ldr	r3, [r1, #0]
 80051c2:	6825      	ldr	r5, [r4, #0]
 80051c4:	1d18      	adds	r0, r3, #4
 80051c6:	6008      	str	r0, [r1, #0]
 80051c8:	0628      	lsls	r0, r5, #24
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0xec>
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <_printf_i+0xf2>
 80051d0:	0669      	lsls	r1, r5, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0xe8>
 80051d4:	881d      	ldrh	r5, [r3, #0]
 80051d6:	4854      	ldr	r0, [pc, #336]	; (8005328 <_printf_i+0x244>)
 80051d8:	2f6f      	cmp	r7, #111	; 0x6f
 80051da:	bf0c      	ite	eq
 80051dc:	2308      	moveq	r3, #8
 80051de:	230a      	movne	r3, #10
 80051e0:	2100      	movs	r1, #0
 80051e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e6:	6866      	ldr	r6, [r4, #4]
 80051e8:	60a6      	str	r6, [r4, #8]
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	bfa2      	ittt	ge
 80051ee:	6821      	ldrge	r1, [r4, #0]
 80051f0:	f021 0104 	bicge.w	r1, r1, #4
 80051f4:	6021      	strge	r1, [r4, #0]
 80051f6:	b90d      	cbnz	r5, 80051fc <_printf_i+0x118>
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	d04d      	beq.n	8005298 <_printf_i+0x1b4>
 80051fc:	4616      	mov	r6, r2
 80051fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005202:	fb03 5711 	mls	r7, r3, r1, r5
 8005206:	5dc7      	ldrb	r7, [r0, r7]
 8005208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800520c:	462f      	mov	r7, r5
 800520e:	42bb      	cmp	r3, r7
 8005210:	460d      	mov	r5, r1
 8005212:	d9f4      	bls.n	80051fe <_printf_i+0x11a>
 8005214:	2b08      	cmp	r3, #8
 8005216:	d10b      	bne.n	8005230 <_printf_i+0x14c>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	07df      	lsls	r7, r3, #31
 800521c:	d508      	bpl.n	8005230 <_printf_i+0x14c>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	6861      	ldr	r1, [r4, #4]
 8005222:	4299      	cmp	r1, r3
 8005224:	bfde      	ittt	le
 8005226:	2330      	movle	r3, #48	; 0x30
 8005228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800522c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005230:	1b92      	subs	r2, r2, r6
 8005232:	6122      	str	r2, [r4, #16]
 8005234:	f8cd a000 	str.w	sl, [sp]
 8005238:	464b      	mov	r3, r9
 800523a:	aa03      	add	r2, sp, #12
 800523c:	4621      	mov	r1, r4
 800523e:	4640      	mov	r0, r8
 8005240:	f7ff fee2 	bl	8005008 <_printf_common>
 8005244:	3001      	adds	r0, #1
 8005246:	d14c      	bne.n	80052e2 <_printf_i+0x1fe>
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	b004      	add	sp, #16
 800524e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005252:	4835      	ldr	r0, [pc, #212]	; (8005328 <_printf_i+0x244>)
 8005254:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	680e      	ldr	r6, [r1, #0]
 800525c:	061f      	lsls	r7, r3, #24
 800525e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005262:	600e      	str	r6, [r1, #0]
 8005264:	d514      	bpl.n	8005290 <_printf_i+0x1ac>
 8005266:	07d9      	lsls	r1, r3, #31
 8005268:	bf44      	itt	mi
 800526a:	f043 0320 	orrmi.w	r3, r3, #32
 800526e:	6023      	strmi	r3, [r4, #0]
 8005270:	b91d      	cbnz	r5, 800527a <_printf_i+0x196>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f023 0320 	bic.w	r3, r3, #32
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	2310      	movs	r3, #16
 800527c:	e7b0      	b.n	80051e0 <_printf_i+0xfc>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	2378      	movs	r3, #120	; 0x78
 8005288:	4828      	ldr	r0, [pc, #160]	; (800532c <_printf_i+0x248>)
 800528a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800528e:	e7e3      	b.n	8005258 <_printf_i+0x174>
 8005290:	065e      	lsls	r6, r3, #25
 8005292:	bf48      	it	mi
 8005294:	b2ad      	uxthmi	r5, r5
 8005296:	e7e6      	b.n	8005266 <_printf_i+0x182>
 8005298:	4616      	mov	r6, r2
 800529a:	e7bb      	b.n	8005214 <_printf_i+0x130>
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	6826      	ldr	r6, [r4, #0]
 80052a0:	6960      	ldr	r0, [r4, #20]
 80052a2:	1d1d      	adds	r5, r3, #4
 80052a4:	600d      	str	r5, [r1, #0]
 80052a6:	0635      	lsls	r5, r6, #24
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	d501      	bpl.n	80052b0 <_printf_i+0x1cc>
 80052ac:	6018      	str	r0, [r3, #0]
 80052ae:	e002      	b.n	80052b6 <_printf_i+0x1d2>
 80052b0:	0671      	lsls	r1, r6, #25
 80052b2:	d5fb      	bpl.n	80052ac <_printf_i+0x1c8>
 80052b4:	8018      	strh	r0, [r3, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	6123      	str	r3, [r4, #16]
 80052ba:	4616      	mov	r6, r2
 80052bc:	e7ba      	b.n	8005234 <_printf_i+0x150>
 80052be:	680b      	ldr	r3, [r1, #0]
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	600a      	str	r2, [r1, #0]
 80052c4:	681e      	ldr	r6, [r3, #0]
 80052c6:	6862      	ldr	r2, [r4, #4]
 80052c8:	2100      	movs	r1, #0
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7fa ff80 	bl	80001d0 <memchr>
 80052d0:	b108      	cbz	r0, 80052d6 <_printf_i+0x1f2>
 80052d2:	1b80      	subs	r0, r0, r6
 80052d4:	6060      	str	r0, [r4, #4]
 80052d6:	6863      	ldr	r3, [r4, #4]
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	2300      	movs	r3, #0
 80052dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e0:	e7a8      	b.n	8005234 <_printf_i+0x150>
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	4632      	mov	r2, r6
 80052e6:	4649      	mov	r1, r9
 80052e8:	4640      	mov	r0, r8
 80052ea:	47d0      	blx	sl
 80052ec:	3001      	adds	r0, #1
 80052ee:	d0ab      	beq.n	8005248 <_printf_i+0x164>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	079b      	lsls	r3, r3, #30
 80052f4:	d413      	bmi.n	800531e <_printf_i+0x23a>
 80052f6:	68e0      	ldr	r0, [r4, #12]
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	4298      	cmp	r0, r3
 80052fc:	bfb8      	it	lt
 80052fe:	4618      	movlt	r0, r3
 8005300:	e7a4      	b.n	800524c <_printf_i+0x168>
 8005302:	2301      	movs	r3, #1
 8005304:	4632      	mov	r2, r6
 8005306:	4649      	mov	r1, r9
 8005308:	4640      	mov	r0, r8
 800530a:	47d0      	blx	sl
 800530c:	3001      	adds	r0, #1
 800530e:	d09b      	beq.n	8005248 <_printf_i+0x164>
 8005310:	3501      	adds	r5, #1
 8005312:	68e3      	ldr	r3, [r4, #12]
 8005314:	9903      	ldr	r1, [sp, #12]
 8005316:	1a5b      	subs	r3, r3, r1
 8005318:	42ab      	cmp	r3, r5
 800531a:	dcf2      	bgt.n	8005302 <_printf_i+0x21e>
 800531c:	e7eb      	b.n	80052f6 <_printf_i+0x212>
 800531e:	2500      	movs	r5, #0
 8005320:	f104 0619 	add.w	r6, r4, #25
 8005324:	e7f5      	b.n	8005312 <_printf_i+0x22e>
 8005326:	bf00      	nop
 8005328:	08005dd9 	.word	0x08005dd9
 800532c:	08005dea 	.word	0x08005dea

08005330 <_sbrk_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d06      	ldr	r5, [pc, #24]	; (800534c <_sbrk_r+0x1c>)
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	f7ff f85e 	bl	80043fc <_sbrk>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_sbrk_r+0x1a>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_sbrk_r+0x1a>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	200014d0 	.word	0x200014d0

08005350 <__sread>:
 8005350:	b510      	push	{r4, lr}
 8005352:	460c      	mov	r4, r1
 8005354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005358:	f000 f8a0 	bl	800549c <_read_r>
 800535c:	2800      	cmp	r0, #0
 800535e:	bfab      	itete	ge
 8005360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005362:	89a3      	ldrhlt	r3, [r4, #12]
 8005364:	181b      	addge	r3, r3, r0
 8005366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800536a:	bfac      	ite	ge
 800536c:	6563      	strge	r3, [r4, #84]	; 0x54
 800536e:	81a3      	strhlt	r3, [r4, #12]
 8005370:	bd10      	pop	{r4, pc}

08005372 <__swrite>:
 8005372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005376:	461f      	mov	r7, r3
 8005378:	898b      	ldrh	r3, [r1, #12]
 800537a:	05db      	lsls	r3, r3, #23
 800537c:	4605      	mov	r5, r0
 800537e:	460c      	mov	r4, r1
 8005380:	4616      	mov	r6, r2
 8005382:	d505      	bpl.n	8005390 <__swrite+0x1e>
 8005384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005388:	2302      	movs	r3, #2
 800538a:	2200      	movs	r2, #0
 800538c:	f000 f868 	bl	8005460 <_lseek_r>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	4632      	mov	r2, r6
 800539e:	463b      	mov	r3, r7
 80053a0:	4628      	mov	r0, r5
 80053a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053a6:	f000 b817 	b.w	80053d8 <_write_r>

080053aa <__sseek>:
 80053aa:	b510      	push	{r4, lr}
 80053ac:	460c      	mov	r4, r1
 80053ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b2:	f000 f855 	bl	8005460 <_lseek_r>
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	bf15      	itete	ne
 80053bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80053be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053c6:	81a3      	strheq	r3, [r4, #12]
 80053c8:	bf18      	it	ne
 80053ca:	81a3      	strhne	r3, [r4, #12]
 80053cc:	bd10      	pop	{r4, pc}

080053ce <__sclose>:
 80053ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d2:	f000 b813 	b.w	80053fc <_close_r>
	...

080053d8 <_write_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4d07      	ldr	r5, [pc, #28]	; (80053f8 <_write_r+0x20>)
 80053dc:	4604      	mov	r4, r0
 80053de:	4608      	mov	r0, r1
 80053e0:	4611      	mov	r1, r2
 80053e2:	2200      	movs	r2, #0
 80053e4:	602a      	str	r2, [r5, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f7fe fa0c 	bl	8003804 <_write>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_write_r+0x1e>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_write_r+0x1e>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	200014d0 	.word	0x200014d0

080053fc <_close_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d06      	ldr	r5, [pc, #24]	; (8005418 <_close_r+0x1c>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fe ffea 	bl	80043e0 <_close>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_close_r+0x1a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_close_r+0x1a>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	200014d0 	.word	0x200014d0

0800541c <_fstat_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d07      	ldr	r5, [pc, #28]	; (800543c <_fstat_r+0x20>)
 8005420:	2300      	movs	r3, #0
 8005422:	4604      	mov	r4, r0
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	f7fe ffdd 	bl	80043e8 <_fstat>
 800542e:	1c43      	adds	r3, r0, #1
 8005430:	d102      	bne.n	8005438 <_fstat_r+0x1c>
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	b103      	cbz	r3, 8005438 <_fstat_r+0x1c>
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	bd38      	pop	{r3, r4, r5, pc}
 800543a:	bf00      	nop
 800543c:	200014d0 	.word	0x200014d0

08005440 <_isatty_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4d06      	ldr	r5, [pc, #24]	; (800545c <_isatty_r+0x1c>)
 8005444:	2300      	movs	r3, #0
 8005446:	4604      	mov	r4, r0
 8005448:	4608      	mov	r0, r1
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	f7fe ffd2 	bl	80043f4 <_isatty>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_isatty_r+0x1a>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_isatty_r+0x1a>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	200014d0 	.word	0x200014d0

08005460 <_lseek_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d07      	ldr	r5, [pc, #28]	; (8005480 <_lseek_r+0x20>)
 8005464:	4604      	mov	r4, r0
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	2200      	movs	r2, #0
 800546c:	602a      	str	r2, [r5, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f7fe ffc2 	bl	80043f8 <_lseek>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_lseek_r+0x1e>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_lseek_r+0x1e>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	200014d0 	.word	0x200014d0

08005484 <__malloc_lock>:
 8005484:	4801      	ldr	r0, [pc, #4]	; (800548c <__malloc_lock+0x8>)
 8005486:	f7ff bb55 	b.w	8004b34 <__retarget_lock_acquire_recursive>
 800548a:	bf00      	nop
 800548c:	200014c8 	.word	0x200014c8

08005490 <__malloc_unlock>:
 8005490:	4801      	ldr	r0, [pc, #4]	; (8005498 <__malloc_unlock+0x8>)
 8005492:	f7ff bb50 	b.w	8004b36 <__retarget_lock_release_recursive>
 8005496:	bf00      	nop
 8005498:	200014c8 	.word	0x200014c8

0800549c <_read_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d07      	ldr	r5, [pc, #28]	; (80054bc <_read_r+0x20>)
 80054a0:	4604      	mov	r4, r0
 80054a2:	4608      	mov	r0, r1
 80054a4:	4611      	mov	r1, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	602a      	str	r2, [r5, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fe ff8a 	bl	80043c4 <_read>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_read_r+0x1e>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_read_r+0x1e>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	200014d0 	.word	0x200014d0

080054c0 <_init>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	bf00      	nop
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr

080054cc <_fini>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr
