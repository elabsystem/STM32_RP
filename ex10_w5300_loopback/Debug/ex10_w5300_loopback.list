
ex10_w5300_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae8  08003ae8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af0  08003af0  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08003af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  200000c8  08003bc0  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  08003bc0  000209c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100d8  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec7  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00008f94  00000000  00000000  00033097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0003c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001098  00000000  00000000  0003c970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002299f  00000000  00000000  0003da08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f00c  00000000  00000000  000603a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd2a3  00000000  00000000  0006f3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013c656  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002374  00000000  00000000  0013c6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080038c8 	.word	0x080038c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	080038c8 	.word	0x080038c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_InitTick+0x3c>)
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_InitTick+0x40>)
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	681b      	ldr	r3, [r3, #0]
{
 8000572:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	fbb0 f0f2 	udiv	r0, r0, r2
 800057c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000580:	f000 f8a0 	bl	80006c4 <HAL_SYSTICK_Config>
 8000584:	b908      	cbnz	r0, 800058a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	2d0f      	cmp	r5, #15
 8000588:	d901      	bls.n	800058e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800058a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800058c:	bd38      	pop	{r3, r4, r5, pc}
 800058e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	4602      	mov	r2, r0
 8000592:	4629      	mov	r1, r5
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 f85c 	bl	8000654 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_InitTick+0x44>)
 800059e:	4620      	mov	r0, r4
 80005a0:	601d      	str	r5, [r3, #0]
}
 80005a2:	bd38      	pop	{r3, r4, r5, pc}
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000060 	.word	0x20000060
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_Init>:
{
 80005b0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x30>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f82d 	bl	800062c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f7ff ffc8 	bl	8000568 <HAL_InitTick>
  HAL_MspInit();
 80005d8:	f002 f84a 	bl	8002670 <HAL_MspInit>
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <HAL_IncTick+0x10>)
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_IncTick+0x14>)
 80005e8:	6811      	ldr	r1, [r2, #0]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	440b      	add	r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000120 	.word	0x20000120
 80005f8:	20000000 	.word	0x20000000

080005fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_GetTick+0x8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000120 	.word	0x20000120

08000608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000608:	b538      	push	{r3, r4, r5, lr}
 800060a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff6 	bl	80005fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000610:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000612:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000614:	d002      	beq.n	800061c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <HAL_Delay+0x20>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	1b43      	subs	r3, r0, r5
 8000622:	42a3      	cmp	r3, r4
 8000624:	d3fa      	bcc.n	800061c <HAL_Delay+0x14>
  {
  }
}
 8000626:	bd38      	pop	{r3, r4, r5, pc}
 8000628:	20000000 	.word	0x20000000

0800062c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4908      	ldr	r1, [pc, #32]	; (8000650 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800062e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000632:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000634:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000638:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000648:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800064c:	60cb      	str	r3, [r1, #12]
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_NVIC_SetPriority+0x68>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065e:	f1c3 0507 	rsb	r5, r3, #7
 8000662:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000664:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	bf28      	it	cs
 800066a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066c:	2c06      	cmp	r4, #6
 800066e:	d919      	bls.n	80006a4 <HAL_NVIC_SetPriority+0x50>
 8000670:	3b03      	subs	r3, #3
 8000672:	f04f 34ff 	mov.w	r4, #4294967295
 8000676:	409c      	lsls	r4, r3
 8000678:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 34ff 	mov.w	r4, #4294967295
 8000680:	40ac      	lsls	r4, r5
 8000682:	ea21 0104 	bic.w	r1, r1, r4
 8000686:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000688:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800068e:	db0c      	blt.n	80006aa <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000694:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000698:	0109      	lsls	r1, r1, #4
 800069a:	b2c9      	uxtb	r1, r1
 800069c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006a0:	bc30      	pop	{r4, r5}
 80006a2:	4770      	bx	lr
 80006a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	4613      	mov	r3, r2
 80006a8:	e7e8      	b.n	800067c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_NVIC_SetPriority+0x6c>)
 80006ac:	f000 000f 	and.w	r0, r0, #15
 80006b0:	0109      	lsls	r1, r1, #4
 80006b2:	4403      	add	r3, r0
 80006b4:	b2c9      	uxtb	r1, r1
 80006b6:	7619      	strb	r1, [r3, #24]
 80006b8:	bc30      	pop	{r4, r5}
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	e000ecfc 	.word	0xe000ecfc

080006c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c4:	3801      	subs	r0, #1
 80006c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ca:	d20e      	bcs.n	80006ea <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ce:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	4c08      	ldr	r4, [pc, #32]	; (80006f4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	20f0      	movs	r0, #240	; 0xf0
 80006d6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006da:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006dc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006de:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80006e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	6019      	str	r1, [r3, #0]
 80006e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2001      	movs	r0, #1
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006fc:	468b      	mov	fp, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	f8df a210 	ldr.w	sl, [pc, #528]	; 8000910 <HAL_GPIO_Init+0x218>
 8000702:	6809      	ldr	r1, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000704:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8000914 <HAL_GPIO_Init+0x21c>
{
 8000708:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800070a:	2300      	movs	r3, #0
 800070c:	46d9      	mov	r9, fp
 800070e:	e003      	b.n	8000718 <HAL_GPIO_Init+0x20>
 8000710:	3301      	adds	r3, #1
 8000712:	2b10      	cmp	r3, #16
 8000714:	f000 8088 	beq.w	8000828 <HAL_GPIO_Init+0x130>
    ioposition = 0x01U << position;
 8000718:	2201      	movs	r2, #1
 800071a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071c:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8000720:	438a      	bics	r2, r1
 8000722:	d1f5      	bne.n	8000710 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000724:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8000728:	f005 0203 	and.w	r2, r5, #3
 800072c:	1e54      	subs	r4, r2, #1
 800072e:	2c01      	cmp	r4, #1
 8000730:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8000734:	d97b      	bls.n	800082e <HAL_GPIO_Init+0x136>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000736:	2a03      	cmp	r2, #3
 8000738:	f040 80b9 	bne.w	80008ae <HAL_GPIO_Init+0x1b6>
 800073c:	40ba      	lsls	r2, r7
 800073e:	43d4      	mvns	r4, r2
 8000740:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 8000742:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000744:	9c00      	ldr	r4, [sp, #0]
 8000746:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000748:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800074a:	00ee      	lsls	r6, r5, #3
      GPIOx->MODER = temp;
 800074c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800074e:	d5df      	bpl.n	8000710 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000750:	2200      	movs	r2, #0
 8000752:	9203      	str	r2, [sp, #12]
 8000754:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8000758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800075c:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 8000760:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8000764:	f023 0403 	bic.w	r4, r3, #3
 8000768:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800076c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000770:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8000774:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000776:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800077c:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077e:	00b6      	lsls	r6, r6, #2
 8000780:	220f      	movs	r2, #15
 8000782:	40b2      	lsls	r2, r6
 8000784:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000788:	4f5a      	ldr	r7, [pc, #360]	; (80008f4 <HAL_GPIO_Init+0x1fc>)
 800078a:	42b8      	cmp	r0, r7
 800078c:	d020      	beq.n	80007d0 <HAL_GPIO_Init+0xd8>
 800078e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000792:	42b8      	cmp	r0, r7
 8000794:	f000 8090 	beq.w	80008b8 <HAL_GPIO_Init+0x1c0>
 8000798:	4f57      	ldr	r7, [pc, #348]	; (80008f8 <HAL_GPIO_Init+0x200>)
 800079a:	42b8      	cmp	r0, r7
 800079c:	f000 8091 	beq.w	80008c2 <HAL_GPIO_Init+0x1ca>
 80007a0:	4f56      	ldr	r7, [pc, #344]	; (80008fc <HAL_GPIO_Init+0x204>)
 80007a2:	42b8      	cmp	r0, r7
 80007a4:	f000 8092 	beq.w	80008cc <HAL_GPIO_Init+0x1d4>
 80007a8:	4f55      	ldr	r7, [pc, #340]	; (8000900 <HAL_GPIO_Init+0x208>)
 80007aa:	42b8      	cmp	r0, r7
 80007ac:	f000 8093 	beq.w	80008d6 <HAL_GPIO_Init+0x1de>
 80007b0:	4f54      	ldr	r7, [pc, #336]	; (8000904 <HAL_GPIO_Init+0x20c>)
 80007b2:	42b8      	cmp	r0, r7
 80007b4:	f000 8094 	beq.w	80008e0 <HAL_GPIO_Init+0x1e8>
 80007b8:	4f53      	ldr	r7, [pc, #332]	; (8000908 <HAL_GPIO_Init+0x210>)
 80007ba:	42b8      	cmp	r0, r7
 80007bc:	f000 8095 	beq.w	80008ea <HAL_GPIO_Init+0x1f2>
 80007c0:	4f52      	ldr	r7, [pc, #328]	; (800090c <HAL_GPIO_Init+0x214>)
 80007c2:	42b8      	cmp	r0, r7
 80007c4:	bf0c      	ite	eq
 80007c6:	2707      	moveq	r7, #7
 80007c8:	2708      	movne	r7, #8
 80007ca:	fa07 f606 	lsl.w	r6, r7, r6
 80007ce:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007d0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80007d2:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 80007d6:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007da:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80007dc:	bf54      	ite	pl
 80007de:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80007e0:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 80007e4:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80007e8:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ec:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80007ee:	bf54      	ite	pl
 80007f0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80007f2:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 80007f6:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007fa:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007fe:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000800:	bf54      	ite	pl
 8000802:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000804:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8000808:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 800080c:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000810:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000812:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8000816:	bf54      	ite	pl
 8000818:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800081a:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081e:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8000820:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000824:	f47f af78 	bne.w	8000718 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000828:	b005      	add	sp, #20
 800082a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800082e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000830:	2403      	movs	r4, #3
 8000832:	40bc      	lsls	r4, r7
 8000834:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000838:	f8d9 600c 	ldr.w	r6, [r9, #12]
 800083c:	40be      	lsls	r6, r7
 800083e:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8000842:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000844:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000848:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800084c:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000850:	409e      	lsls	r6, r3
 8000852:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000856:	43e4      	mvns	r4, r4
 8000858:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 800085a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800085c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800085e:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000862:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8000866:	40be      	lsls	r6, r7
 8000868:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800086c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800086e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000870:	d001      	beq.n	8000876 <HAL_GPIO_Init+0x17e>
 8000872:	40ba      	lsls	r2, r7
 8000874:	e765      	b.n	8000742 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8000876:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800087a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800087e:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000882:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8000886:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000888:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800088c:	240f      	movs	r4, #15
 800088e:	fa04 f60e 	lsl.w	r6, r4, lr
 8000892:	9c01      	ldr	r4, [sp, #4]
 8000894:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000898:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800089c:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800089e:	fa04 f60e 	lsl.w	r6, r4, lr
 80008a2:	9c01      	ldr	r4, [sp, #4]
 80008a4:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 80008a6:	40ba      	lsls	r2, r7
 80008a8:	f8c8 6020 	str.w	r6, [r8, #32]
 80008ac:	e749      	b.n	8000742 <HAL_GPIO_Init+0x4a>
 80008ae:	2403      	movs	r4, #3
 80008b0:	40bc      	lsls	r4, r7
 80008b2:	43e4      	mvns	r4, r4
 80008b4:	9400      	str	r4, [sp, #0]
 80008b6:	e7d1      	b.n	800085c <HAL_GPIO_Init+0x164>
 80008b8:	2701      	movs	r7, #1
 80008ba:	fa07 f606 	lsl.w	r6, r7, r6
 80008be:	4332      	orrs	r2, r6
 80008c0:	e786      	b.n	80007d0 <HAL_GPIO_Init+0xd8>
 80008c2:	2702      	movs	r7, #2
 80008c4:	fa07 f606 	lsl.w	r6, r7, r6
 80008c8:	4332      	orrs	r2, r6
 80008ca:	e781      	b.n	80007d0 <HAL_GPIO_Init+0xd8>
 80008cc:	2703      	movs	r7, #3
 80008ce:	fa07 f606 	lsl.w	r6, r7, r6
 80008d2:	4332      	orrs	r2, r6
 80008d4:	e77c      	b.n	80007d0 <HAL_GPIO_Init+0xd8>
 80008d6:	2704      	movs	r7, #4
 80008d8:	fa07 f606 	lsl.w	r6, r7, r6
 80008dc:	4332      	orrs	r2, r6
 80008de:	e777      	b.n	80007d0 <HAL_GPIO_Init+0xd8>
 80008e0:	2705      	movs	r7, #5
 80008e2:	fa07 f606 	lsl.w	r6, r7, r6
 80008e6:	4332      	orrs	r2, r6
 80008e8:	e772      	b.n	80007d0 <HAL_GPIO_Init+0xd8>
 80008ea:	2706      	movs	r7, #6
 80008ec:	fa07 f606 	lsl.w	r6, r7, r6
 80008f0:	4332      	orrs	r2, r6
 80008f2:	e76d      	b.n	80007d0 <HAL_GPIO_Init+0xd8>
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	40021000 	.word	0x40021000
 8000904:	40021400 	.word	0x40021400
 8000908:	40021800 	.word	0x40021800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40023800 	.word	0x40023800
 8000914:	40013c00 	.word	0x40013c00

08000918 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000918:	b902      	cbnz	r2, 800091c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800091a:	0409      	lsls	r1, r1, #16
 800091c:	6181      	str	r1, [r0, #24]
  }
}
 800091e:	4770      	bx	lr

08000920 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000920:	2800      	cmp	r0, #0
 8000922:	f000 81a5 	beq.w	8000c70 <HAL_RCC_OscConfig+0x350>
{
 8000926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800092a:	6803      	ldr	r3, [r0, #0]
 800092c:	07dd      	lsls	r5, r3, #31
{
 800092e:	b082      	sub	sp, #8
 8000930:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000932:	d52f      	bpl.n	8000994 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000934:	49ac      	ldr	r1, [pc, #688]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000936:	688a      	ldr	r2, [r1, #8]
 8000938:	f002 020c 	and.w	r2, r2, #12
 800093c:	2a04      	cmp	r2, #4
 800093e:	f000 80ec 	beq.w	8000b1a <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000942:	688a      	ldr	r2, [r1, #8]
 8000944:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000948:	2a08      	cmp	r2, #8
 800094a:	f000 80e2 	beq.w	8000b12 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800094e:	6863      	ldr	r3, [r4, #4]
 8000950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000954:	f000 80eb 	beq.w	8000b2e <HAL_RCC_OscConfig+0x20e>
 8000958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800095c:	f000 8178 	beq.w	8000c50 <HAL_RCC_OscConfig+0x330>
 8000960:	4da1      	ldr	r5, [pc, #644]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000962:	682a      	ldr	r2, [r5, #0]
 8000964:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000968:	602a      	str	r2, [r5, #0]
 800096a:	682a      	ldr	r2, [r5, #0]
 800096c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000970:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000972:	2b00      	cmp	r3, #0
 8000974:	f040 80e0 	bne.w	8000b38 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000978:	f7ff fe40 	bl	80005fc <HAL_GetTick>
 800097c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800097e:	e005      	b.n	800098c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000980:	f7ff fe3c 	bl	80005fc <HAL_GetTick>
 8000984:	1b80      	subs	r0, r0, r6
 8000986:	2864      	cmp	r0, #100	; 0x64
 8000988:	f200 8100 	bhi.w	8000b8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	039b      	lsls	r3, r3, #14
 8000990:	d4f6      	bmi.n	8000980 <HAL_RCC_OscConfig+0x60>
 8000992:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000994:	079f      	lsls	r7, r3, #30
 8000996:	d528      	bpl.n	80009ea <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000998:	4a93      	ldr	r2, [pc, #588]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 800099a:	6891      	ldr	r1, [r2, #8]
 800099c:	f011 0f0c 	tst.w	r1, #12
 80009a0:	f000 8090 	beq.w	8000ac4 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009a4:	6891      	ldr	r1, [r2, #8]
 80009a6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009aa:	2908      	cmp	r1, #8
 80009ac:	f000 8086 	beq.w	8000abc <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009b0:	68e3      	ldr	r3, [r4, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 8106 	beq.w	8000bc4 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009b8:	4b8c      	ldr	r3, [pc, #560]	; (8000bec <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ba:	4e8b      	ldr	r6, [pc, #556]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80009bc:	2201      	movs	r2, #1
 80009be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009c0:	f7ff fe1c 	bl	80005fc <HAL_GetTick>
 80009c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c6:	e005      	b.n	80009d4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c8:	f7ff fe18 	bl	80005fc <HAL_GetTick>
 80009cc:	1b40      	subs	r0, r0, r5
 80009ce:	2802      	cmp	r0, #2
 80009d0:	f200 80dc 	bhi.w	8000b8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d4:	6833      	ldr	r3, [r6, #0]
 80009d6:	0798      	lsls	r0, r3, #30
 80009d8:	d5f6      	bpl.n	80009c8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009da:	6833      	ldr	r3, [r6, #0]
 80009dc:	6922      	ldr	r2, [r4, #16]
 80009de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009e6:	6033      	str	r3, [r6, #0]
 80009e8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ea:	071a      	lsls	r2, r3, #28
 80009ec:	d452      	bmi.n	8000a94 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ee:	0758      	lsls	r0, r3, #29
 80009f0:	d52f      	bpl.n	8000a52 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f2:	4a7d      	ldr	r2, [pc, #500]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 80009f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009f6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80009fa:	d07e      	beq.n	8000afa <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 80009fc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009fe:	4e7c      	ldr	r6, [pc, #496]	; (8000bf0 <HAL_RCC_OscConfig+0x2d0>)
 8000a00:	6833      	ldr	r3, [r6, #0]
 8000a02:	05d9      	lsls	r1, r3, #23
 8000a04:	f140 80b2 	bpl.w	8000b6c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a08:	68a3      	ldr	r3, [r4, #8]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	f000 80c2 	beq.w	8000b94 <HAL_RCC_OscConfig+0x274>
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	f000 812f 	beq.w	8000c74 <HAL_RCC_OscConfig+0x354>
 8000a16:	4e74      	ldr	r6, [pc, #464]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000a18:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8000a1a:	f022 0201 	bic.w	r2, r2, #1
 8000a1e:	6732      	str	r2, [r6, #112]	; 0x70
 8000a20:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8000a22:	f022 0204 	bic.w	r2, r2, #4
 8000a26:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f040 80b8 	bne.w	8000b9e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a2e:	f7ff fde5 	bl	80005fc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a32:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a36:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a38:	e005      	b.n	8000a46 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a3a:	f7ff fddf 	bl	80005fc <HAL_GetTick>
 8000a3e:	1bc0      	subs	r0, r0, r7
 8000a40:	4540      	cmp	r0, r8
 8000a42:	f200 80a3 	bhi.w	8000b8c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a46:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000a48:	0798      	lsls	r0, r3, #30
 8000a4a:	d4f6      	bmi.n	8000a3a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	f040 8109 	bne.w	8000c64 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a52:	69a0      	ldr	r0, [r4, #24]
 8000a54:	b1d0      	cbz	r0, 8000a8c <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a56:	4d64      	ldr	r5, [pc, #400]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000a58:	68ab      	ldr	r3, [r5, #8]
 8000a5a:	f003 030c 	and.w	r3, r3, #12
 8000a5e:	2b08      	cmp	r3, #8
 8000a60:	f000 80cc 	beq.w	8000bfc <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a64:	4b63      	ldr	r3, [pc, #396]	; (8000bf4 <HAL_RCC_OscConfig+0x2d4>)
 8000a66:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a68:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a6a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a6c:	f000 810c 	beq.w	8000c88 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a70:	f7ff fdc4 	bl	80005fc <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a74:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000a76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a78:	e005      	b.n	8000a86 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a7a:	f7ff fdbf 	bl	80005fc <HAL_GetTick>
 8000a7e:	1b40      	subs	r0, r0, r5
 8000a80:	2802      	cmp	r0, #2
 8000a82:	f200 8083 	bhi.w	8000b8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	019b      	lsls	r3, r3, #6
 8000a8a:	d4f6      	bmi.n	8000a7a <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000a8c:	2000      	movs	r0, #0
}
 8000a8e:	b002      	add	sp, #8
 8000a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a94:	6963      	ldr	r3, [r4, #20]
 8000a96:	b303      	cbz	r3, 8000ada <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8000a98:	4b57      	ldr	r3, [pc, #348]	; (8000bf8 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a9a:	4e53      	ldr	r6, [pc, #332]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000aa0:	f7ff fdac 	bl	80005fc <HAL_GetTick>
 8000aa4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa6:	e004      	b.n	8000ab2 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fda8 	bl	80005fc <HAL_GetTick>
 8000aac:	1b40      	subs	r0, r0, r5
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d86c      	bhi.n	8000b8c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ab2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000ab4:	079b      	lsls	r3, r3, #30
 8000ab6:	d5f7      	bpl.n	8000aa8 <HAL_RCC_OscConfig+0x188>
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	e798      	b.n	80009ee <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000abc:	6852      	ldr	r2, [r2, #4]
 8000abe:	0256      	lsls	r6, r2, #9
 8000ac0:	f53f af76 	bmi.w	80009b0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ac4:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	0795      	lsls	r5, r2, #30
 8000aca:	d543      	bpl.n	8000b54 <HAL_RCC_OscConfig+0x234>
 8000acc:	68e2      	ldr	r2, [r4, #12]
 8000ace:	2a01      	cmp	r2, #1
 8000ad0:	d040      	beq.n	8000b54 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8000ad2:	2001      	movs	r0, #1
}
 8000ad4:	b002      	add	sp, #8
 8000ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000ada:	4a47      	ldr	r2, [pc, #284]	; (8000bf8 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000adc:	4e42      	ldr	r6, [pc, #264]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8000ade:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ae0:	f7ff fd8c 	bl	80005fc <HAL_GetTick>
 8000ae4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae6:	e004      	b.n	8000af2 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae8:	f7ff fd88 	bl	80005fc <HAL_GetTick>
 8000aec:	1b40      	subs	r0, r0, r5
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d84c      	bhi.n	8000b8c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000af2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000af4:	079f      	lsls	r7, r3, #30
 8000af6:	d4f7      	bmi.n	8000ae8 <HAL_RCC_OscConfig+0x1c8>
 8000af8:	e7de      	b.n	8000ab8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b0e:	2501      	movs	r5, #1
 8000b10:	e775      	b.n	80009fe <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b12:	684a      	ldr	r2, [r1, #4]
 8000b14:	0250      	lsls	r0, r2, #9
 8000b16:	f57f af1a 	bpl.w	800094e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1a:	4a33      	ldr	r2, [pc, #204]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	0391      	lsls	r1, r2, #14
 8000b20:	f57f af38 	bpl.w	8000994 <HAL_RCC_OscConfig+0x74>
 8000b24:	6862      	ldr	r2, [r4, #4]
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	f47f af34 	bne.w	8000994 <HAL_RCC_OscConfig+0x74>
 8000b2c:	e7d1      	b.n	8000ad2 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000b30:	6813      	ldr	r3, [r2, #0]
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000b38:	f7ff fd60 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3c:	4e2a      	ldr	r6, [pc, #168]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b40:	e004      	b.n	8000b4c <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b42:	f7ff fd5b 	bl	80005fc <HAL_GetTick>
 8000b46:	1b40      	subs	r0, r0, r5
 8000b48:	2864      	cmp	r0, #100	; 0x64
 8000b4a:	d81f      	bhi.n	8000b8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4c:	6833      	ldr	r3, [r6, #0]
 8000b4e:	039a      	lsls	r2, r3, #14
 8000b50:	d5f7      	bpl.n	8000b42 <HAL_RCC_OscConfig+0x222>
 8000b52:	e71e      	b.n	8000992 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b54:	4924      	ldr	r1, [pc, #144]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000b56:	6920      	ldr	r0, [r4, #16]
 8000b58:	680a      	ldr	r2, [r1, #0]
 8000b5a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b5e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000b62:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b64:	071a      	lsls	r2, r3, #28
 8000b66:	f57f af42 	bpl.w	80009ee <HAL_RCC_OscConfig+0xce>
 8000b6a:	e793      	b.n	8000a94 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b6c:	6833      	ldr	r3, [r6, #0]
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b74:	f7ff fd42 	bl	80005fc <HAL_GetTick>
 8000b78:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b7a:	6833      	ldr	r3, [r6, #0]
 8000b7c:	05da      	lsls	r2, r3, #23
 8000b7e:	f53f af43 	bmi.w	8000a08 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b82:	f7ff fd3b 	bl	80005fc <HAL_GetTick>
 8000b86:	1bc0      	subs	r0, r0, r7
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d9f6      	bls.n	8000b7a <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8000b8c:	2003      	movs	r0, #3
}
 8000b8e:	b002      	add	sp, #8
 8000b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000b96:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b9e:	f7ff fd2d 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba2:	4f11      	ldr	r7, [pc, #68]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ba4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000baa:	e004      	b.n	8000bb6 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bac:	f7ff fd26 	bl	80005fc <HAL_GetTick>
 8000bb0:	1b80      	subs	r0, r0, r6
 8000bb2:	4540      	cmp	r0, r8
 8000bb4:	d8ea      	bhi.n	8000b8c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bb8:	079b      	lsls	r3, r3, #30
 8000bba:	d5f7      	bpl.n	8000bac <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	f43f af48 	beq.w	8000a52 <HAL_RCC_OscConfig+0x132>
 8000bc2:	e04f      	b.n	8000c64 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bc6:	4e08      	ldr	r6, [pc, #32]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8000bc8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000bca:	f7ff fd17 	bl	80005fc <HAL_GetTick>
 8000bce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd0:	e004      	b.n	8000bdc <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bd2:	f7ff fd13 	bl	80005fc <HAL_GetTick>
 8000bd6:	1b40      	subs	r0, r0, r5
 8000bd8:	2802      	cmp	r0, #2
 8000bda:	d8d7      	bhi.n	8000b8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bdc:	6833      	ldr	r3, [r6, #0]
 8000bde:	0799      	lsls	r1, r3, #30
 8000be0:	d4f7      	bmi.n	8000bd2 <HAL_RCC_OscConfig+0x2b2>
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	e701      	b.n	80009ea <HAL_RCC_OscConfig+0xca>
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	42470000 	.word	0x42470000
 8000bf0:	40007000 	.word	0x40007000
 8000bf4:	42470060 	.word	0x42470060
 8000bf8:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bfc:	2801      	cmp	r0, #1
 8000bfe:	f43f af46 	beq.w	8000a8e <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8000c02:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c04:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c06:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c0a:	4291      	cmp	r1, r2
 8000c0c:	f47f af61 	bne.w	8000ad2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c10:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000c12:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c16:	4291      	cmp	r1, r2
 8000c18:	f47f af5b 	bne.w	8000ad2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c1e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000c22:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000c24:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000c28:	f47f af53 	bne.w	8000ad2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000c2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c2e:	0852      	lsrs	r2, r2, #1
 8000c30:	3a01      	subs	r2, #1
 8000c32:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c36:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000c3a:	f47f af4a 	bne.w	8000ad2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000c3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c40:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000c44:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8000c48:	bf14      	ite	ne
 8000c4a:	2001      	movne	r0, #1
 8000c4c:	2000      	moveq	r0, #0
 8000c4e:	e71e      	b.n	8000a8e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c50:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_RCC_OscConfig+0x3c4>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c60:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c62:	e769      	b.n	8000b38 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c64:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_RCC_OscConfig+0x3c4>)
 8000c66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	e6f0      	b.n	8000a52 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8000c70:	2001      	movs	r0, #1
}
 8000c72:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_RCC_OscConfig+0x3c4>)
 8000c76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c78:	f042 0204 	orr.w	r2, r2, #4
 8000c7c:	671a      	str	r2, [r3, #112]	; 0x70
 8000c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c80:	f042 0201 	orr.w	r2, r2, #1
 8000c84:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c86:	e78a      	b.n	8000b9e <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8000c88:	f7ff fcb8 	bl	80005fc <HAL_GetTick>
 8000c8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c8e:	e005      	b.n	8000c9c <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c90:	f7ff fcb4 	bl	80005fc <HAL_GetTick>
 8000c94:	1b80      	subs	r0, r0, r6
 8000c96:	2802      	cmp	r0, #2
 8000c98:	f63f af78 	bhi.w	8000b8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	0199      	lsls	r1, r3, #6
 8000ca0:	d4f6      	bmi.n	8000c90 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ca2:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8000ca6:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8000caa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000cac:	4333      	orrs	r3, r6
 8000cae:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000cb2:	0852      	lsrs	r2, r2, #1
 8000cb4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000cb8:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cbc:	4e09      	ldr	r6, [pc, #36]	; (8000ce4 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8000cc2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cc4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cc6:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc98 	bl	80005fc <HAL_GetTick>
 8000ccc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cce:	e005      	b.n	8000cdc <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd0:	f7ff fc94 	bl	80005fc <HAL_GetTick>
 8000cd4:	1b00      	subs	r0, r0, r4
 8000cd6:	2802      	cmp	r0, #2
 8000cd8:	f63f af58 	bhi.w	8000b8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cdc:	6833      	ldr	r3, [r6, #0]
 8000cde:	019a      	lsls	r2, r3, #6
 8000ce0:	d5f6      	bpl.n	8000cd0 <HAL_RCC_OscConfig+0x3b0>
 8000ce2:	e6d3      	b.n	8000a8c <HAL_RCC_OscConfig+0x16c>
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	42470060 	.word	0x42470060

08000cec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cec:	4917      	ldr	r1, [pc, #92]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x60>)
{
 8000cee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cf0:	688b      	ldr	r3, [r1, #8]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d01b      	beq.n	8000d32 <HAL_RCC_GetSysClockFreq+0x46>
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d117      	bne.n	8000d2e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cfe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d00:	684b      	ldr	r3, [r1, #4]
 8000d02:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d0a:	d114      	bne.n	8000d36 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d0c:	6849      	ldr	r1, [r1, #4]
 8000d0e:	4810      	ldr	r0, [pc, #64]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x64>)
 8000d10:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d14:	fba1 0100 	umull	r0, r1, r1, r0
 8000d18:	f7ff faaa 	bl	8000270 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x60>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d24:	3301      	adds	r3, #1
 8000d26:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000d28:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d2c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8000d30:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000d34:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d36:	684b      	ldr	r3, [r1, #4]
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x68>)
 8000d3a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000d3e:	fba3 0100 	umull	r0, r1, r3, r0
 8000d42:	2300      	movs	r3, #0
 8000d44:	f7ff fa94 	bl	8000270 <__aeabi_uldivmod>
 8000d48:	e7e8      	b.n	8000d1c <HAL_RCC_GetSysClockFreq+0x30>
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	00f42400 	.word	0x00f42400
 8000d54:	007a1200 	.word	0x007a1200

08000d58 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	f000 8087 	beq.w	8000e6c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d5e:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000d60:	6813      	ldr	r3, [r2, #0]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	428b      	cmp	r3, r1
{
 8000d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d6c:	460d      	mov	r5, r1
 8000d6e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d70:	d209      	bcs.n	8000d86 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d72:	b2cb      	uxtb	r3, r1
 8000d74:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d002      	beq.n	8000d86 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8000d80:	2001      	movs	r0, #1
}
 8000d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	0798      	lsls	r0, r3, #30
 8000d8a:	d514      	bpl.n	8000db6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d8c:	0759      	lsls	r1, r3, #29
 8000d8e:	d504      	bpl.n	8000d9a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d90:	493c      	ldr	r1, [pc, #240]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000d92:	688a      	ldr	r2, [r1, #8]
 8000d94:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000d98:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d9a:	071a      	lsls	r2, r3, #28
 8000d9c:	d504      	bpl.n	8000da8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d9e:	4939      	ldr	r1, [pc, #228]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000da0:	688a      	ldr	r2, [r1, #8]
 8000da2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000da6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000da8:	4936      	ldr	r1, [pc, #216]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000daa:	68a0      	ldr	r0, [r4, #8]
 8000dac:	688a      	ldr	r2, [r1, #8]
 8000dae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000db2:	4302      	orrs	r2, r0
 8000db4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000db6:	07df      	lsls	r7, r3, #31
 8000db8:	d521      	bpl.n	8000dfe <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dba:	6862      	ldr	r2, [r4, #4]
 8000dbc:	2a01      	cmp	r2, #1
 8000dbe:	d057      	beq.n	8000e70 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dc0:	1e93      	subs	r3, r2, #2
 8000dc2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dc8:	d94d      	bls.n	8000e66 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dca:	0799      	lsls	r1, r3, #30
 8000dcc:	d5d8      	bpl.n	8000d80 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dce:	4e2d      	ldr	r6, [pc, #180]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000dd0:	68b3      	ldr	r3, [r6, #8]
 8000dd2:	f023 0303 	bic.w	r3, r3, #3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000dda:	f7ff fc0f 	bl	80005fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dde:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000de2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000de4:	e004      	b.n	8000df0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de6:	f7ff fc09 	bl	80005fc <HAL_GetTick>
 8000dea:	1bc0      	subs	r0, r0, r7
 8000dec:	4540      	cmp	r0, r8
 8000dee:	d844      	bhi.n	8000e7a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000df0:	68b3      	ldr	r3, [r6, #8]
 8000df2:	6862      	ldr	r2, [r4, #4]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000dfc:	d1f3      	bne.n	8000de6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dfe:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000e00:	6813      	ldr	r3, [r2, #0]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	42ab      	cmp	r3, r5
 8000e08:	d906      	bls.n	8000e18 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e0a:	b2eb      	uxtb	r3, r5
 8000e0c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e0e:	6813      	ldr	r3, [r2, #0]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	42ab      	cmp	r3, r5
 8000e16:	d1b3      	bne.n	8000d80 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	075a      	lsls	r2, r3, #29
 8000e1c:	d506      	bpl.n	8000e2c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e1e:	4919      	ldr	r1, [pc, #100]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000e20:	68e0      	ldr	r0, [r4, #12]
 8000e22:	688a      	ldr	r2, [r1, #8]
 8000e24:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000e28:	4302      	orrs	r2, r0
 8000e2a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e2c:	071b      	lsls	r3, r3, #28
 8000e2e:	d507      	bpl.n	8000e40 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000e32:	6921      	ldr	r1, [r4, #16]
 8000e34:	6893      	ldr	r3, [r2, #8]
 8000e36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e3e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e40:	f7ff ff54 	bl	8000cec <HAL_RCC_GetSysClockFreq>
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000e46:	4c10      	ldr	r4, [pc, #64]	; (8000e88 <HAL_RCC_ClockConfig+0x130>)
 8000e48:	6892      	ldr	r2, [r2, #8]
 8000e4a:	4910      	ldr	r1, [pc, #64]	; (8000e8c <HAL_RCC_ClockConfig+0x134>)
 8000e4c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000e50:	4603      	mov	r3, r0
 8000e52:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e56:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8000e58:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e5a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8000e5c:	f7ff fb84 	bl	8000568 <HAL_InitTick>
  return HAL_OK;
 8000e60:	2000      	movs	r0, #0
}
 8000e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e66:	0198      	lsls	r0, r3, #6
 8000e68:	d4b1      	bmi.n	8000dce <HAL_RCC_ClockConfig+0x76>
 8000e6a:	e789      	b.n	8000d80 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8000e6c:	2001      	movs	r0, #1
}
 8000e6e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	039e      	lsls	r6, r3, #14
 8000e76:	d4aa      	bmi.n	8000dce <HAL_RCC_ClockConfig+0x76>
 8000e78:	e782      	b.n	8000d80 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	e781      	b.n	8000d82 <HAL_RCC_ClockConfig+0x2a>
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00
 8000e84:	40023800 	.word	0x40023800
 8000e88:	08003a38 	.word	0x08003a38
 8000e8c:	20000060 	.word	0x20000060
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e98:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8000e9a:	4905      	ldr	r1, [pc, #20]	; (8000eb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e9c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000ea0:	6808      	ldr	r0, [r1, #0]
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ea4:	40d8      	lsrs	r0, r3
 8000ea6:	4770      	bx	lr
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	08003a48 	.word	0x08003a48
 8000eb0:	20000060 	.word	0x20000060

08000eb4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8000eba:	4905      	ldr	r1, [pc, #20]	; (8000ed0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ebc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ec0:	6808      	ldr	r0, [r1, #0]
 8000ec2:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ec4:	40d8      	lsrs	r0, r3
 8000ec6:	4770      	bx	lr
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	08003a48 	.word	0x08003a48
 8000ed0:	20000060 	.word	0x20000060

08000ed4 <HAL_SRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8000ed4:	b338      	cbz	r0, 8000f26 <HAL_SRAM_Init+0x52>
{ 
 8000ed6:	b570      	push	{r4, r5, r6, lr}
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8000ed8:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8000edc:	4615      	mov	r5, r2
 8000ede:	460e      	mov	r6, r1
 8000ee0:	4604      	mov	r4, r0
 8000ee2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ee6:	b1cb      	cbz	r3, 8000f1c <HAL_SRAM_Init+0x48>
    HAL_SRAM_MspInit(hsram);
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8000ee8:	4621      	mov	r1, r4
 8000eea:	f851 0b08 	ldr.w	r0, [r1], #8
 8000eee:	f000 f941 	bl	8001174 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8000ef2:	68a2      	ldr	r2, [r4, #8]
 8000ef4:	6820      	ldr	r0, [r4, #0]
 8000ef6:	4631      	mov	r1, r6
 8000ef8:	f000 f968 	bl	80011cc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8000efc:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8000f00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f02:	4629      	mov	r1, r5
 8000f04:	f000 f982 	bl	800120c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8000f08:	68a1      	ldr	r1, [r4, #8]
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 8000f18:	2000      	movs	r0, #0
}
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8000f1c:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    HAL_SRAM_MspInit(hsram);
 8000f20:	f001 fbfc 	bl	800271c <HAL_SRAM_MspInit>
 8000f24:	e7e0      	b.n	8000ee8 <HAL_SRAM_Init+0x14>
     return HAL_ERROR;
 8000f26:	2001      	movs	r0, #1
}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f000 8090 	beq.w	8001052 <HAL_UART_Init+0x126>
{
 8000f32:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000f34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f38:	4604      	mov	r4, r0
 8000f3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8082 	beq.w	8001048 <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f44:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f46:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f48:	2224      	movs	r2, #36	; 0x24
 8000f4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8000f4e:	68d8      	ldr	r0, [r3, #12]
 8000f50:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f54:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8000f58:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f5a:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f5c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f5e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000f62:	4329      	orrs	r1, r5
 8000f64:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000f66:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f68:	6965      	ldr	r5, [r4, #20]
 8000f6a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8000f6c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f70:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8000f72:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f76:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f80:	4935      	ldr	r1, [pc, #212]	; (8001058 <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f86:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f88:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f8a:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f8c:	d035      	beq.n	8000ffa <HAL_UART_Init+0xce>
 8000f8e:	4a33      	ldr	r2, [pc, #204]	; (800105c <HAL_UART_Init+0x130>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d032      	beq.n	8000ffa <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f94:	f7ff ff7e 	bl	8000e94 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f98:	69e3      	ldr	r3, [r4, #28]
 8000f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f9e:	d032      	beq.n	8001006 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fa0:	6863      	ldr	r3, [r4, #4]
 8000fa2:	4e2f      	ldr	r6, [pc, #188]	; (8001060 <HAL_UART_Init+0x134>)
 8000fa4:	2119      	movs	r1, #25
 8000fa6:	009a      	lsls	r2, r3, #2
 8000fa8:	fba0 0101 	umull	r0, r1, r0, r1
 8000fac:	0f9b      	lsrs	r3, r3, #30
 8000fae:	f7ff f95f 	bl	8000270 <__aeabi_uldivmod>
 8000fb2:	fba6 2500 	umull	r2, r5, r6, r0
 8000fb6:	096d      	lsrs	r5, r5, #5
 8000fb8:	2164      	movs	r1, #100	; 0x64
 8000fba:	fb01 0215 	mls	r2, r1, r5, r0
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	3232      	adds	r2, #50	; 0x32
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	fba6 1202 	umull	r1, r2, r6, r2
 8000fc8:	012d      	lsls	r5, r5, #4
 8000fca:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8000fce:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fd6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fde:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fe0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fe2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8000fe4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8000fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fec:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000fee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000ff2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8000ff6:	4628      	mov	r0, r5
}
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8000ffa:	f7ff ff5b 	bl	8000eb4 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ffe:	69e3      	ldr	r3, [r4, #28]
 8001000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001004:	d1cc      	bne.n	8000fa0 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001006:	6862      	ldr	r2, [r4, #4]
 8001008:	4e15      	ldr	r6, [pc, #84]	; (8001060 <HAL_UART_Init+0x134>)
 800100a:	1892      	adds	r2, r2, r2
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	f04f 0119 	mov.w	r1, #25
 8001014:	415b      	adcs	r3, r3
 8001016:	fba0 0101 	umull	r0, r1, r0, r1
 800101a:	f7ff f929 	bl	8000270 <__aeabi_uldivmod>
 800101e:	fba6 2100 	umull	r2, r1, r6, r0
 8001022:	094d      	lsrs	r5, r1, #5
 8001024:	2164      	movs	r1, #100	; 0x64
 8001026:	fb01 0215 	mls	r2, r1, r5, r0
 800102a:	00d2      	lsls	r2, r2, #3
 800102c:	3232      	adds	r2, #50	; 0x32
 800102e:	fba6 1202 	umull	r1, r2, r6, r2
 8001032:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8001036:	0912      	lsrs	r2, r2, #4
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800103e:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001042:	440a      	add	r2, r1
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	e7c3      	b.n	8000fd0 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8001048:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800104c:	f001 fb2c 	bl	80026a8 <HAL_UART_MspInit>
 8001050:	e778      	b.n	8000f44 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8001052:	2001      	movs	r0, #1
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40011000 	.word	0x40011000
 800105c:	40011400 	.word	0x40011400
 8001060:	51eb851f 	.word	0x51eb851f

08001064 <HAL_UART_Transmit>:
{
 8001064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001068:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800106a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800106e:	2820      	cmp	r0, #32
 8001070:	d168      	bne.n	8001144 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 8001072:	4688      	mov	r8, r1
 8001074:	2900      	cmp	r1, #0
 8001076:	d040      	beq.n	80010fa <HAL_UART_Transmit+0x96>
 8001078:	4617      	mov	r7, r2
 800107a:	2a00      	cmp	r2, #0
 800107c:	d03d      	beq.n	80010fa <HAL_UART_Transmit+0x96>
 800107e:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8001080:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001084:	2b01      	cmp	r3, #1
 8001086:	d05d      	beq.n	8001144 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001088:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800108a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800108c:	f04f 0900 	mov.w	r9, #0
 8001090:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8001094:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001098:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800109c:	f7ff faae 	bl	80005fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010a0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 80010a2:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80010a8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80010aa:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010ac:	d04d      	beq.n	800114a <HAL_UART_Transmit+0xe6>
    while (huart->TxXferCount > 0U)
 80010ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80010b0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80010b2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80010b4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d058      	beq.n	800116e <HAL_UART_Transmit+0x10a>
 80010bc:	6822      	ldr	r2, [r4, #0]
 80010be:	1c69      	adds	r1, r5, #1
 80010c0:	d11e      	bne.n	8001100 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	061b      	lsls	r3, r3, #24
 80010c6:	d5fc      	bpl.n	80010c2 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80010c8:	f1b8 0f00 	cmp.w	r8, #0
 80010cc:	d035      	beq.n	800113a <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80010ce:	f818 3b01 	ldrb.w	r3, [r8], #1
 80010d2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80010d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80010dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010de:	b29b      	uxth	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ec      	bne.n	80010be <HAL_UART_Transmit+0x5a>
 80010e4:	1c68      	adds	r0, r5, #1
 80010e6:	d136      	bne.n	8001156 <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	0659      	lsls	r1, r3, #25
 80010ec:	d5fc      	bpl.n	80010e8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80010ee:	2320      	movs	r3, #32
 80010f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80010f4:	2000      	movs	r0, #0
}
 80010f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
}
 80010fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001100:	6813      	ldr	r3, [r2, #0]
 8001102:	061f      	lsls	r7, r3, #24
 8001104:	d4e0      	bmi.n	80010c8 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001106:	b12d      	cbz	r5, 8001114 <HAL_UART_Transmit+0xb0>
 8001108:	f7ff fa78 	bl	80005fc <HAL_GetTick>
 800110c:	1b80      	subs	r0, r0, r6
 800110e:	4285      	cmp	r5, r0
 8001110:	6822      	ldr	r2, [r4, #0]
 8001112:	d2d4      	bcs.n	80010be <HAL_UART_Transmit+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001114:	68d3      	ldr	r3, [r2, #12]
 8001116:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800111a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800111c:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800111e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001120:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8001124:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001126:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001128:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800112c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8001130:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 8001134:	2003      	movs	r0, #3
}
 8001136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800113a:	f839 3b02 	ldrh.w	r3, [r9], #2
 800113e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001142:	e7c6      	b.n	80010d2 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8001144:	2002      	movs	r0, #2
}
 8001146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1ae      	bne.n	80010ae <HAL_UART_Transmit+0x4a>
 8001150:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8001152:	4698      	mov	r8, r3
 8001154:	e7ab      	b.n	80010ae <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001156:	6813      	ldr	r3, [r2, #0]
 8001158:	065b      	lsls	r3, r3, #25
 800115a:	d4c8      	bmi.n	80010ee <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800115c:	2d00      	cmp	r5, #0
 800115e:	d0d9      	beq.n	8001114 <HAL_UART_Transmit+0xb0>
 8001160:	f7ff fa4c 	bl	80005fc <HAL_GetTick>
 8001164:	1b80      	subs	r0, r0, r6
 8001166:	4285      	cmp	r5, r0
 8001168:	6822      	ldr	r2, [r4, #0]
 800116a:	d2bb      	bcs.n	80010e4 <HAL_UART_Transmit+0x80>
 800116c:	e7d2      	b.n	8001114 <HAL_UART_Transmit+0xb0>
 800116e:	6822      	ldr	r2, [r4, #0]
 8001170:	e7b8      	b.n	80010e4 <HAL_UART_Transmit+0x80>
 8001172:	bf00      	nop

08001174 <FSMC_NORSRAM_Init>:
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8001174:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
{ 
 8001178:	b4f0      	push	{r4, r5, r6, r7}
                     Init->MemoryType           |\
                     Init->MemoryDataWidth      |\
 800117a:	e9d1 6503 	ldrd	r6, r5, [r1, #12]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800117e:	4313      	orrs	r3, r2
                     Init->MemoryType           |\
 8001180:	4333      	orrs	r3, r6
                     Init->BurstAccessMode      |\
 8001182:	694c      	ldr	r4, [r1, #20]
                     Init->WrapMode             |\
                     Init->WaitSignalActive     |\
                     Init->WriteOperation       |\
                     Init->WaitSignal           |\
                     Init->ExtendedMode         |\
                     Init->AsynchronousWait     |\
 8001184:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
                     Init->MemoryDataWidth      |\
 8001186:	432b      	orrs	r3, r5
                     Init->WrapMode             |\
 8001188:	e9d1 6506 	ldrd	r6, r5, [r1, #24]
                     Init->BurstAccessMode      |\
 800118c:	4323      	orrs	r3, r4
                     Init->WaitSignalPolarity   |\
 800118e:	4333      	orrs	r3, r6
                     Init->WriteOperation       |\
 8001190:	e9d1 6408 	ldrd	r6, r4, [r1, #32]
                     Init->WrapMode             |\
 8001194:	432b      	orrs	r3, r5
                     Init->WaitSignalActive     |\
 8001196:	4333      	orrs	r3, r6
                     Init->ExtendedMode         |\
 8001198:	e9d1 650a 	ldrd	r6, r5, [r1, #40]	; 0x28
                     Init->WriteOperation       |\
 800119c:	4323      	orrs	r3, r4
 800119e:	680c      	ldr	r4, [r1, #0]
                     Init->WaitSignal           |\
 80011a0:	4333      	orrs	r3, r6
                     Init->ExtendedMode         |\
 80011a2:	432b      	orrs	r3, r5
                     Init->PageSize             |\
 80011a4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  tmpr = Device->BTCR[Init->NSBank];
 80011a6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80011aa:	4907      	ldr	r1, [pc, #28]	; (80011c8 <FSMC_NORSRAM_Init+0x54>)
                     Init->AsynchronousWait     |\
 80011ac:	433b      	orrs	r3, r7
                     Init->PageSize             |\
 80011ae:	4333      	orrs	r3, r6
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80011b0:	4029      	ands	r1, r5
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80011b2:	430b      	orrs	r3, r1
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80011b4:	2a08      	cmp	r2, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80011b6:	bf08      	it	eq
 80011b8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80011bc:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 80011c0:	2000      	movs	r0, #0
 80011c2:	bcf0      	pop	{r4, r5, r6, r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	fff00080 	.word	0xfff00080

080011cc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80011cc:	b470      	push	{r4, r5, r6}
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80011ce:	680b      	ldr	r3, [r1, #0]
 80011d0:	698d      	ldr	r5, [r1, #24]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80011d2:	684c      	ldr	r4, [r1, #4]
                    ((Timing->DataSetupTime) << 8U)            |\
 80011d4:	688e      	ldr	r6, [r1, #8]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80011d6:	432b      	orrs	r3, r5
 80011d8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80011dc:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 80011e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80011e4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80011e8:	6948      	ldr	r0, [r1, #20]
  tmpr = Device->BTCR[Bank + 1U];
 80011ea:	6851      	ldr	r1, [r2, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80011ec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80011f0:	3c01      	subs	r4, #1
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80011f2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80011f6:	3802      	subs	r0, #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80011f8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80011fc:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8001200:	430b      	orrs	r3, r1
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8001202:	2000      	movs	r0, #0
 8001204:	bc70      	pop	{r4, r5, r6}
  Device->BTCR[Bank + 1] = tmpr; 
 8001206:	6053      	str	r3, [r2, #4]
}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <FSMC_NORSRAM_Extended_Timing_Init>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800120c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001210:	d005      	beq.n	800121e <FSMC_NORSRAM_Extended_Timing_Init+0x12>
    
    Device->BWTR[Bank] = tmpr;
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001212:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001216:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 800121a:	2000      	movs	r0, #0
 800121c:	4770      	bx	lr
{
 800121e:	b470      	push	{r4, r5, r6}
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8001220:	680b      	ldr	r3, [r1, #0]
 8001222:	698d      	ldr	r5, [r1, #24]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8001224:	684c      	ldr	r4, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8001226:	432b      	orrs	r3, r5
 8001228:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
 800122c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8001230:	4906      	ldr	r1, [pc, #24]	; (800124c <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
    tmpr = Device->BWTR[Bank];
 8001232:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8001236:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800123a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800123e:	4021      	ands	r1, r4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8001240:	430b      	orrs	r3, r1
    Device->BWTR[Bank] = tmpr;
 8001242:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8001246:	bc70      	pop	{r4, r5, r6}
 8001248:	2000      	movs	r0, #0
 800124a:	4770      	bx	lr
 800124c:	cff00000 	.word	0xcff00000

08001250 <WIZCHIP_WRITE>:


void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
#if _USE_W5300_OPTIMIZE
	_W5300_DATA(AddrSel) = wb;
 8001250:	0040      	lsls	r0, r0, #1
 8001252:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8001256:	8001      	strh	r1, [r0, #0]
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
#endif
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
   uint16_t ret;
#if _USE_W5300_OPTIMIZE
   ret = _W5300_DATA(AddrSel);
 800125c:	0040      	lsls	r0, r0, #1
 800125e:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8001262:	8800      	ldrh	r0, [r0, #0]
   WIZCHIP.CS._deselect();

   WIZCHIP_CRITICAL_EXIT();
   #endif
   return ret;
}
 8001264:	b280      	uxth	r0, r0
 8001266:	4770      	bx	lr

08001268 <getTMSR>:
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
}
   
uint8_t getTMSR(uint8_t sn)
{
   if(sn & 0x01)
 8001268:	f010 0f01 	tst.w	r0, #1
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 800126c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   ret = _W5300_DATA(AddrSel);
 8001270:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8001274:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8001278:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800127c:	8800      	ldrh	r0, [r0, #0]
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 800127e:	bf14      	ite	ne
 8001280:	b2c0      	uxtbne	r0, r0
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8001282:	f3c0 2007 	ubfxeq	r0, r0, #8, #8
}
 8001286:	4770      	bx	lr

08001288 <getRMSR>:
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
}
   
uint8_t getRMSR(uint8_t sn)
{
   if(sn & 0x01)
 8001288:	f010 0f01 	tst.w	r0, #1
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 800128c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   ret = _W5300_DATA(AddrSel);
 8001290:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8001294:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8001298:	f100 0050 	add.w	r0, r0, #80	; 0x50
 800129c:	8800      	ldrh	r0, [r0, #0]
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 800129e:	bf14      	ite	ne
 80012a0:	b2c0      	uxtbne	r0, r0
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 80012a2:	f3c0 2007 	ubfxeq	r0, r0, #8, #8
}
 80012a6:	4770      	bx	lr

080012a8 <getSn_TX_FSR>:
{
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80012a8:	3008      	adds	r0, #8
{
 80012aa:	b430      	push	{r4, r5}
   ret = _W5300_DATA(AddrSel);
 80012ac:	01c5      	lsls	r5, r0, #7
 80012ae:	f105 45c8 	add.w	r5, r5, #1677721600	; 0x64000000
 80012b2:	462a      	mov	r2, r5
 80012b4:	324c      	adds	r2, #76	; 0x4c
 80012b6:	3548      	adds	r5, #72	; 0x48
   uint32_t free_tx_size1=1;
 80012b8:	2001      	movs	r0, #1
   ret = _W5300_DATA(AddrSel);
 80012ba:	882c      	ldrh	r4, [r5, #0]
 80012bc:	8813      	ldrh	r3, [r2, #0]
 80012be:	b29b      	uxth	r3, r3
   return ret;
 80012c0:	4601      	mov	r1, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80012c2:	ea43 4004 	orr.w	r0, r3, r4, lsl #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80012c6:	4281      	cmp	r1, r0
 80012c8:	d1f7      	bne.n	80012ba <getSn_TX_FSR+0x12>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
   }                                                                       
   return free_tx_size;                                                    
}                                                                          
 80012ca:	bc30      	pop	{r4, r5}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 80012d0:	b470      	push	{r4, r5, r6}
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80012d2:	f100 0508 	add.w	r5, r0, #8
   ret = _W5300_DATA(AddrSel);
 80012d6:	01ee      	lsls	r6, r5, #7
 80012d8:	f106 46c8 	add.w	r6, r6, #1677721600	; 0x64000000
 80012dc:	4635      	mov	r5, r6
 80012de:	3554      	adds	r5, #84	; 0x54
 80012e0:	3650      	adds	r6, #80	; 0x50
   uint32_t received_rx_size1=1;
 80012e2:	2201      	movs	r2, #1
   ret = _W5300_DATA(AddrSel);
 80012e4:	8834      	ldrh	r4, [r6, #0]
 80012e6:	882b      	ldrh	r3, [r5, #0]
 80012e8:	b29b      	uxth	r3, r3
   return ret;
 80012ea:	4611      	mov	r1, r2
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80012ec:	ea43 4204 	orr.w	r2, r3, r4, lsl #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
      if(received_rx_size == received_rx_size1) break;                                                                         
 80012f0:	4291      	cmp	r1, r2
 80012f2:	d1f7      	bne.n	80012e4 <getSn_RX_RSR+0x14>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <getSn_RX_RSR+0x34>)
 80012f6:	5c18      	ldrb	r0, [r3, r0]
 80012f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 80012fc:	4410      	add	r0, r2
 80012fe:	bc70      	pop	{r4, r5, r6}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200000e8 	.word	0x200000e8

08001308 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint32_t i = 0;
   if(len == 0)  return;
 8001308:	b18a      	cbz	r2, 800132e <wiz_send_data+0x26>
   
   for(i = 0; i < len ; i += 2)
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 800130a:	01c0      	lsls	r0, r0, #7
{
 800130c:	b470      	push	{r4, r5, r6}
	_W5300_DATA(AddrSel) = wb;
 800130e:	f100 44c8 	add.w	r4, r0, #1677721600	; 0x64000000
 8001312:	f204 445c 	addw	r4, r4, #1116	; 0x45c
   for(i = 0; i < len ; i += 2)
 8001316:	2300      	movs	r3, #0
 8001318:	1c4e      	adds	r6, r1, #1
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 800131a:	5ccd      	ldrb	r5, [r1, r3]
 800131c:	5cf0      	ldrb	r0, [r6, r3]
   for(i = 0; i < len ; i += 2)
 800131e:	3302      	adds	r3, #2
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8001320:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   for(i = 0; i < len ; i += 2)
 8001324:	429a      	cmp	r2, r3
	_W5300_DATA(AddrSel) = wb;
 8001326:	8020      	strh	r0, [r4, #0]
   for(i = 0; i < len ; i += 2)
 8001328:	d8f7      	bhi.n	800131a <wiz_send_data+0x12>
}
 800132a:	bc70      	pop	{r4, r5, r6}
 800132c:	4770      	bx	lr
 800132e:	4770      	bx	lr

08001330 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
 8001330:	b1d2      	cbz	r2, 8001368 <wiz_recv_data+0x38>
{
 8001332:	b470      	push	{r4, r5, r6}
      
   for(i = 0; i < len; i++)
   {
      if((i & 0x01)==0)
      {
         rd = getSn_RX_FIFOR(sn);
 8001334:	01c5      	lsls	r5, r0, #7
   ret = _W5300_DATA(AddrSel);
 8001336:	f105 45c8 	add.w	r5, r5, #1677721600	; 0x64000000
   for(i = 0; i < len; i++)
 800133a:	2300      	movs	r3, #0
   ret = _W5300_DATA(AddrSel);
 800133c:	f505 658c 	add.w	r5, r5, #1120	; 0x460
   uint16_t rd = 0;
 8001340:	461c      	mov	r4, r3
 8001342:	e007      	b.n	8001354 <wiz_recv_data+0x24>
   ret = _W5300_DATA(AddrSel);
 8001344:	882c      	ldrh	r4, [r5, #0]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8001346:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800134a:	54ce      	strb	r6, [r1, r3]
   for(i = 0; i < len; i++)
 800134c:	3301      	adds	r3, #1
 800134e:	429a      	cmp	r2, r3
   ret = _W5300_DATA(AddrSel);
 8001350:	b2a4      	uxth	r4, r4
   for(i = 0; i < len; i++)
 8001352:	d005      	beq.n	8001360 <wiz_recv_data+0x30>
      if((i & 0x01)==0)
 8001354:	07de      	lsls	r6, r3, #31
 8001356:	d5f5      	bpl.n	8001344 <wiz_recv_data+0x14>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8001358:	54cc      	strb	r4, [r1, r3]
   for(i = 0; i < len; i++)
 800135a:	3301      	adds	r3, #1
 800135c:	429a      	cmp	r2, r3
 800135e:	d1f9      	bne.n	8001354 <wiz_recv_data+0x24>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <wiz_recv_data+0x3c>)
 8001362:	541c      	strb	r4, [r3, r0]
}
 8001364:	bc70      	pop	{r4, r5, r6}
 8001366:	4770      	bx	lr
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200000f0 	.word	0x200000f0

08001370 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001374:	b083      	sub	sp, #12
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001376:	2808      	cmp	r0, #8
{
 8001378:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   CHECK_SOCKNUM();
 800137c:	f200 812d 	bhi.w	80015da <sendto+0x26a>
   switch(getSn_MR(sn) & 0x0F)
 8001380:	f100 0708 	add.w	r7, r0, #8
 8001384:	01bf      	lsls	r7, r7, #6
 8001386:	4606      	mov	r6, r0
 8001388:	4638      	mov	r0, r7
 800138a:	468b      	mov	fp, r1
 800138c:	4615      	mov	r5, r2
 800138e:	461c      	mov	r4, r3
 8001390:	f7ff ff64 	bl	800125c <WIZCHIP_READ>
 8001394:	f000 000f 	and.w	r0, r0, #15
 8001398:	3802      	subs	r0, #2
 800139a:	2802      	cmp	r0, #2
 800139c:	f200 8120 	bhi.w	80015e0 <sendto+0x270>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 80013a0:	2d00      	cmp	r5, #0
 80013a2:	f000 8120 	beq.w	80015e6 <sendto+0x276>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80013a6:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80013a8:	7861      	ldrb	r1, [r4, #1]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80013aa:	78a2      	ldrb	r2, [r4, #2]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80013ac:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80013b0:	78e3      	ldrb	r3, [r4, #3]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80013b2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80013b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80013ba:	9301      	str	r3, [sp, #4]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80ac 	beq.w	800151a <sendto+0x1aa>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80013c2:	f1b8 0f00 	cmp.w	r8, #0
 80013c6:	f000 809f 	beq.w	8001508 <sendto+0x198>
   tmp = getSn_SR(sn);
 80013ca:	f107 0908 	add.w	r9, r7, #8
 80013ce:	4648      	mov	r0, r9
 80013d0:	f7ff ff44 	bl	800125c <WIZCHIP_READ>
 80013d4:	b2c0      	uxtb	r0, r0
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80013d6:	2842      	cmp	r0, #66	; 0x42
 80013d8:	d008      	beq.n	80013ec <sendto+0x7c>
 80013da:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 80013de:	2822      	cmp	r0, #34	; 0x22
 80013e0:	d004      	beq.n	80013ec <sendto+0x7c>
 80013e2:	f06f 0006 	mvn.w	r0, #6
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 80013e6:	b003      	add	sp, #12
 80013e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   setSn_DIPR(sn,addr);
 80013ec:	7823      	ldrb	r3, [r4, #0]
 80013ee:	7861      	ldrb	r1, [r4, #1]
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80013f0:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 80015ec <sendto+0x27c>
   setSn_DIPR(sn,addr);
 80013f4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80013f8:	b289      	uxth	r1, r1
 80013fa:	f107 0014 	add.w	r0, r7, #20
 80013fe:	f7ff ff27 	bl	8001250 <WIZCHIP_WRITE>
 8001402:	78a3      	ldrb	r3, [r4, #2]
 8001404:	78e1      	ldrb	r1, [r4, #3]
 8001406:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800140a:	b289      	uxth	r1, r1
 800140c:	f107 0016 	add.w	r0, r7, #22
 8001410:	f7ff ff1e 	bl	8001250 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 8001414:	4641      	mov	r1, r8
 8001416:	f107 0012 	add.w	r0, r7, #18
 800141a:	f7ff ff19 	bl	8001250 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800141e:	4630      	mov	r0, r6
 8001420:	f7ff ff22 	bl	8001268 <getTMSR>
 8001424:	0280      	lsls	r0, r0, #10
 8001426:	b280      	uxth	r0, r0
 8001428:	f04f 0801 	mov.w	r8, #1
 800142c:	4285      	cmp	r5, r0
 800142e:	bf28      	it	cs
 8001430:	4605      	movcs	r5, r0
 8001432:	fa08 f806 	lsl.w	r8, r8, r6
      freesize = getSn_TX_FSR(sn);
 8001436:	4630      	mov	r0, r6
 8001438:	f7ff ff36 	bl	80012a8 <getSn_TX_FSR>
 800143c:	4604      	mov	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800143e:	4648      	mov	r0, r9
 8001440:	f7ff ff0c 	bl	800125c <WIZCHIP_READ>
 8001444:	f010 0fff 	tst.w	r0, #255	; 0xff
      freesize = getSn_TX_FSR(sn);
 8001448:	b2a4      	uxth	r4, r4
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800144a:	d06f      	beq.n	800152c <sendto+0x1bc>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800144c:	f8ba 3000 	ldrh.w	r3, [sl]
 8001450:	ea13 0f08 	tst.w	r3, r8
 8001454:	d055      	beq.n	8001502 <sendto+0x192>
 8001456:	42a5      	cmp	r5, r4
 8001458:	f200 80a0 	bhi.w	800159c <sendto+0x22c>
	wiz_send_data(sn, buf, len);
 800145c:	4659      	mov	r1, fp
 800145e:	462a      	mov	r2, r5
 8001460:	4630      	mov	r0, r6
 8001462:	f7ff ff51 	bl	8001308 <wiz_send_data>
      getSIPR((uint8_t*)&taddr);
 8001466:	2018      	movs	r0, #24
 8001468:	f7ff fef8 	bl	800125c <WIZCHIP_READ>
 800146c:	0a03      	lsrs	r3, r0, #8
 800146e:	2018      	movs	r0, #24
 8001470:	f88d 3004 	strb.w	r3, [sp, #4]
 8001474:	f7ff fef2 	bl	800125c <WIZCHIP_READ>
 8001478:	4603      	mov	r3, r0
 800147a:	201a      	movs	r0, #26
 800147c:	f88d 3005 	strb.w	r3, [sp, #5]
 8001480:	f7ff feec 	bl	800125c <WIZCHIP_READ>
 8001484:	0a03      	lsrs	r3, r0, #8
 8001486:	201a      	movs	r0, #26
 8001488:	f88d 3006 	strb.w	r3, [sp, #6]
 800148c:	f7ff fee6 	bl	800125c <WIZCHIP_READ>
 8001490:	f88d 0007 	strb.w	r0, [sp, #7]
      if(taddr == 0)
 8001494:	f8dd a004 	ldr.w	sl, [sp, #4]
 8001498:	f1ba 0f00 	cmp.w	sl, #0
 800149c:	d04b      	beq.n	8001536 <sendto+0x1c6>
      else taddr = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	461c      	mov	r4, r3
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	4698      	mov	r8, r3
 80014a6:	461e      	mov	r6, r3
 80014a8:	4699      	mov	r9, r3
 80014aa:	469a      	mov	sl, r3
   setSn_TX_WRSR(sn, len);
 80014ac:	2100      	movs	r1, #0
 80014ae:	f107 0020 	add.w	r0, r7, #32
 80014b2:	f7ff fecd 	bl	8001250 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_SEND);
 80014b6:	f107 0b02 	add.w	fp, r7, #2
   setSn_TX_WRSR(sn, len);
 80014ba:	4629      	mov	r1, r5
 80014bc:	f107 0022 	add.w	r0, r7, #34	; 0x22
 80014c0:	f7ff fec6 	bl	8001250 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_SEND);
 80014c4:	4658      	mov	r0, fp
 80014c6:	2120      	movs	r1, #32
 80014c8:	f7ff fec2 	bl	8001250 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80014cc:	4658      	mov	r0, fp
 80014ce:	f7ff fec5 	bl	800125c <WIZCHIP_READ>
 80014d2:	f010 0fff 	tst.w	r0, #255	; 0xff
 80014d6:	d1f9      	bne.n	80014cc <sendto+0x15c>
 80014d8:	3706      	adds	r7, #6
 80014da:	e001      	b.n	80014e0 <sendto+0x170>
      else if(tmp & Sn_IR_TIMEOUT)
 80014dc:	071b      	lsls	r3, r3, #28
 80014de:	d461      	bmi.n	80015a4 <sendto+0x234>
      tmp = getSn_IR(sn);
 80014e0:	4638      	mov	r0, r7
 80014e2:	f7ff febb 	bl	800125c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 80014e6:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(sn);
 80014e8:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 80014ea:	d5f7      	bpl.n	80014dc <sendto+0x16c>
         setSn_IR(sn, Sn_IR_SENDOK);
 80014ec:	4638      	mov	r0, r7
 80014ee:	2110      	movs	r1, #16
 80014f0:	f7ff feae 	bl	8001250 <WIZCHIP_WRITE>
      if(taddr) setSUBR((uint8_t*)&taddr);
 80014f4:	f1ba 0f00 	cmp.w	sl, #0
 80014f8:	d142      	bne.n	8001580 <sendto+0x210>
   return (int32_t)len;
 80014fa:	4628      	mov	r0, r5
}
 80014fc:	b003      	add	sp, #12
 80014fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8001502:	42a5      	cmp	r5, r4
 8001504:	d897      	bhi.n	8001436 <sendto+0xc6>
 8001506:	e7a9      	b.n	800145c <sendto+0xec>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001508:	4638      	mov	r0, r7
 800150a:	f7ff fea7 	bl	800125c <WIZCHIP_READ>
 800150e:	0741      	lsls	r1, r0, #29
 8001510:	f53f af5b 	bmi.w	80013ca <sendto+0x5a>
 8001514:	f06f 000a 	mvn.w	r0, #10
 8001518:	e765      	b.n	80013e6 <sendto+0x76>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800151a:	4638      	mov	r0, r7
 800151c:	f7ff fe9e 	bl	800125c <WIZCHIP_READ>
 8001520:	0740      	lsls	r0, r0, #29
 8001522:	f53f af4e 	bmi.w	80013c2 <sendto+0x52>
 8001526:	f06f 000b 	mvn.w	r0, #11
 800152a:	e75c      	b.n	80013e6 <sendto+0x76>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800152c:	f06f 0003 	mvn.w	r0, #3
}
 8001530:	b003      	add	sp, #12
 8001532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         getSUBR((uint8_t*)&taddr);
 8001536:	2014      	movs	r0, #20
 8001538:	f7ff fe90 	bl	800125c <WIZCHIP_READ>
 800153c:	f3c0 290f 	ubfx	r9, r0, #8, #16
 8001540:	2014      	movs	r0, #20
 8001542:	f88d 9004 	strb.w	r9, [sp, #4]
 8001546:	f7ff fe89 	bl	800125c <WIZCHIP_READ>
 800154a:	b2c6      	uxtb	r6, r0
 800154c:	2016      	movs	r0, #22
 800154e:	f88d 6005 	strb.w	r6, [sp, #5]
 8001552:	f7ff fe83 	bl	800125c <WIZCHIP_READ>
 8001556:	f3c0 280f 	ubfx	r8, r0, #8, #16
 800155a:	2016      	movs	r0, #22
 800155c:	f88d 8006 	strb.w	r8, [sp, #6]
 8001560:	f7ff fe7c 	bl	800125c <WIZCHIP_READ>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8001564:	4651      	mov	r1, sl
         getSUBR((uint8_t*)&taddr);
 8001566:	b2c4      	uxtb	r4, r0
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8001568:	2014      	movs	r0, #20
         getSUBR((uint8_t*)&taddr);
 800156a:	f88d 4007 	strb.w	r4, [sp, #7]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 800156e:	f7ff fe6f 	bl	8001250 <WIZCHIP_WRITE>
 8001572:	4651      	mov	r1, sl
 8001574:	2016      	movs	r0, #22
 8001576:	f7ff fe6b 	bl	8001250 <WIZCHIP_WRITE>
 800157a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800157e:	e795      	b.n	80014ac <sendto+0x13c>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8001580:	eb06 2109 	add.w	r1, r6, r9, lsl #8
 8001584:	b289      	uxth	r1, r1
 8001586:	2014      	movs	r0, #20
 8001588:	f7ff fe62 	bl	8001250 <WIZCHIP_WRITE>
 800158c:	eb04 2108 	add.w	r1, r4, r8, lsl #8
 8001590:	2016      	movs	r0, #22
 8001592:	b289      	uxth	r1, r1
 8001594:	f7ff fe5c 	bl	8001250 <WIZCHIP_WRITE>
   return (int32_t)len;
 8001598:	4628      	mov	r0, r5
 800159a:	e7af      	b.n	80014fc <sendto+0x18c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800159c:	2000      	movs	r0, #0
}
 800159e:	b003      	add	sp, #12
 80015a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80015a4:	4638      	mov	r0, r7
 80015a6:	2108      	movs	r1, #8
 80015a8:	f7ff fe52 	bl	8001250 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 80015ac:	f1ba 0f00 	cmp.w	sl, #0
 80015b0:	d104      	bne.n	80015bc <sendto+0x24c>
         return SOCKERR_TIMEOUT;
 80015b2:	f06f 000c 	mvn.w	r0, #12
}
 80015b6:	b003      	add	sp, #12
 80015b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(taddr) setSUBR((uint8_t*)&taddr);
 80015bc:	eb06 2109 	add.w	r1, r6, r9, lsl #8
 80015c0:	b289      	uxth	r1, r1
 80015c2:	2014      	movs	r0, #20
 80015c4:	f7ff fe44 	bl	8001250 <WIZCHIP_WRITE>
 80015c8:	eb04 2108 	add.w	r1, r4, r8, lsl #8
 80015cc:	2016      	movs	r0, #22
 80015ce:	b289      	uxth	r1, r1
 80015d0:	f7ff fe3e 	bl	8001250 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80015d4:	f06f 000c 	mvn.w	r0, #12
 80015d8:	e705      	b.n	80013e6 <sendto+0x76>
   CHECK_SOCKNUM();
 80015da:	f04f 30ff 	mov.w	r0, #4294967295
 80015de:	e702      	b.n	80013e6 <sendto+0x76>
         return SOCKERR_SOCKMODE;
 80015e0:	f06f 0004 	mvn.w	r0, #4
 80015e4:	e6ff      	b.n	80013e6 <sendto+0x76>
   CHECK_SOCKDATA();
 80015e6:	f06f 000d 	mvn.w	r0, #13
 80015ea:	e6fc      	b.n	80013e6 <sendto+0x76>
 80015ec:	200000e4 	.word	0x200000e4

080015f0 <close.part.0>:
int8_t close(uint8_t sn)
 80015f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 80015f4:	f100 0808 	add.w	r8, r0, #8
 80015f8:	ea4f 1888 	mov.w	r8, r8, lsl #6
int8_t close(uint8_t sn)
 80015fc:	b084      	sub	sp, #16
 80015fe:	4607      	mov	r7, r0
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8001600:	4640      	mov	r0, r8
 8001602:	f7ff fe2b 	bl	800125c <WIZCHIP_READ>
 8001606:	f000 040f 	and.w	r4, r0, #15
 800160a:	2c01      	cmp	r4, #1
 800160c:	d02f      	beq.n	800166e <close.part.0+0x7e>
 800160e:	f108 0502 	add.w	r5, r8, #2
 8001612:	f108 0608 	add.w	r6, r8, #8
	setSn_CR(sn,Sn_CR_CLOSE);
 8001616:	2110      	movs	r1, #16
 8001618:	4628      	mov	r0, r5
 800161a:	f7ff fe19 	bl	8001250 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 800161e:	4628      	mov	r0, r5
 8001620:	f7ff fe1c 	bl	800125c <WIZCHIP_READ>
 8001624:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8001628:	d1f9      	bne.n	800161e <close.part.0+0x2e>
	setSn_IR(sn, 0xFF);
 800162a:	f108 0006 	add.w	r0, r8, #6
 800162e:	21ff      	movs	r1, #255	; 0xff
 8001630:	f7ff fe0e 	bl	8001250 <WIZCHIP_WRITE>
	sock_remained_size[sn] = 0;
 8001634:	4d28      	ldr	r5, [pc, #160]	; (80016d8 <close.part.0+0xe8>)
	sock_io_mode &= ~(1<<sn);
 8001636:	4829      	ldr	r0, [pc, #164]	; (80016dc <close.part.0+0xec>)
	sock_is_sending &= ~(1<<sn);
 8001638:	4929      	ldr	r1, [pc, #164]	; (80016e0 <close.part.0+0xf0>)
	sock_io_mode &= ~(1<<sn);
 800163a:	8802      	ldrh	r2, [r0, #0]
	sock_is_sending &= ~(1<<sn);
 800163c:	f8b1 c000 	ldrh.w	ip, [r1]
	sock_remained_size[sn] = 0;
 8001640:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
	sock_io_mode &= ~(1<<sn);
 8001644:	2301      	movs	r3, #1
 8001646:	40bb      	lsls	r3, r7
	sock_pack_info[sn] = 0;
 8001648:	4d26      	ldr	r5, [pc, #152]	; (80016e4 <close.part.0+0xf4>)
	sock_io_mode &= ~(1<<sn);
 800164a:	43db      	mvns	r3, r3
 800164c:	b21b      	sxth	r3, r3
 800164e:	401a      	ands	r2, r3
	sock_pack_info[sn] = 0;
 8001650:	55ec      	strb	r4, [r5, r7]
	sock_is_sending &= ~(1<<sn);
 8001652:	ea03 030c 	and.w	r3, r3, ip
	sock_io_mode &= ~(1<<sn);
 8001656:	8002      	strh	r2, [r0, #0]
	sock_is_sending &= ~(1<<sn);
 8001658:	800b      	strh	r3, [r1, #0]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800165a:	4630      	mov	r0, r6
 800165c:	f7ff fdfe 	bl	800125c <WIZCHIP_READ>
 8001660:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001664:	d1f9      	bne.n	800165a <close.part.0+0x6a>
}
 8001666:	2001      	movs	r0, #1
 8001668:	b004      	add	sp, #16
 800166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 800166e:	4638      	mov	r0, r7
 8001670:	f7ff fe1a 	bl	80012a8 <getSn_TX_FSR>
 8001674:	4605      	mov	r5, r0
 8001676:	4638      	mov	r0, r7
 8001678:	f7ff fdf6 	bl	8001268 <getTMSR>
 800167c:	ebb5 2f80 	cmp.w	r5, r0, lsl #10
 8001680:	d0c5      	beq.n	800160e <close.part.0+0x1e>
      uint8_t destip[4] = {0, 0, 0, 1};
 8001682:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      setSn_MR(sn,Sn_MR_UDP);
 8001686:	2102      	movs	r1, #2
 8001688:	4640      	mov	r0, r8
      uint8_t destip[4] = {0, 0, 0, 1};
 800168a:	9303      	str	r3, [sp, #12]
      setSn_CR(sn,Sn_CR_OPEN);
 800168c:	f108 0502 	add.w	r5, r8, #2
      setSn_MR(sn,Sn_MR_UDP);
 8001690:	f7ff fdde 	bl	8001250 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8001694:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001698:	f108 000a 	add.w	r0, r8, #10
 800169c:	f7ff fdd8 	bl	8001250 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 80016a0:	4621      	mov	r1, r4
 80016a2:	4628      	mov	r0, r5
 80016a4:	f7ff fdd4 	bl	8001250 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 80016a8:	4628      	mov	r0, r5
 80016aa:	f7ff fdd7 	bl	800125c <WIZCHIP_READ>
 80016ae:	f010 0fff 	tst.w	r0, #255	; 0xff
 80016b2:	d1f9      	bne.n	80016a8 <close.part.0+0xb8>
 80016b4:	f108 0608 	add.w	r6, r8, #8
      while(getSn_SR(sn) != SOCK_UDP);
 80016b8:	4630      	mov	r0, r6
 80016ba:	f7ff fdcf 	bl	800125c <WIZCHIP_READ>
 80016be:	b2c0      	uxtb	r0, r0
 80016c0:	2822      	cmp	r0, #34	; 0x22
 80016c2:	d1f9      	bne.n	80016b8 <close.part.0+0xc8>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 80016c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80016c8:	ab03      	add	r3, sp, #12
 80016ca:	9200      	str	r2, [sp, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	2201      	movs	r2, #1
 80016d0:	4638      	mov	r0, r7
 80016d2:	f7ff fe4d 	bl	8001370 <sendto>
 80016d6:	e79e      	b.n	8001616 <close.part.0+0x26>
 80016d8:	200000f8 	.word	0x200000f8
 80016dc:	200000e4 	.word	0x200000e4
 80016e0:	200000e6 	.word	0x200000e6
 80016e4:	200000e8 	.word	0x200000e8

080016e8 <close>:
	CHECK_SOCKNUM();
 80016e8:	2808      	cmp	r0, #8
 80016ea:	d902      	bls.n	80016f2 <close+0xa>
}
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	4770      	bx	lr
 80016f2:	f7ff bf7d 	b.w	80015f0 <close.part.0>
 80016f6:	bf00      	nop

080016f8 <socket>:
	CHECK_SOCKNUM();
 80016f8:	2808      	cmp	r0, #8
 80016fa:	f200 8097 	bhi.w	800182c <socket+0x134>
{
 80016fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(protocol)
 8001702:	2901      	cmp	r1, #1
{
 8001704:	b082      	sub	sp, #8
 8001706:	4605      	mov	r5, r0
 8001708:	460f      	mov	r7, r1
 800170a:	4690      	mov	r8, r2
 800170c:	461e      	mov	r6, r3
	switch(protocol)
 800170e:	d065      	beq.n	80017dc <socket+0xe4>
 8001710:	1e8b      	subs	r3, r1, #2
 8001712:	2b02      	cmp	r3, #2
 8001714:	d87f      	bhi.n	8001816 <socket+0x11e>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001716:	0771      	lsls	r1, r6, #29
 8001718:	f100 8085 	bmi.w	8001826 <socket+0x12e>
	if(flag != 0)
 800171c:	b13e      	cbz	r6, 800172e <socket+0x36>
   	switch(protocol)
 800171e:	2f01      	cmp	r7, #1
 8001720:	d07e      	beq.n	8001820 <socket+0x128>
 8001722:	2f02      	cmp	r7, #2
 8001724:	d103      	bne.n	800172e <socket+0x36>
   	      if(flag & SF_IGMP_VER2)
 8001726:	06b2      	lsls	r2, r6, #26
 8001728:	d501      	bpl.n	800172e <socket+0x36>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800172a:	0633      	lsls	r3, r6, #24
 800172c:	d57b      	bpl.n	8001826 <socket+0x12e>
	CHECK_SOCKNUM();
 800172e:	4628      	mov	r0, r5
 8001730:	f7ff ff5e 	bl	80015f0 <close.part.0>
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8001734:	f105 0408 	add.w	r4, r5, #8
 8001738:	f026 030f 	bic.w	r3, r6, #15
 800173c:	01f1      	lsls	r1, r6, #7
 800173e:	01a4      	lsls	r4, r4, #6
 8001740:	431f      	orrs	r7, r3
 8001742:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8001746:	4620      	mov	r0, r4
 8001748:	4339      	orrs	r1, r7
 800174a:	f7ff fd81 	bl	8001250 <WIZCHIP_WRITE>
	if(!port)
 800174e:	f1b8 0f00 	cmp.w	r8, #0
 8001752:	d032      	beq.n	80017ba <socket+0xc2>
   setSn_PORT(sn,port);	
 8001754:	4641      	mov	r1, r8
 8001756:	f104 000a 	add.w	r0, r4, #10
   setSn_CR(sn,Sn_CR_OPEN);
 800175a:	1ca7      	adds	r7, r4, #2
   setSn_PORT(sn,port);	
 800175c:	f7ff fd78 	bl	8001250 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001760:	4638      	mov	r0, r7
 8001762:	2101      	movs	r1, #1
 8001764:	f7ff fd74 	bl	8001250 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001768:	4638      	mov	r0, r7
 800176a:	f7ff fd77 	bl	800125c <WIZCHIP_READ>
 800176e:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8001772:	d1f9      	bne.n	8001768 <socket+0x70>
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001774:	4f2f      	ldr	r7, [pc, #188]	; (8001834 <socket+0x13c>)
   sock_is_sending &= ~(1<<sn);
 8001776:	4930      	ldr	r1, [pc, #192]	; (8001838 <socket+0x140>)
   sock_io_mode &= ~(1 <<sn);
 8001778:	8838      	ldrh	r0, [r7, #0]
   sock_is_sending &= ~(1<<sn);
 800177a:	f8b1 c000 	ldrh.w	ip, [r1]
   sock_remained_size[sn] = 0;
 800177e:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 8001844 <socket+0x14c>
   sock_io_mode &= ~(1 <<sn);
 8001782:	2301      	movs	r3, #1
 8001784:	40ab      	lsls	r3, r5
 8001786:	43db      	mvns	r3, r3
 8001788:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800178a:	f006 0601 	and.w	r6, r6, #1
   sock_io_mode &= ~(1 <<sn);
 800178e:	4018      	ands	r0, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001790:	40ae      	lsls	r6, r5
 8001792:	4306      	orrs	r6, r0
   sock_pack_info[sn] = PACK_COMPLETED;
 8001794:	4829      	ldr	r0, [pc, #164]	; (800183c <socket+0x144>)
   sock_remained_size[sn] = 0;
 8001796:	f82e 2015 	strh.w	r2, [lr, r5, lsl #1]
   sock_is_sending &= ~(1<<sn);
 800179a:	ea03 030c 	and.w	r3, r3, ip
   sock_pack_info[sn] = PACK_COMPLETED;
 800179e:	5542      	strb	r2, [r0, r5]
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80017a0:	803e      	strh	r6, [r7, #0]
   sock_is_sending &= ~(1<<sn);
 80017a2:	3408      	adds	r4, #8
 80017a4:	800b      	strh	r3, [r1, #0]
   while(getSn_SR(sn) == SOCK_CLOSED);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff fd58 	bl	800125c <WIZCHIP_READ>
 80017ac:	f010 0fff 	tst.w	r0, #255	; 0xff
 80017b0:	d0f9      	beq.n	80017a6 <socket+0xae>
   return (int8_t)sn;
 80017b2:	b268      	sxtb	r0, r5
}	   
 80017b4:	b002      	add	sp, #8
 80017b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   port = sock_any_port++;
 80017ba:	4a21      	ldr	r2, [pc, #132]	; (8001840 <socket+0x148>)
 80017bc:	f8b2 8000 	ldrh.w	r8, [r2]
 80017c0:	f108 0301 	add.w	r3, r8, #1
 80017c4:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80017c6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80017ca:	428b      	cmp	r3, r1
 80017cc:	bf09      	itett	eq
 80017ce:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 80017d2:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80017d4:	8013      	strheq	r3, [r2, #0]
	   port = sock_any_port++;
 80017d6:	f64f 78ef 	movweq	r8, #65519	; 0xffef
 80017da:	e7bb      	b.n	8001754 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 80017dc:	2018      	movs	r0, #24
 80017de:	f7ff fd3d 	bl	800125c <WIZCHIP_READ>
 80017e2:	0a03      	lsrs	r3, r0, #8
 80017e4:	2018      	movs	r0, #24
 80017e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80017ea:	f7ff fd37 	bl	800125c <WIZCHIP_READ>
 80017ee:	4603      	mov	r3, r0
 80017f0:	201a      	movs	r0, #26
 80017f2:	f88d 3005 	strb.w	r3, [sp, #5]
 80017f6:	f7ff fd31 	bl	800125c <WIZCHIP_READ>
 80017fa:	0a03      	lsrs	r3, r0, #8
 80017fc:	201a      	movs	r0, #26
 80017fe:	f88d 3006 	strb.w	r3, [sp, #6]
 8001802:	f7ff fd2b 	bl	800125c <WIZCHIP_READ>
 8001806:	f88d 0007 	strb.w	r0, [sp, #7]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800180a:	9b01      	ldr	r3, [sp, #4]
 800180c:	f06f 0002 	mvn.w	r0, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d180      	bne.n	8001716 <socket+0x1e>
 8001814:	e7ce      	b.n	80017b4 <socket+0xbc>
	switch(protocol)
 8001816:	f06f 0004 	mvn.w	r0, #4
}	   
 800181a:	b002      	add	sp, #8
 800181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8001820:	f016 0f23 	tst.w	r6, #35	; 0x23
 8001824:	d183      	bne.n	800172e <socket+0x36>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001826:	f06f 0005 	mvn.w	r0, #5
 800182a:	e7c3      	b.n	80017b4 <socket+0xbc>
	CHECK_SOCKNUM();
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
}	   
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200000e4 	.word	0x200000e4
 8001838:	200000e6 	.word	0x200000e6
 800183c:	200000e8 	.word	0x200000e8
 8001840:	20000008 	.word	0x20000008
 8001844:	200000f8 	.word	0x200000f8

08001848 <listen>:
	CHECK_SOCKNUM();
 8001848:	2808      	cmp	r0, #8
 800184a:	d82c      	bhi.n	80018a6 <listen+0x5e>
{
 800184c:	b570      	push	{r4, r5, r6, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 800184e:	f100 0408 	add.w	r4, r0, #8
 8001852:	01a4      	lsls	r4, r4, #6
 8001854:	4605      	mov	r5, r0
 8001856:	4620      	mov	r0, r4
 8001858:	f7ff fd00 	bl	800125c <WIZCHIP_READ>
 800185c:	f000 000f 	and.w	r0, r0, #15
 8001860:	2801      	cmp	r0, #1
 8001862:	d11a      	bne.n	800189a <listen+0x52>
	CHECK_SOCKINIT();
 8001864:	f104 0608 	add.w	r6, r4, #8
 8001868:	4630      	mov	r0, r6
 800186a:	f7ff fcf7 	bl	800125c <WIZCHIP_READ>
 800186e:	b2c0      	uxtb	r0, r0
 8001870:	2813      	cmp	r0, #19
 8001872:	d115      	bne.n	80018a0 <listen+0x58>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001874:	3402      	adds	r4, #2
 8001876:	4620      	mov	r0, r4
 8001878:	2102      	movs	r1, #2
 800187a:	f7ff fce9 	bl	8001250 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff fcec 	bl	800125c <WIZCHIP_READ>
 8001884:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001888:	d1f9      	bne.n	800187e <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800188a:	4630      	mov	r0, r6
 800188c:	f7ff fce6 	bl	800125c <WIZCHIP_READ>
 8001890:	b2c0      	uxtb	r0, r0
 8001892:	2814      	cmp	r0, #20
 8001894:	d10a      	bne.n	80018ac <listen+0x64>
   return SOCK_OK;
 8001896:	2001      	movs	r0, #1
}
 8001898:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 800189a:	f06f 0004 	mvn.w	r0, #4
}
 800189e:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKINIT();
 80018a0:	f06f 0002 	mvn.w	r0, #2
}
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 80018a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018aa:	4770      	bx	lr
	CHECK_SOCKNUM();
 80018ac:	4628      	mov	r0, r5
 80018ae:	f7ff fe9f 	bl	80015f0 <close.part.0>
         return SOCKERR_SOCKCLOSED;
 80018b2:	f06f 0003 	mvn.w	r0, #3
}
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <disconnect>:
   CHECK_SOCKNUM();
 80018b8:	2808      	cmp	r0, #8
 80018ba:	d83d      	bhi.n	8001938 <disconnect+0x80>
{
 80018bc:	b570      	push	{r4, r5, r6, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 80018be:	f100 0408 	add.w	r4, r0, #8
 80018c2:	01a4      	lsls	r4, r4, #6
 80018c4:	4606      	mov	r6, r0
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff fcc8 	bl	800125c <WIZCHIP_READ>
 80018cc:	f000 000f 	and.w	r0, r0, #15
 80018d0:	2801      	cmp	r0, #1
 80018d2:	d12e      	bne.n	8001932 <disconnect+0x7a>
	setSn_CR(sn,Sn_CR_DISCON);
 80018d4:	1ca5      	adds	r5, r4, #2
 80018d6:	4628      	mov	r0, r5
 80018d8:	2108      	movs	r1, #8
 80018da:	f7ff fcb9 	bl	8001250 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80018de:	4628      	mov	r0, r5
 80018e0:	f7ff fcbc 	bl	800125c <WIZCHIP_READ>
 80018e4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80018e8:	d1f9      	bne.n	80018de <disconnect+0x26>
	sock_is_sending &= ~(1<<sn);
 80018ea:	4d15      	ldr	r5, [pc, #84]	; (8001940 <disconnect+0x88>)
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <disconnect+0x8c>)
	sock_is_sending &= ~(1<<sn);
 80018ee:	882a      	ldrh	r2, [r5, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80018f0:	881b      	ldrh	r3, [r3, #0]
	sock_is_sending &= ~(1<<sn);
 80018f2:	2101      	movs	r1, #1
 80018f4:	40b1      	lsls	r1, r6
 80018f6:	ea22 0201 	bic.w	r2, r2, r1
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80018fa:	4133      	asrs	r3, r6
	sock_is_sending &= ~(1<<sn);
 80018fc:	802a      	strh	r2, [r5, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80018fe:	07da      	lsls	r2, r3, #31
 8001900:	d410      	bmi.n	8001924 <disconnect+0x6c>
 8001902:	f104 0508 	add.w	r5, r4, #8
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001906:	3406      	adds	r4, #6
 8001908:	e003      	b.n	8001912 <disconnect+0x5a>
 800190a:	f7ff fca7 	bl	800125c <WIZCHIP_READ>
 800190e:	0703      	lsls	r3, r0, #28
 8001910:	d409      	bmi.n	8001926 <disconnect+0x6e>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001912:	4628      	mov	r0, r5
 8001914:	f7ff fca2 	bl	800125c <WIZCHIP_READ>
 8001918:	4603      	mov	r3, r0
 800191a:	f013 0fff 	tst.w	r3, #255	; 0xff
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800191e:	4620      	mov	r0, r4
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001920:	d1f3      	bne.n	800190a <disconnect+0x52>
	return SOCK_OK;
 8001922:	2001      	movs	r0, #1
}
 8001924:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8001926:	4630      	mov	r0, r6
 8001928:	f7ff fe62 	bl	80015f0 <close.part.0>
	      return SOCKERR_TIMEOUT;
 800192c:	f06f 000c 	mvn.w	r0, #12
}
 8001930:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001932:	f06f 0004 	mvn.w	r0, #4
}
 8001936:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200000e6 	.word	0x200000e6
 8001944:	200000e4 	.word	0x200000e4

08001948 <send>:
{
 8001948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800194c:	b083      	sub	sp, #12
   CHECK_SOCKNUM();
 800194e:	2808      	cmp	r0, #8
{
 8001950:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8001952:	f200 808b 	bhi.w	8001a6c <send+0x124>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001956:	f100 0808 	add.w	r8, r0, #8
 800195a:	ea4f 1888 	mov.w	r8, r8, lsl #6
 800195e:	4605      	mov	r5, r0
 8001960:	4640      	mov	r0, r8
 8001962:	4614      	mov	r4, r2
 8001964:	f7ff fc7a 	bl	800125c <WIZCHIP_READ>
 8001968:	f000 000f 	and.w	r0, r0, #15
 800196c:	2801      	cmp	r0, #1
 800196e:	f040 8083 	bne.w	8001a78 <send+0x130>
   CHECK_SOCKDATA();
 8001972:	2c00      	cmp	r4, #0
 8001974:	d07d      	beq.n	8001a72 <send+0x12a>
   tmp = getSn_SR(sn);
 8001976:	f108 0708 	add.w	r7, r8, #8
 800197a:	4638      	mov	r0, r7
 800197c:	f7ff fc6e 	bl	800125c <WIZCHIP_READ>
 8001980:	b2c0      	uxtb	r0, r0
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001982:	2817      	cmp	r0, #23
 8001984:	d001      	beq.n	800198a <send+0x42>
 8001986:	281c      	cmp	r0, #28
 8001988:	d179      	bne.n	8001a7e <send+0x136>
   if( sock_is_sending & (1<<sn) )
 800198a:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001a90 <send+0x148>
 800198e:	f8bb 3000 	ldrh.w	r3, [fp]
 8001992:	412b      	asrs	r3, r5
 8001994:	07d9      	lsls	r1, r3, #31
 8001996:	d443      	bmi.n	8001a20 <send+0xd8>
 8001998:	2601      	movs	r6, #1
 800199a:	40ae      	lsls	r6, r5
   freesize = getSn_TxMAX(sn);
 800199c:	4628      	mov	r0, r5
 800199e:	f7ff fc63 	bl	8001268 <getTMSR>
 80019a2:	0280      	lsls	r0, r0, #10
 80019a4:	b280      	uxth	r0, r0
 80019a6:	4284      	cmp	r4, r0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80019a8:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8001a94 <send+0x14c>
 80019ac:	bf28      	it	cs
 80019ae:	4604      	movcs	r4, r0
      freesize = getSn_TX_FSR(sn);
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff fc79 	bl	80012a8 <getSn_TX_FSR>
 80019b6:	4682      	mov	sl, r0
      tmp = getSn_SR(sn);
 80019b8:	4638      	mov	r0, r7
 80019ba:	f7ff fc4f 	bl	800125c <WIZCHIP_READ>
 80019be:	b2c3      	uxtb	r3, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80019c0:	2b17      	cmp	r3, #23
      freesize = getSn_TX_FSR(sn);
 80019c2:	fa1f fa8a 	uxth.w	sl, sl
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80019c6:	d001      	beq.n	80019cc <send+0x84>
 80019c8:	2b1c      	cmp	r3, #28
 80019ca:	d13a      	bne.n	8001a42 <send+0xfa>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80019cc:	f8b9 3000 	ldrh.w	r3, [r9]
 80019d0:	4233      	tst	r3, r6
 80019d2:	d033      	beq.n	8001a3c <send+0xf4>
 80019d4:	4554      	cmp	r4, sl
 80019d6:	d82d      	bhi.n	8001a34 <send+0xec>
   wiz_send_data(sn, buf, len);
 80019d8:	4622      	mov	r2, r4
 80019da:	9901      	ldr	r1, [sp, #4]
 80019dc:	4628      	mov	r0, r5
 80019de:	f7ff fc93 	bl	8001308 <wiz_send_data>
      setSn_TX_WRSR(sn,len);
 80019e2:	f108 0020 	add.w	r0, r8, #32
 80019e6:	2100      	movs	r1, #0
 80019e8:	f7ff fc32 	bl	8001250 <WIZCHIP_WRITE>
 80019ec:	f108 0022 	add.w	r0, r8, #34	; 0x22
 80019f0:	4621      	mov	r1, r4
   setSn_CR(sn,Sn_CR_SEND);
 80019f2:	f108 0802 	add.w	r8, r8, #2
      setSn_TX_WRSR(sn,len);
 80019f6:	f7ff fc2b 	bl	8001250 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_SEND);
 80019fa:	4640      	mov	r0, r8
 80019fc:	2120      	movs	r1, #32
 80019fe:	f7ff fc27 	bl	8001250 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001a02:	4640      	mov	r0, r8
 8001a04:	f7ff fc2a 	bl	800125c <WIZCHIP_READ>
 8001a08:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001a0c:	d1f9      	bne.n	8001a02 <send+0xba>
   sock_is_sending |= (1 << sn);
 8001a0e:	f8bb 3000 	ldrh.w	r3, [fp]
   return (int32_t)len;
 8001a12:	4620      	mov	r0, r4
   sock_is_sending |= (1 << sn);
 8001a14:	431e      	orrs	r6, r3
 8001a16:	f8ab 6000 	strh.w	r6, [fp]
}
 8001a1a:	b003      	add	sp, #12
 8001a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp = getSn_IR(sn);
 8001a20:	f108 0606 	add.w	r6, r8, #6
 8001a24:	4630      	mov	r0, r6
 8001a26:	f7ff fc19 	bl	800125c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001a2a:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(sn);
 8001a2c:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 8001a2e:	d410      	bmi.n	8001a52 <send+0x10a>
      else if(tmp & Sn_IR_TIMEOUT)
 8001a30:	071b      	lsls	r3, r3, #28
 8001a32:	d427      	bmi.n	8001a84 <send+0x13c>
      else return SOCK_BUSY;
 8001a34:	2000      	movs	r0, #0
}
 8001a36:	b003      	add	sp, #12
 8001a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8001a3c:	4554      	cmp	r4, sl
 8001a3e:	d8b7      	bhi.n	80019b0 <send+0x68>
 8001a40:	e7ca      	b.n	80019d8 <send+0x90>
	CHECK_SOCKNUM();
 8001a42:	4628      	mov	r0, r5
 8001a44:	f7ff fdd4 	bl	80015f0 <close.part.0>
         return SOCKERR_SOCKSTATUS;
 8001a48:	f06f 0006 	mvn.w	r0, #6
}
 8001a4c:	b003      	add	sp, #12
 8001a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8001a52:	4630      	mov	r0, r6
 8001a54:	2110      	movs	r1, #16
 8001a56:	f7ff fbfb 	bl	8001250 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8001a5a:	2601      	movs	r6, #1
 8001a5c:	f8bb 3000 	ldrh.w	r3, [fp]
 8001a60:	40ae      	lsls	r6, r5
 8001a62:	ea23 0306 	bic.w	r3, r3, r6
 8001a66:	f8ab 3000 	strh.w	r3, [fp]
 8001a6a:	e797      	b.n	800199c <send+0x54>
   CHECK_SOCKNUM();
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	e7e1      	b.n	8001a36 <send+0xee>
   CHECK_SOCKDATA();
 8001a72:	f06f 000d 	mvn.w	r0, #13
 8001a76:	e7de      	b.n	8001a36 <send+0xee>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001a78:	f06f 0004 	mvn.w	r0, #4
 8001a7c:	e7db      	b.n	8001a36 <send+0xee>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001a7e:	f06f 0006 	mvn.w	r0, #6
 8001a82:	e7d8      	b.n	8001a36 <send+0xee>
	CHECK_SOCKNUM();
 8001a84:	4628      	mov	r0, r5
 8001a86:	f7ff fdb3 	bl	80015f0 <close.part.0>
         return SOCKERR_TIMEOUT;
 8001a8a:	f06f 000c 	mvn.w	r0, #12
 8001a8e:	e7d2      	b.n	8001a36 <send+0xee>
 8001a90:	200000e6 	.word	0x200000e6
 8001a94:	200000e4 	.word	0x200000e4

08001a98 <recv>:
{
 8001a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a9c:	b085      	sub	sp, #20
   CHECK_SOCKNUM();
 8001a9e:	2808      	cmp	r0, #8
{
 8001aa0:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8001aa2:	f200 80f2 	bhi.w	8001c8a <recv+0x1f2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001aa6:	f100 0908 	add.w	r9, r0, #8
 8001aaa:	ea4f 1989 	mov.w	r9, r9, lsl #6
 8001aae:	4683      	mov	fp, r0
 8001ab0:	4648      	mov	r0, r9
 8001ab2:	4616      	mov	r6, r2
 8001ab4:	f7ff fbd2 	bl	800125c <WIZCHIP_READ>
 8001ab8:	f000 040f 	and.w	r4, r0, #15
 8001abc:	2c01      	cmp	r4, #1
 8001abe:	f040 80ea 	bne.w	8001c96 <recv+0x1fe>
   CHECK_SOCKDATA();
 8001ac2:	2e00      	cmp	r6, #0
 8001ac4:	f000 80e4 	beq.w	8001c90 <recv+0x1f8>
   recvsize = getSn_RxMAX(sn);
 8001ac8:	4658      	mov	r0, fp
 8001aca:	f7ff fbdd 	bl	8001288 <getRMSR>
   if(sock_remained_size[sn] == 0)
 8001ace:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8001ca4 <recv+0x20c>
   recvsize = getSn_RxMAX(sn);
 8001ad2:	0280      	lsls	r0, r0, #10
   if(sock_remained_size[sn] == 0)
 8001ad4:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
   recvsize = getSn_RxMAX(sn);
 8001ad8:	b283      	uxth	r3, r0
 8001ada:	9300      	str	r3, [sp, #0]
   if(sock_remained_size[sn] == 0)
 8001adc:	bb3a      	cbnz	r2, 8001b2e <recv+0x96>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001ade:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8001ca8 <recv+0x210>
 8001ae2:	fa04 f40b 	lsl.w	r4, r4, fp
 8001ae6:	f109 0708 	add.w	r7, r9, #8
         recvsize = getSn_RX_RSR(sn);
 8001aea:	4658      	mov	r0, fp
 8001aec:	f7ff fbf0 	bl	80012d0 <getSn_RX_RSR>
 8001af0:	4605      	mov	r5, r0
         tmp = getSn_SR(sn);
 8001af2:	4638      	mov	r0, r7
 8001af4:	f7ff fbb2 	bl	800125c <WIZCHIP_READ>
 8001af8:	4602      	mov	r2, r0
 8001afa:	b2d2      	uxtb	r2, r2
         if (tmp != SOCK_ESTABLISHED)
 8001afc:	2a17      	cmp	r2, #23
         recvsize = getSn_RX_RSR(sn);
 8001afe:	b2ad      	uxth	r5, r5
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001b00:	4658      	mov	r0, fp
         if (tmp != SOCK_ESTABLISHED)
 8001b02:	d05b      	beq.n	8001bbc <recv+0x124>
            if(tmp == SOCK_CLOSE_WAIT)
 8001b04:	2a1c      	cmp	r2, #28
 8001b06:	f040 8091 	bne.w	8001c2c <recv+0x194>
               if(recvsize != 0) break;
 8001b0a:	2d00      	cmp	r5, #0
 8001b0c:	d15c      	bne.n	8001bc8 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001b0e:	f7ff fbcb 	bl	80012a8 <getSn_TX_FSR>
 8001b12:	4605      	mov	r5, r0
 8001b14:	4658      	mov	r0, fp
 8001b16:	f7ff fba7 	bl	8001268 <getTMSR>
 8001b1a:	ebb5 2f80 	cmp.w	r5, r0, lsl #10
 8001b1e:	f000 8085 	beq.w	8001c2c <recv+0x194>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001b22:	f8b8 2000 	ldrh.w	r2, [r8]
 8001b26:	4222      	tst	r2, r4
 8001b28:	d0df      	beq.n	8001aea <recv+0x52>
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	e043      	b.n	8001bb6 <recv+0x11e>
 8001b2e:	461d      	mov	r5, r3
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 8001b30:	4648      	mov	r0, r9
 8001b32:	f7ff fb93 	bl	800125c <WIZCHIP_READ>
 8001b36:	05c3      	lsls	r3, r0, #23
 8001b38:	d570      	bpl.n	8001c1c <recv+0x184>
      mr = getMR();
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fb8e 	bl	800125c <WIZCHIP_READ>
 8001b40:	4604      	mov	r4, r0
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 8001b42:	4648      	mov	r0, r9
 8001b44:	f7ff fb8a 	bl	800125c <WIZCHIP_READ>
 8001b48:	05c7      	lsls	r7, r0, #23
 8001b4a:	d57c      	bpl.n	8001c46 <recv+0x1ae>
 8001b4c:	4c53      	ldr	r4, [pc, #332]	; (8001c9c <recv+0x204>)
      sock_remained_size[sn] = recvsize;
 8001b4e:	f82a 501b 	strh.w	r5, [sl, fp, lsl #1]
 8001b52:	f814 200b 	ldrb.w	r2, [r4, fp]
 8001b56:	f002 0002 	and.w	r0, r2, #2
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8001b5a:	9b00      	ldr	r3, [sp, #0]
 8001b5c:	42b3      	cmp	r3, r6
 8001b5e:	bf28      	it	cs
 8001b60:	4633      	movcs	r3, r6
 8001b62:	42ab      	cmp	r3, r5
 8001b64:	bf28      	it	cs
 8001b66:	462b      	movcs	r3, r5
 8001b68:	4698      	mov	r8, r3
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8001b6a:	2800      	cmp	r0, #0
 8001b6c:	f000 808b 	beq.w	8001c86 <recv+0x1ee>
      *buf = sock_remained_byte[sn];
 8001b70:	4a4b      	ldr	r2, [pc, #300]	; (8001ca0 <recv+0x208>)
 8001b72:	9b01      	ldr	r3, [sp, #4]
 8001b74:	f812 200b 	ldrb.w	r2, [r2, fp]
 8001b78:	f803 2b01 	strb.w	r2, [r3], #1
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8001b7c:	f814 200b 	ldrb.w	r2, [r4, fp]
      *buf = sock_remained_byte[sn];
 8001b80:	9301      	str	r3, [sp, #4]
      sock_remained_size[sn] -= 1;
 8001b82:	1e69      	subs	r1, r5, #1
 8001b84:	b28d      	uxth	r5, r1
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8001b86:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
      recvsize -= 1;
 8001b8a:	f108 36ff 	add.w	r6, r8, #4294967295
      sock_remained_size[sn] -= 1;
 8001b8e:	f82a 501b 	strh.w	r5, [sl, fp, lsl #1]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8001b92:	f804 200b 	strb.w	r2, [r4, fp]
      recvsize -= 1;
 8001b96:	b2b6      	uxth	r6, r6
   if(recvsize != 0)
 8001b98:	b9f6      	cbnz	r6, 8001bd8 <recv+0x140>
   if(sock_remained_size[sn] != 0)
 8001b9a:	2d00      	cmp	r5, #0
 8001b9c:	d14e      	bne.n	8001c3c <recv+0x1a4>
   else sock_pack_info[sn] = PACK_COMPLETED;
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f804 200b 	strb.w	r2, [r4, fp]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 8001ba4:	4648      	mov	r0, r9
 8001ba6:	f7ff fb59 	bl	800125c <WIZCHIP_READ>
 8001baa:	05c3      	lsls	r3, r0, #23
 8001bac:	bf44      	itt	mi
 8001bae:	2200      	movmi	r2, #0
 8001bb0:	f82a 201b 	strhmi.w	r2, [sl, fp, lsl #1]
   return (int32_t)len;
 8001bb4:	4640      	mov	r0, r8
}
 8001bb6:	b005      	add	sp, #20
 8001bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001bbc:	f8b8 2000 	ldrh.w	r2, [r8]
 8001bc0:	4222      	tst	r2, r4
 8001bc2:	d006      	beq.n	8001bd2 <recv+0x13a>
 8001bc4:	2d00      	cmp	r5, #0
 8001bc6:	d0b0      	beq.n	8001b2a <recv+0x92>
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 8001bc8:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d0b4      	beq.n	8001b3a <recv+0xa2>
 8001bd0:	e7ae      	b.n	8001b30 <recv+0x98>
         if(recvsize != 0) break;
 8001bd2:	2d00      	cmp	r5, #0
 8001bd4:	d089      	beq.n	8001aea <recv+0x52>
 8001bd6:	e7f7      	b.n	8001bc8 <recv+0x130>
      wiz_recv_data(sn, buf, recvsize);
 8001bd8:	9901      	ldr	r1, [sp, #4]
 8001bda:	4658      	mov	r0, fp
 8001bdc:	4632      	mov	r2, r6
      setSn_CR(sn,Sn_CR_RECV);
 8001bde:	f109 0702 	add.w	r7, r9, #2
      wiz_recv_data(sn, buf, recvsize);
 8001be2:	f7ff fba5 	bl	8001330 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 8001be6:	4638      	mov	r0, r7
 8001be8:	2140      	movs	r1, #64	; 0x40
 8001bea:	f7ff fb31 	bl	8001250 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8001bee:	4638      	mov	r0, r7
 8001bf0:	f7ff fb34 	bl	800125c <WIZCHIP_READ>
 8001bf4:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001bf8:	d1f9      	bne.n	8001bee <recv+0x156>
   sock_remained_size[sn] -= recvsize;
 8001bfa:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
 8001bfe:	1b92      	subs	r2, r2, r6
 8001c00:	b292      	uxth	r2, r2
 8001c02:	f82a 201b 	strh.w	r2, [sl, fp, lsl #1]
   if(sock_remained_size[sn] != 0)
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d0c9      	beq.n	8001b9e <recv+0x106>
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8001c0a:	07f1      	lsls	r1, r6, #31
      sock_pack_info[sn] |= PACK_REMAINED;
 8001c0c:	f814 200b 	ldrb.w	r2, [r4, fp]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8001c10:	d514      	bpl.n	8001c3c <recv+0x1a4>
 8001c12:	f042 0203 	orr.w	r2, r2, #3
 8001c16:	f804 200b 	strb.w	r2, [r4, fp]
 8001c1a:	e7c3      	b.n	8001ba4 <recv+0x10c>
 8001c1c:	4c1f      	ldr	r4, [pc, #124]	; (8001c9c <recv+0x204>)
 8001c1e:	f83a 501b 	ldrh.w	r5, [sl, fp, lsl #1]
 8001c22:	f814 200b 	ldrb.w	r2, [r4, fp]
 8001c26:	f002 0002 	and.w	r0, r2, #2
 8001c2a:	e796      	b.n	8001b5a <recv+0xc2>
	CHECK_SOCKNUM();
 8001c2c:	4658      	mov	r0, fp
 8001c2e:	f7ff fcdf 	bl	80015f0 <close.part.0>
                  return SOCKERR_SOCKSTATUS;
 8001c32:	f06f 0006 	mvn.w	r0, #6
}
 8001c36:	b005      	add	sp, #20
 8001c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sock_pack_info[sn] |= PACK_REMAINED;
 8001c3c:	f042 0201 	orr.w	r2, r2, #1
 8001c40:	f804 200b 	strb.w	r2, [r4, fp]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8001c44:	e7ae      	b.n	8001ba4 <recv+0x10c>
         wiz_recv_data(sn,head,2);
 8001c46:	2202      	movs	r2, #2
 8001c48:	a903      	add	r1, sp, #12
 8001c4a:	4658      	mov	r0, fp
 8001c4c:	f7ff fb70 	bl	8001330 <wiz_recv_data>
         if(mr & MR_FS)
 8001c50:	05e0      	lsls	r0, r4, #23
 8001c52:	9b00      	ldr	r3, [sp, #0]
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8001c54:	bf4b      	itete	mi
 8001c56:	f89d 200d 	ldrbmi.w	r2, [sp, #13]
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 8001c5a:	f89d 200c 	ldrbpl.w	r2, [sp, #12]
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8001c5e:	f89d 100c 	ldrbmi.w	r1, [sp, #12]
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 8001c62:	f89d 100d 	ldrbpl.w	r1, [sp, #13]
         sock_pack_info[sn] = PACK_FIRST;
 8001c66:	4c0d      	ldr	r4, [pc, #52]	; (8001c9c <recv+0x204>)
 8001c68:	429e      	cmp	r6, r3
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 8001c6a:	ea41 2502 	orr.w	r5, r1, r2, lsl #8
         sock_pack_info[sn] = PACK_FIRST;
 8001c6e:	bf28      	it	cs
 8001c70:	461e      	movcs	r6, r3
 8001c72:	42ae      	cmp	r6, r5
 8001c74:	bf28      	it	cs
 8001c76:	462e      	movcs	r6, r5
 8001c78:	2280      	movs	r2, #128	; 0x80
      sock_remained_size[sn] = recvsize;
 8001c7a:	f82a 501b 	strh.w	r5, [sl, fp, lsl #1]
         sock_pack_info[sn] = PACK_FIRST;
 8001c7e:	f804 200b 	strb.w	r2, [r4, fp]
      sock_remained_size[sn] = recvsize;
 8001c82:	46b0      	mov	r8, r6
 8001c84:	e788      	b.n	8001b98 <recv+0x100>
 8001c86:	461e      	mov	r6, r3
 8001c88:	e786      	b.n	8001b98 <recv+0x100>
   CHECK_SOCKNUM();
 8001c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8e:	e792      	b.n	8001bb6 <recv+0x11e>
   CHECK_SOCKDATA();
 8001c90:	f06f 000d 	mvn.w	r0, #13
 8001c94:	e78f      	b.n	8001bb6 <recv+0x11e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c96:	f06f 0004 	mvn.w	r0, #4
 8001c9a:	e78c      	b.n	8001bb6 <recv+0x11e>
 8001c9c:	200000e8 	.word	0x200000e8
 8001ca0:	200000f0 	.word	0x200000f0
 8001ca4:	200000f8 	.word	0x200000f8
 8001ca8:	200000e4 	.word	0x200000e4

08001cac <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop

08001cb0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001cb0:	8800      	ldrh	r0, [r0, #0]
 8001cb2:	b280      	uxth	r0, r0
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001cb8:	8001      	strh	r1, [r0, #0]
 8001cba:	4770      	bx	lr

08001cbc <wizchip_cris_exit>:
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop

08001cc0 <wizchip_cs_select>:
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop

08001cc4 <wizchip_cs_deselect>:
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <reg_wizchip_bus_cbfunc+0x20>)
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	05d2      	lsls	r2, r2, #23
 8001cce:	d400      	bmi.n	8001cd2 <reg_wizchip_bus_cbfunc+0xa>
 8001cd0:	e7fe      	b.n	8001cd0 <reg_wizchip_bus_cbfunc+0x8>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8001cd2:	b118      	cbz	r0, 8001cdc <reg_wizchip_bus_cbfunc+0x14>
 8001cd4:	b111      	cbz	r1, 8001cdc <reg_wizchip_bus_cbfunc+0x14>
 8001cd6:	e9c3 0107 	strd	r0, r1, [r3, #28]
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}
 8001cda:	4770      	bx	lr
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <reg_wizchip_bus_cbfunc+0x24>)
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <reg_wizchip_bus_cbfunc+0x28>)
 8001ce0:	e9c3 0107 	strd	r0, r1, [r3, #28]
}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	08001cb9 	.word	0x08001cb9
 8001cf0:	08001cb1 	.word	0x08001cb1

08001cf4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001cf8:	2008      	movs	r0, #8
{
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
   getSHAR(mac);
 8001cfc:	f7ff faae 	bl	800125c <WIZCHIP_READ>
 8001d00:	4602      	mov	r2, r0
 8001d02:	2008      	movs	r0, #8
 8001d04:	9209      	str	r2, [sp, #36]	; 0x24
 8001d06:	f7ff faa9 	bl	800125c <WIZCHIP_READ>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	9308      	str	r3, [sp, #32]
 8001d10:	f7ff faa4 	bl	800125c <WIZCHIP_READ>
 8001d14:	4683      	mov	fp, r0
 8001d16:	200a      	movs	r0, #10
 8001d18:	f7ff faa0 	bl	800125c <WIZCHIP_READ>
 8001d1c:	4682      	mov	sl, r0
 8001d1e:	200c      	movs	r0, #12
 8001d20:	f7ff fa9c 	bl	800125c <WIZCHIP_READ>
 8001d24:	4601      	mov	r1, r0
 8001d26:	200c      	movs	r0, #12
 8001d28:	9100      	str	r1, [sp, #0]
 8001d2a:	f7ff fa97 	bl	800125c <WIZCHIP_READ>
 8001d2e:	4601      	mov	r1, r0
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001d30:	2010      	movs	r0, #16
   getSHAR(mac);
 8001d32:	9101      	str	r1, [sp, #4]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001d34:	f7ff fa92 	bl	800125c <WIZCHIP_READ>
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2010      	movs	r0, #16
 8001d3c:	9102      	str	r1, [sp, #8]
 8001d3e:	f7ff fa8d 	bl	800125c <WIZCHIP_READ>
 8001d42:	4601      	mov	r1, r0
 8001d44:	2012      	movs	r0, #18
 8001d46:	9103      	str	r1, [sp, #12]
 8001d48:	f7ff fa88 	bl	800125c <WIZCHIP_READ>
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	2012      	movs	r0, #18
 8001d50:	9104      	str	r1, [sp, #16]
 8001d52:	f7ff fa83 	bl	800125c <WIZCHIP_READ>
 8001d56:	4601      	mov	r1, r0
 8001d58:	2014      	movs	r0, #20
 8001d5a:	9105      	str	r1, [sp, #20]
 8001d5c:	f7ff fa7e 	bl	800125c <WIZCHIP_READ>
 8001d60:	4601      	mov	r1, r0
 8001d62:	2014      	movs	r0, #20
 8001d64:	9106      	str	r1, [sp, #24]
 8001d66:	f7ff fa79 	bl	800125c <WIZCHIP_READ>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	2016      	movs	r0, #22
 8001d6e:	9107      	str	r1, [sp, #28]
 8001d70:	f7ff fa74 	bl	800125c <WIZCHIP_READ>
 8001d74:	4681      	mov	r9, r0
 8001d76:	2016      	movs	r0, #22
 8001d78:	f7ff fa70 	bl	800125c <WIZCHIP_READ>
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	2018      	movs	r0, #24
 8001d80:	f7ff fa6c 	bl	800125c <WIZCHIP_READ>
 8001d84:	4607      	mov	r7, r0
 8001d86:	2018      	movs	r0, #24
 8001d88:	f7ff fa68 	bl	800125c <WIZCHIP_READ>
 8001d8c:	4606      	mov	r6, r0
 8001d8e:	201a      	movs	r0, #26
 8001d90:	f7ff fa64 	bl	800125c <WIZCHIP_READ>
 8001d94:	4605      	mov	r5, r0
 8001d96:	201a      	movs	r0, #26
 8001d98:	f7ff fa60 	bl	800125c <WIZCHIP_READ>
   setMR(MR_RST);
 8001d9c:	2180      	movs	r1, #128	; 0x80
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001d9e:	4604      	mov	r4, r0
   setMR(MR_RST);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff fa55 	bl	8001250 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff fa58 	bl	800125c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001dae:	9b08      	ldr	r3, [sp, #32]
 8001db0:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001db4:	fa51 f183 	uxtab	r1, r1, r3
 8001db8:	b289      	uxth	r1, r1
 8001dba:	2008      	movs	r0, #8
 8001dbc:	f7ff fa48 	bl	8001250 <WIZCHIP_WRITE>
 8001dc0:	f02b 01ff 	bic.w	r1, fp, #255	; 0xff
 8001dc4:	fa51 f18a 	uxtab	r1, r1, sl
 8001dc8:	b289      	uxth	r1, r1
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f7ff fa40 	bl	8001250 <WIZCHIP_WRITE>
 8001dd0:	9b00      	ldr	r3, [sp, #0]
 8001dd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	fa51 f183 	uxtab	r1, r1, r3
 8001ddc:	b289      	uxth	r1, r1
 8001dde:	200c      	movs	r0, #12
 8001de0:	f7ff fa36 	bl	8001250 <WIZCHIP_WRITE>
   setGAR(gw);
 8001de4:	9b02      	ldr	r3, [sp, #8]
 8001de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dea:	9b03      	ldr	r3, [sp, #12]
 8001dec:	fa51 f183 	uxtab	r1, r1, r3
 8001df0:	b289      	uxth	r1, r1
 8001df2:	2010      	movs	r0, #16
 8001df4:	f7ff fa2c 	bl	8001250 <WIZCHIP_WRITE>
 8001df8:	9b04      	ldr	r3, [sp, #16]
 8001dfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dfe:	9b05      	ldr	r3, [sp, #20]
 8001e00:	fa51 f183 	uxtab	r1, r1, r3
 8001e04:	b289      	uxth	r1, r1
 8001e06:	2012      	movs	r0, #18
 8001e08:	f7ff fa22 	bl	8001250 <WIZCHIP_WRITE>
   setSUBR(sn);
 8001e0c:	9b06      	ldr	r3, [sp, #24]
 8001e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e12:	9b07      	ldr	r3, [sp, #28]
 8001e14:	fa51 f183 	uxtab	r1, r1, r3
 8001e18:	b289      	uxth	r1, r1
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f7ff fa18 	bl	8001250 <WIZCHIP_WRITE>
 8001e20:	f029 01ff 	bic.w	r1, r9, #255	; 0xff
 8001e24:	fa51 f188 	uxtab	r1, r1, r8
 8001e28:	b289      	uxth	r1, r1
 8001e2a:	2016      	movs	r0, #22
 8001e2c:	f7ff fa10 	bl	8001250 <WIZCHIP_WRITE>
   setSIPR(sip);
 8001e30:	f027 01ff 	bic.w	r1, r7, #255	; 0xff
 8001e34:	fa51 f186 	uxtab	r1, r1, r6
 8001e38:	b289      	uxth	r1, r1
 8001e3a:	2018      	movs	r0, #24
 8001e3c:	f7ff fa08 	bl	8001250 <WIZCHIP_WRITE>
 8001e40:	f025 01ff 	bic.w	r1, r5, #255	; 0xff
 8001e44:	fa51 f184 	uxtab	r1, r1, r4
 8001e48:	b289      	uxth	r1, r1
 8001e4a:	201a      	movs	r0, #26
}
 8001e4c:	b00b      	add	sp, #44	; 0x2c
 8001e4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   setSIPR(sip);
 8001e52:	f7ff b9fd 	b.w	8001250 <WIZCHIP_WRITE>
 8001e56:	bf00      	nop

08001e58 <ctlwizchip>:
{
 8001e58:	b510      	push	{r4, lr}
 8001e5a:	460c      	mov	r4, r1
 8001e5c:	2808      	cmp	r0, #8
 8001e5e:	d841      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001e60:	e8df f000 	tbb	[pc, r0]
 8001e64:	47550543 	.word	0x47550543
 8001e68:	40406079 	.word	0x40406079
 8001e6c:	6b          	.byte	0x6b
 8001e6d:	00          	.byte	0x00
         if(arg != 0) 
 8001e6e:	2900      	cmp	r1, #0
 8001e70:	d03b      	beq.n	8001eea <ctlwizchip+0x92>
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8001e72:	f7ff ff3f 	bl	8001cf4 <wizchip_sw_reset>
      tmp = 0;
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001e76:	7823      	ldrb	r3, [r4, #0]
 8001e78:	2b3f      	cmp	r3, #63	; 0x3f
 8001e7a:	d833      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001e7c:	7862      	ldrb	r2, [r4, #1]
 8001e7e:	2a3f      	cmp	r2, #63	; 0x3f
 8001e80:	d830      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001e82:	78a1      	ldrb	r1, [r4, #2]
			tmp += txsize[i];
 8001e84:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001e86:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 8001e88:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001e8a:	d82b      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001e8c:	78e2      	ldrb	r2, [r4, #3]
			tmp += txsize[i];
 8001e8e:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001e90:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8001e92:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001e94:	d826      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001e96:	7921      	ldrb	r1, [r4, #4]
			tmp += txsize[i];
 8001e98:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001e9a:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 8001e9c:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001e9e:	d821      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001ea0:	7962      	ldrb	r2, [r4, #5]
			tmp += txsize[i];
 8001ea2:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ea4:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8001ea6:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ea8:	d81c      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001eaa:	79a1      	ldrb	r1, [r4, #6]
			tmp += txsize[i];
 8001eac:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001eae:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 8001eb0:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001eb2:	d817      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001eb4:	79e2      	ldrb	r2, [r4, #7]
			tmp += txsize[i];
 8001eb6:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001eb8:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8001eba:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ebc:	d812      	bhi.n	8001ee4 <ctlwizchip+0x8c>
			tmp += txsize[i];
 8001ebe:	4413      	add	r3, r2
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8001ec0:	075b      	lsls	r3, r3, #29
 8001ec2:	d10f      	bne.n	8001ee4 <ctlwizchip+0x8c>
   {
      tmp = 0;
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ec4:	7a23      	ldrb	r3, [r4, #8]
 8001ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ec8:	d80c      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001eca:	7a62      	ldrb	r2, [r4, #9]
 8001ecc:	2a3f      	cmp	r2, #63	; 0x3f
 8001ece:	d809      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001ed0:	7aa1      	ldrb	r1, [r4, #10]
			tmp += rxsize[i];
 8001ed2:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ed4:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 8001ed6:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ed8:	d804      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001eda:	7ae2      	ldrb	r2, [r4, #11]
			tmp += rxsize[i];
 8001edc:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ede:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 8001ee0:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ee2:	d945      	bls.n	8001f70 <ctlwizchip+0x118>
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001ee8:	bd10      	pop	{r4, pc}
         wizchip_sw_reset();
 8001eea:	f7ff ff03 	bl	8001cf4 <wizchip_sw_reset>
   return 0;
 8001eee:	2000      	movs	r0, #0
}
 8001ef0:	bd10      	pop	{r4, pc}
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8001ef2:	880b      	ldrh	r3, [r1, #0]
   return 0;
}

void wizchip_clrinterrupt(intr_kind intr)
{
   uint8_t ir  = (uint8_t)intr;
 8001ef4:	b2d9      	uxtb	r1, r3
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8001ef6:	f041 0210 	orr.w	r2, r1, #16
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001efa:	0a19      	lsrs	r1, r3, #8
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8001efc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8001f00:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8001f04:	2002      	movs	r0, #2
 8001f06:	f7ff f9a3 	bl	8001250 <WIZCHIP_WRITE>
   return 0;
 8001f0a:	2000      	movs	r0, #0
}
 8001f0c:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f7ff f9a4 	bl	800125c <WIZCHIP_READ>
   ir = (uint8_t)(ret >> 8);
 8001f14:	0a03      	lsrs	r3, r0, #8
 8001f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 8001f1a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001f1e:	8020      	strh	r0, [r4, #0]
   return 0;
 8001f20:	2000      	movs	r0, #0
}
 8001f22:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8001f24:	2004      	movs	r0, #4
 8001f26:	f7ff f999 	bl	800125c <WIZCHIP_READ>
   imr = (uint8_t)(ret >> 8);
 8001f2a:	0a03      	lsrs	r3, r0, #8
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 8001f2c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001f30:	eb03 2000 	add.w	r0, r3, r0, lsl #8
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001f34:	8020      	strh	r0, [r4, #0]
   return 0;
 8001f36:	2000      	movs	r0, #0
}
 8001f38:	bd10      	pop	{r4, pc}
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <ctlwizchip+0x150>)
 8001f3c:	789a      	ldrb	r2, [r3, #2]
 8001f3e:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001f40:	78da      	ldrb	r2, [r3, #3]
 8001f42:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001f44:	791a      	ldrb	r2, [r3, #4]
 8001f46:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001f48:	795a      	ldrb	r2, [r3, #5]
 8001f4a:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001f4c:	799b      	ldrb	r3, [r3, #6]
 8001f4e:	710b      	strb	r3, [r1, #4]
         ((uint8_t*)arg)[5] = 0;
 8001f50:	2000      	movs	r0, #0
 8001f52:	7148      	strb	r0, [r1, #5]
}
 8001f54:	bd10      	pop	{r4, pc}
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001f56:	880b      	ldrh	r3, [r1, #0]
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8001f58:	f003 02ef 	and.w	r2, r3, #239	; 0xef
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001f5c:	0a19      	lsrs	r1, r3, #8
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8001f5e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8001f62:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8001f66:	2004      	movs	r0, #4
 8001f68:	f7ff f972 	bl	8001250 <WIZCHIP_WRITE>
   return 0;
 8001f6c:	2000      	movs	r0, #0
}
 8001f6e:	bd10      	pop	{r4, pc}
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f70:	7b21      	ldrb	r1, [r4, #12]
			tmp += rxsize[i];
 8001f72:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f74:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 8001f76:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f78:	d8b4      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001f7a:	7b62      	ldrb	r2, [r4, #13]
			tmp += rxsize[i];
 8001f7c:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f7e:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 8001f80:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f82:	d8af      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001f84:	7ba1      	ldrb	r1, [r4, #14]
			tmp += rxsize[i];
 8001f86:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f88:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 8001f8a:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f8c:	d8aa      	bhi.n	8001ee4 <ctlwizchip+0x8c>
 8001f8e:	7be0      	ldrb	r0, [r4, #15]
			tmp += rxsize[i];
 8001f90:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f92:	283f      	cmp	r0, #63	; 0x3f
			tmp += rxsize[i];
 8001f94:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001f96:	d8a5      	bhi.n	8001ee4 <ctlwizchip+0x8c>
			tmp += rxsize[i];
 8001f98:	4418      	add	r0, r3
		if(tmp % 8) return -1;
 8001f9a:	f010 0007 	ands.w	r0, r0, #7
 8001f9e:	bf18      	it	ne
 8001fa0:	2001      	movne	r0, #1
 8001fa2:	4240      	negs	r0, r0
}
 8001fa4:	bd10      	pop	{r4, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000000c 	.word	0x2000000c

08001fac <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001fac:	b510      	push	{r4, lr}
 8001fae:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8001fb0:	2008      	movs	r0, #8
 8001fb2:	7823      	ldrb	r3, [r4, #0]
 8001fb4:	7861      	ldrb	r1, [r4, #1]
 8001fb6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001fba:	b289      	uxth	r1, r1
 8001fbc:	f7ff f948 	bl	8001250 <WIZCHIP_WRITE>
 8001fc0:	78a3      	ldrb	r3, [r4, #2]
 8001fc2:	78e1      	ldrb	r1, [r4, #3]
 8001fc4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001fc8:	b289      	uxth	r1, r1
 8001fca:	200a      	movs	r0, #10
 8001fcc:	f7ff f940 	bl	8001250 <WIZCHIP_WRITE>
 8001fd0:	7923      	ldrb	r3, [r4, #4]
 8001fd2:	7961      	ldrb	r1, [r4, #5]
 8001fd4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001fd8:	b289      	uxth	r1, r1
 8001fda:	200c      	movs	r0, #12
 8001fdc:	f7ff f938 	bl	8001250 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8001fe0:	7ba3      	ldrb	r3, [r4, #14]
 8001fe2:	7be1      	ldrb	r1, [r4, #15]
 8001fe4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001fe8:	b289      	uxth	r1, r1
 8001fea:	2010      	movs	r0, #16
 8001fec:	f7ff f930 	bl	8001250 <WIZCHIP_WRITE>
 8001ff0:	7c23      	ldrb	r3, [r4, #16]
 8001ff2:	7c61      	ldrb	r1, [r4, #17]
 8001ff4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001ff8:	b289      	uxth	r1, r1
 8001ffa:	2012      	movs	r0, #18
 8001ffc:	f7ff f928 	bl	8001250 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8002000:	7aa3      	ldrb	r3, [r4, #10]
 8002002:	7ae1      	ldrb	r1, [r4, #11]
 8002004:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8002008:	b289      	uxth	r1, r1
 800200a:	2014      	movs	r0, #20
 800200c:	f7ff f920 	bl	8001250 <WIZCHIP_WRITE>
 8002010:	7b23      	ldrb	r3, [r4, #12]
 8002012:	7b61      	ldrb	r1, [r4, #13]
 8002014:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8002018:	b289      	uxth	r1, r1
 800201a:	2016      	movs	r0, #22
 800201c:	f7ff f918 	bl	8001250 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8002020:	79a3      	ldrb	r3, [r4, #6]
 8002022:	79e1      	ldrb	r1, [r4, #7]
 8002024:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8002028:	b289      	uxth	r1, r1
 800202a:	2018      	movs	r0, #24
 800202c:	f7ff f910 	bl	8001250 <WIZCHIP_WRITE>
 8002030:	7a23      	ldrb	r3, [r4, #8]
 8002032:	7a61      	ldrb	r1, [r4, #9]
 8002034:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8002038:	b289      	uxth	r1, r1
 800203a:	201a      	movs	r0, #26
 800203c:	f7ff f908 	bl	8001250 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <wizchip_setnetinfo+0xa4>)
   _DNS_[1] = pnetinfo->dns[1];
   _DNS_[2] = pnetinfo->dns[2];
   _DNS_[3] = pnetinfo->dns[3];
   _DHCP_   = pnetinfo->dhcp;
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <wizchip_setnetinfo+0xa8>)
   _DNS_[0] = pnetinfo->dns[0];
 8002044:	f8d4 0012 	ldr.w	r0, [r4, #18]
   _DHCP_   = pnetinfo->dhcp;
 8002048:	7da2      	ldrb	r2, [r4, #22]
   _DNS_[0] = pnetinfo->dns[0];
 800204a:	6008      	str	r0, [r1, #0]
   _DHCP_   = pnetinfo->dhcp;
 800204c:	701a      	strb	r2, [r3, #0]
}
 800204e:	bd10      	pop	{r4, pc}
 8002050:	2000010c 	.word	0x2000010c
 8002054:	20000108 	.word	0x20000108

08002058 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 800205c:	2008      	movs	r0, #8
 800205e:	f7ff f8fd 	bl	800125c <WIZCHIP_READ>
 8002062:	0a00      	lsrs	r0, r0, #8
 8002064:	7020      	strb	r0, [r4, #0]
 8002066:	2008      	movs	r0, #8
 8002068:	f7ff f8f8 	bl	800125c <WIZCHIP_READ>
 800206c:	7060      	strb	r0, [r4, #1]
 800206e:	200a      	movs	r0, #10
 8002070:	f7ff f8f4 	bl	800125c <WIZCHIP_READ>
 8002074:	0a00      	lsrs	r0, r0, #8
 8002076:	70a0      	strb	r0, [r4, #2]
 8002078:	200a      	movs	r0, #10
 800207a:	f7ff f8ef 	bl	800125c <WIZCHIP_READ>
 800207e:	70e0      	strb	r0, [r4, #3]
 8002080:	200c      	movs	r0, #12
 8002082:	f7ff f8eb 	bl	800125c <WIZCHIP_READ>
 8002086:	0a00      	lsrs	r0, r0, #8
 8002088:	7120      	strb	r0, [r4, #4]
 800208a:	200c      	movs	r0, #12
 800208c:	f7ff f8e6 	bl	800125c <WIZCHIP_READ>
 8002090:	7160      	strb	r0, [r4, #5]
   getGAR(pnetinfo->gw);
 8002092:	2010      	movs	r0, #16
 8002094:	f7ff f8e2 	bl	800125c <WIZCHIP_READ>
 8002098:	0a00      	lsrs	r0, r0, #8
 800209a:	73a0      	strb	r0, [r4, #14]
 800209c:	2010      	movs	r0, #16
 800209e:	f7ff f8dd 	bl	800125c <WIZCHIP_READ>
 80020a2:	73e0      	strb	r0, [r4, #15]
 80020a4:	2012      	movs	r0, #18
 80020a6:	f7ff f8d9 	bl	800125c <WIZCHIP_READ>
 80020aa:	0a00      	lsrs	r0, r0, #8
 80020ac:	7420      	strb	r0, [r4, #16]
 80020ae:	2012      	movs	r0, #18
 80020b0:	f7ff f8d4 	bl	800125c <WIZCHIP_READ>
 80020b4:	7460      	strb	r0, [r4, #17]
   getSUBR(pnetinfo->sn);
 80020b6:	2014      	movs	r0, #20
 80020b8:	f7ff f8d0 	bl	800125c <WIZCHIP_READ>
 80020bc:	0a00      	lsrs	r0, r0, #8
 80020be:	72a0      	strb	r0, [r4, #10]
 80020c0:	2014      	movs	r0, #20
 80020c2:	f7ff f8cb 	bl	800125c <WIZCHIP_READ>
 80020c6:	72e0      	strb	r0, [r4, #11]
 80020c8:	2016      	movs	r0, #22
 80020ca:	f7ff f8c7 	bl	800125c <WIZCHIP_READ>
 80020ce:	0a00      	lsrs	r0, r0, #8
 80020d0:	7320      	strb	r0, [r4, #12]
 80020d2:	2016      	movs	r0, #22
 80020d4:	f7ff f8c2 	bl	800125c <WIZCHIP_READ>
 80020d8:	7360      	strb	r0, [r4, #13]
   getSIPR(pnetinfo->ip);
 80020da:	2018      	movs	r0, #24
 80020dc:	f7ff f8be 	bl	800125c <WIZCHIP_READ>
 80020e0:	0a00      	lsrs	r0, r0, #8
 80020e2:	71a0      	strb	r0, [r4, #6]
 80020e4:	2018      	movs	r0, #24
 80020e6:	f7ff f8b9 	bl	800125c <WIZCHIP_READ>
 80020ea:	71e0      	strb	r0, [r4, #7]
 80020ec:	201a      	movs	r0, #26
 80020ee:	f7ff f8b5 	bl	800125c <WIZCHIP_READ>
 80020f2:	0a00      	lsrs	r0, r0, #8
 80020f4:	7220      	strb	r0, [r4, #8]
 80020f6:	201a      	movs	r0, #26
 80020f8:	f7ff f8b0 	bl	800125c <WIZCHIP_READ>
   pnetinfo->dns[0]= _DNS_[0];
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <wizchip_getnetinfo+0xc0>)
   pnetinfo->dns[1]= _DNS_[1];
   pnetinfo->dns[2]= _DNS_[2];
   pnetinfo->dns[3]= _DNS_[3];
   pnetinfo->dhcp  = _DHCP_;
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <wizchip_getnetinfo+0xc4>)
   pnetinfo->dns[0]= _DNS_[0];
 8002100:	781e      	ldrb	r6, [r3, #0]
   pnetinfo->dns[1]= _DNS_[1];
 8002102:	785d      	ldrb	r5, [r3, #1]
   pnetinfo->dns[2]= _DNS_[2];
 8002104:	7899      	ldrb	r1, [r3, #2]
   pnetinfo->dhcp  = _DHCP_;
 8002106:	7812      	ldrb	r2, [r2, #0]
   pnetinfo->dns[3]= _DNS_[3];
 8002108:	78db      	ldrb	r3, [r3, #3]
   getSIPR(pnetinfo->ip);
 800210a:	7260      	strb	r0, [r4, #9]
   pnetinfo->dns[0]= _DNS_[0];
 800210c:	74a6      	strb	r6, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800210e:	74e5      	strb	r5, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002110:	7521      	strb	r1, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002112:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002114:	75a2      	strb	r2, [r4, #22]
}
 8002116:	bd70      	pop	{r4, r5, r6, pc}
 8002118:	2000010c 	.word	0x2000010c
 800211c:	20000108 	.word	0x20000108

08002120 <ctlnetwork>:
{
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	460c      	mov	r4, r1
 8002124:	2805      	cmp	r0, #5
 8002126:	d836      	bhi.n	8002196 <ctlnetwork+0x76>
 8002128:	e8df f000 	tbb	[pc, r0]
 800212c:	2517120d 	.word	0x2517120d
 8002130:	032b      	.short	0x032b
   setRTR(nettime->time_100us);
}

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
   nettime->retry_cnt = getRCR();
 8002132:	201e      	movs	r0, #30
 8002134:	f7ff f892 	bl	800125c <WIZCHIP_READ>
 8002138:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
 800213a:	201c      	movs	r0, #28
 800213c:	f7ff f88e 	bl	800125c <WIZCHIP_READ>
 8002140:	8060      	strh	r0, [r4, #2]
   return 0;
 8002142:	2000      	movs	r0, #0
}
 8002144:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002146:	4608      	mov	r0, r1
 8002148:	f7ff ff30 	bl	8001fac <wizchip_setnetinfo>
   return 0;
 800214c:	2000      	movs	r0, #0
}
 800214e:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002150:	4608      	mov	r0, r1
 8002152:	f7ff ff81 	bl	8002058 <wizchip_getnetinfo>
   return 0;
 8002156:	2000      	movs	r0, #0
}
 8002158:	bd38      	pop	{r3, r4, r5, pc}
         return wizchip_setnetmode(*(netmode_type*)arg);
 800215a:	780d      	ldrb	r5, [r1, #0]
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 800215c:	f035 0438 	bics.w	r4, r5, #56	; 0x38
 8002160:	d119      	bne.n	8002196 <ctlnetwork+0x76>
   tmp = getMR();
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff f87a 	bl	800125c <WIZCHIP_READ>
 8002168:	b2c1      	uxtb	r1, r0
   setMR(tmp);
 800216a:	4329      	orrs	r1, r5
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff f86f 	bl	8001250 <WIZCHIP_WRITE>
   return 0;
 8002172:	4620      	mov	r0, r4
}
 8002174:	bd38      	pop	{r3, r4, r5, pc}
   return (netmode_type) getMR();
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff f870 	bl	800125c <WIZCHIP_READ>
 800217c:	7020      	strb	r0, [r4, #0]
   return 0;
 800217e:	2000      	movs	r0, #0
}
 8002180:	bd38      	pop	{r3, r4, r5, pc}
   setRCR(nettime->retry_cnt);
 8002182:	7809      	ldrb	r1, [r1, #0]
 8002184:	201e      	movs	r0, #30
 8002186:	f7ff f863 	bl	8001250 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800218a:	8861      	ldrh	r1, [r4, #2]
 800218c:	201c      	movs	r0, #28
 800218e:	f7ff f85f 	bl	8001250 <WIZCHIP_WRITE>
   return 0;
 8002192:	2000      	movs	r0, #0
}
 8002194:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8002196:	f04f 30ff 	mov.w	r0, #4294967295
}
 800219a:	bd38      	pop	{r3, r4, r5, pc}

0800219c <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 800219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 80021a0:	f100 0408 	add.w	r4, r0, #8
 80021a4:	01a4      	lsls	r4, r4, #6
{
 80021a6:	b085      	sub	sp, #20
 80021a8:	4605      	mov	r5, r0
   switch(getSn_SR(sn))
 80021aa:	f104 0008 	add.w	r0, r4, #8
{
 80021ae:	460e      	mov	r6, r1
 80021b0:	4617      	mov	r7, r2
   switch(getSn_SR(sn))
 80021b2:	f7ff f853 	bl	800125c <WIZCHIP_READ>
 80021b6:	b2c0      	uxtb	r0, r0
 80021b8:	281c      	cmp	r0, #28
 80021ba:	d846      	bhi.n	800224a <loopback_tcps+0xae>
 80021bc:	e8df f000 	tbb	[pc, r0]
 80021c0:	45454562 	.word	0x45454562
 80021c4:	45454545 	.word	0x45454545
 80021c8:	45454545 	.word	0x45454545
 80021cc:	45454545 	.word	0x45454545
 80021d0:	55454545 	.word	0x55454545
 80021d4:	0f454545 	.word	0x0f454545
 80021d8:	45454545 	.word	0x45454545
 80021dc:	4a          	.byte	0x4a
 80021dd:	00          	.byte	0x00
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80021de:	1da7      	adds	r7, r4, #6
 80021e0:	4638      	mov	r0, r7
 80021e2:	f7ff f83b 	bl	800125c <WIZCHIP_READ>
 80021e6:	07c3      	lsls	r3, r0, #31
 80021e8:	d52a      	bpl.n	8002240 <loopback_tcps+0xa4>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 80021ea:	f104 0814 	add.w	r8, r4, #20
 80021ee:	4640      	mov	r0, r8
 80021f0:	f7ff f834 	bl	800125c <WIZCHIP_READ>
 80021f4:	4682      	mov	sl, r0
 80021f6:	4640      	mov	r0, r8
 80021f8:	f7ff f830 	bl	800125c <WIZCHIP_READ>
 80021fc:	f104 0916 	add.w	r9, r4, #22
 8002200:	4683      	mov	fp, r0
 8002202:	4648      	mov	r0, r9
 8002204:	f7ff f82a 	bl	800125c <WIZCHIP_READ>
 8002208:	4680      	mov	r8, r0
 800220a:	4648      	mov	r0, r9
 800220c:	f7ff f826 	bl	800125c <WIZCHIP_READ>
 8002210:	4681      	mov	r9, r0
			destport = getSn_DPORT(sn);
 8002212:	f104 0012 	add.w	r0, r4, #18
 8002216:	f7ff f821 	bl	800125c <WIZCHIP_READ>

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 800221a:	fa5f f489 	uxtb.w	r4, r9
 800221e:	f3c8 210f 	ubfx	r1, r8, #8, #16
 8002222:	e9cd 1400 	strd	r1, r4, [sp]
 8002226:	9002      	str	r0, [sp, #8]
 8002228:	4629      	mov	r1, r5
 800222a:	482e      	ldr	r0, [pc, #184]	; (80022e4 <loopback_tcps+0x148>)
 800222c:	fa5f f38b 	uxtb.w	r3, fp
 8002230:	f3ca 220f 	ubfx	r2, sl, #8, #16
 8002234:	f000 fb7c 	bl	8002930 <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 8002238:	4638      	mov	r0, r7
 800223a:	2101      	movs	r1, #1
 800223c:	f7ff f808 	bl	8001250 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8002240:	4628      	mov	r0, r5
 8002242:	f7ff f845 	bl	80012d0 <getSn_RX_RSR>
 8002246:	b282      	uxth	r2, r0
 8002248:	bb4a      	cbnz	r2, 800229e <loopback_tcps+0x102>
   switch(getSn_SR(sn))
 800224a:	2401      	movs	r4, #1
         break;
      default:
         break;
   }
   return 1;
}
 800224c:	4620      	mov	r0, r4
 800224e:	b005      	add	sp, #20
 8002250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8002254:	4628      	mov	r0, r5
 8002256:	f7ff fb2f 	bl	80018b8 <disconnect>
 800225a:	2801      	cmp	r0, #1
 800225c:	4604      	mov	r4, r0
 800225e:	d1f5      	bne.n	800224c <loopback_tcps+0xb0>
         printf("%d:Socket Closed\r\n", sn);
 8002260:	4629      	mov	r1, r5
 8002262:	4821      	ldr	r0, [pc, #132]	; (80022e8 <loopback_tcps+0x14c>)
 8002264:	f000 fb64 	bl	8002930 <iprintf>
         break;
 8002268:	e7f0      	b.n	800224c <loopback_tcps+0xb0>
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 800226a:	463a      	mov	r2, r7
 800226c:	4629      	mov	r1, r5
 800226e:	481f      	ldr	r0, [pc, #124]	; (80022ec <loopback_tcps+0x150>)
 8002270:	f000 fb5e 	bl	8002930 <iprintf>
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8002274:	4628      	mov	r0, r5
 8002276:	f7ff fae7 	bl	8001848 <listen>
 800227a:	4604      	mov	r4, r0
}
 800227c:	4620      	mov	r0, r4
 800227e:	b005      	add	sp, #20
 8002280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8002284:	463a      	mov	r2, r7
 8002286:	2300      	movs	r3, #0
 8002288:	2101      	movs	r1, #1
 800228a:	4628      	mov	r0, r5
 800228c:	f7ff fa34 	bl	80016f8 <socket>
 8002290:	4285      	cmp	r5, r0
 8002292:	4604      	mov	r4, r0
 8002294:	d0d9      	beq.n	800224a <loopback_tcps+0xae>
}
 8002296:	4620      	mov	r0, r4
 8002298:	b005      	add	sp, #20
 800229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = recv(sn, buf, size);
 800229e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80022a2:	bf28      	it	cs
 80022a4:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 80022a8:	4631      	mov	r1, r6
 80022aa:	4628      	mov	r0, r5
 80022ac:	f7ff fbf4 	bl	8001a98 <recv>
			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 80022b0:	1e04      	subs	r4, r0, #0
 80022b2:	ddcb      	ble.n	800224c <loopback_tcps+0xb0>
			size = (uint16_t) ret;
 80022b4:	fa1f f884 	uxth.w	r8, r4
			while(size != sentsize)
 80022b8:	f1b8 0f00 	cmp.w	r8, #0
 80022bc:	d0c5      	beq.n	800224a <loopback_tcps+0xae>
			sentsize = 0;
 80022be:	2700      	movs	r7, #0
 80022c0:	e001      	b.n	80022c6 <loopback_tcps+0x12a>
			while(size != sentsize)
 80022c2:	45b8      	cmp	r8, r7
 80022c4:	d0c1      	beq.n	800224a <loopback_tcps+0xae>
				ret = send(sn, buf+sentsize, size-sentsize);
 80022c6:	eba8 0207 	sub.w	r2, r8, r7
 80022ca:	19f1      	adds	r1, r6, r7
 80022cc:	b292      	uxth	r2, r2
 80022ce:	4628      	mov	r0, r5
 80022d0:	f7ff fb3a 	bl	8001948 <send>
				if(ret < 0)
 80022d4:	1e04      	subs	r4, r0, #0
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80022d6:	4427      	add	r7, r4
 80022d8:	b2bf      	uxth	r7, r7
				if(ret < 0)
 80022da:	daf2      	bge.n	80022c2 <loopback_tcps+0x126>
					close(sn);
 80022dc:	4628      	mov	r0, r5
 80022de:	f7ff fa03 	bl	80016e8 <close>
					return ret;
 80022e2:	e7b3      	b.n	800224c <loopback_tcps+0xb0>
 80022e4:	080038e0 	.word	0x080038e0
 80022e8:	08003904 	.word	0x08003904
 80022ec:	08003918 	.word	0x08003918

080022f0 <W5300_write>:
	HAL_Delay(100);
}

void W5300_write(uint32_t addr, iodata_t wd)
{
	_W5300_DATA(addr) = wd;
 80022f0:	0040      	lsls	r0, r0, #1
 80022f2:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 80022f6:	8001      	strh	r1, [r0, #0]
}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop

080022fc <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
	return _W5300_DATA(addr);
 80022fc:	0040      	lsls	r0, r0, #1
 80022fe:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8002302:	8800      	ldrh	r0, [r0, #0]
}
 8002304:	b280      	uxth	r0, r0
 8002306:	4770      	bx	lr

08002308 <_write>:
#include "config.h"

int _write( int32_t file , uint8_t *ptr , int32_t len )
{
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Implement your write code here, this is used by puts and printf for example */
    for ( int16_t i = 0 ; i < len ; ++i )
 800230a:	1e16      	subs	r6, r2, #0
 800230c:	dd0e      	ble.n	800232c <_write+0x24>
    {
        HAL_UART_Transmit( &huart1, ptr++, 1, 100);
 800230e:	4f08      	ldr	r7, [pc, #32]	; (8002330 <_write+0x28>)
 8002310:	460d      	mov	r5, r1
    for ( int16_t i = 0 ; i < len ; ++i )
 8002312:	2400      	movs	r4, #0
        HAL_UART_Transmit( &huart1, ptr++, 1, 100);
 8002314:	3401      	adds	r4, #1
 8002316:	4629      	mov	r1, r5
 8002318:	2364      	movs	r3, #100	; 0x64
 800231a:	2201      	movs	r2, #1
 800231c:	4638      	mov	r0, r7
 800231e:	b224      	sxth	r4, r4
 8002320:	f7fe fea0 	bl	8001064 <HAL_UART_Transmit>
    for ( int16_t i = 0 ; i < len ; ++i )
 8002324:	42b4      	cmp	r4, r6
        HAL_UART_Transmit( &huart1, ptr++, 1, 100);
 8002326:	f105 0501 	add.w	r5, r5, #1
    for ( int16_t i = 0 ; i < len ; ++i )
 800232a:	dbf3      	blt.n	8002314 <_write+0xc>
    }
    return len;
}
 800232c:	4630      	mov	r0, r6
 800232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002330:	20000174 	.word	0x20000174

08002334 <print_network_information>:



void print_network_information(void)
{
 8002334:	b510      	push	{r4, lr}
    wizchip_getnetinfo(&gWIZNETINFO);
 8002336:	4c19      	ldr	r4, [pc, #100]	; (800239c <print_network_information+0x68>)
{
 8002338:	b084      	sub	sp, #16
    wizchip_getnetinfo(&gWIZNETINFO);
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff fe8c 	bl	8002058 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8002340:	7961      	ldrb	r1, [r4, #5]
 8002342:	7922      	ldrb	r2, [r4, #4]
 8002344:	78e3      	ldrb	r3, [r4, #3]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800234c:	78a3      	ldrb	r3, [r4, #2]
 800234e:	7862      	ldrb	r2, [r4, #1]
 8002350:	7821      	ldrb	r1, [r4, #0]
 8002352:	4813      	ldr	r0, [pc, #76]	; (80023a0 <print_network_information+0x6c>)
 8002354:	f000 faec 	bl	8002930 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8002358:	7a63      	ldrb	r3, [r4, #9]
 800235a:	79e2      	ldrb	r2, [r4, #7]
 800235c:	79a1      	ldrb	r1, [r4, #6]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	4810      	ldr	r0, [pc, #64]	; (80023a4 <print_network_information+0x70>)
 8002362:	7a23      	ldrb	r3, [r4, #8]
 8002364:	f000 fae4 	bl	8002930 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8002368:	7b63      	ldrb	r3, [r4, #13]
 800236a:	7ae2      	ldrb	r2, [r4, #11]
 800236c:	7aa1      	ldrb	r1, [r4, #10]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <print_network_information+0x74>)
 8002372:	7b23      	ldrb	r3, [r4, #12]
 8002374:	f000 fadc 	bl	8002930 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8002378:	7c63      	ldrb	r3, [r4, #17]
 800237a:	7be2      	ldrb	r2, [r4, #15]
 800237c:	7ba1      	ldrb	r1, [r4, #14]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <print_network_information+0x78>)
 8002382:	7c23      	ldrb	r3, [r4, #16]
 8002384:	f000 fad4 	bl	8002930 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8002388:	7d63      	ldrb	r3, [r4, #21]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	7ce2      	ldrb	r2, [r4, #19]
 800238e:	7d23      	ldrb	r3, [r4, #20]
 8002390:	7ca1      	ldrb	r1, [r4, #18]
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <print_network_information+0x7c>)
 8002394:	f000 facc 	bl	8002930 <iprintf>
}
 8002398:	b004      	add	sp, #16
 800239a:	bd10      	pop	{r4, pc}
 800239c:	20000038 	.word	0x20000038
 80023a0:	08003944 	.word	0x08003944
 80023a4:	08003974 	.word	0x08003974
 80023a8:	08003990 	.word	0x08003990
 80023ac:	080039ac 	.word	0x080039ac
 80023b0:	080039c8 	.word	0x080039c8

080023b4 <_InitW5300>:

void _InitW5300(void);

void _InitW5300(void)
{
 80023b4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2108      	movs	r1, #8
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <_InitW5300+0x5c>)
 80023bc:	f7fe faac 	bl	8000918 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80023c0:	200a      	movs	r0, #10
 80023c2:	f7fe f921 	bl	8000608 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2108      	movs	r1, #8
 80023ca:	4811      	ldr	r0, [pc, #68]	; (8002410 <_InitW5300+0x5c>)
 80023cc:	f7fe faa4 	bl	8000918 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80023d0:	2064      	movs	r0, #100	; 0x64
 80023d2:	f7fe f919 	bl	8000608 <HAL_Delay>
	unsigned int tmpaddr[4];

	Reset_W5300();
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 80023d6:	490f      	ldr	r1, [pc, #60]	; (8002414 <_InitW5300+0x60>)
 80023d8:	480f      	ldr	r0, [pc, #60]	; (8002418 <_InitW5300+0x64>)
 80023da:	f7ff fc75 	bl	8001cc8 <reg_wizchip_bus_cbfunc>

	printf("getMR() = %04X\r\n", getMR());
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe ff3c 	bl	800125c <WIZCHIP_READ>
 80023e4:	4601      	mov	r1, r0
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <_InitW5300+0x68>)
 80023e8:	f000 faa2 	bl	8002930 <iprintf>

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <_InitW5300+0x6c>)
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7ff fd32 	bl	8001e58 <ctlwizchip>
 80023f4:	3001      	adds	r0, #1
 80023f6:	d007      	beq.n	8002408 <_InitW5300+0x54>
	{
		printf("W5300 memory initialization failed\r\n");
	}

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80023f8:	490a      	ldr	r1, [pc, #40]	; (8002424 <_InitW5300+0x70>)
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7ff fe90 	bl	8002120 <ctlnetwork>
	print_network_information();
}
 8002400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print_network_information();
 8002404:	f7ff bf96 	b.w	8002334 <print_network_information>
		printf("W5300 memory initialization failed\r\n");
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <_InitW5300+0x74>)
 800240a:	f000 fb17 	bl	8002a3c <puts>
 800240e:	e7f3      	b.n	80023f8 <_InitW5300+0x44>
 8002410:	40021000 	.word	0x40021000
 8002414:	080022f1 	.word	0x080022f1
 8002418:	080022fd 	.word	0x080022fd
 800241c:	080039e4 	.word	0x080039e4
 8002420:	20000050 	.word	0x20000050
 8002424:	20000038 	.word	0x20000038
 8002428:	080039f8 	.word	0x080039f8

0800242c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800242c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	2300      	movs	r3, #0
{
 8002430:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002432:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002436:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800243e:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4922      	ldr	r1, [pc, #136]	; (80024cc <SystemClock_Config+0xa0>)
 8002444:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002446:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800244a:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002450:	6408      	str	r0, [r1, #64]	; 0x40
 8002452:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002454:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002458:	9100      	str	r1, [sp, #0]
 800245a:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246c:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800246e:	2401      	movs	r4, #1
 8002470:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002474:	2202      	movs	r2, #2
 8002476:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800247a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800247e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002482:	2404      	movs	r4, #4
 8002484:	25a8      	movs	r5, #168	; 0xa8
 8002486:	2202      	movs	r2, #2
 8002488:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800248a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8002490:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002494:	9901      	ldr	r1, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002496:	f7fe fa43 	bl	8000920 <HAL_RCC_OscConfig>
 800249a:	b108      	cbz	r0, 80024a0 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800249c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249e:	e7fe      	b.n	800249e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024a0:	260f      	movs	r6, #15
 80024a2:	2702      	movs	r7, #2
 80024a4:	2400      	movs	r4, #0
 80024a6:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024ae:	a802      	add	r0, sp, #8
 80024b0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80024b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024ba:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024bc:	f7fe fc4c 	bl	8000d58 <HAL_RCC_ClockConfig>
 80024c0:	b108      	cbz	r0, 80024c6 <SystemClock_Config+0x9a>
 80024c2:	b672      	cpsid	i
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <SystemClock_Config+0x98>
}
 80024c6:	b015      	add	sp, #84	; 0x54
 80024c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40007000 	.word	0x40007000

080024d4 <main>:
{
 80024d4:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d6:	2400      	movs	r4, #0
{
 80024d8:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 80024da:	f7fe f869 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 80024de:	f7ff ffa5 	bl	800242c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80024e6:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <main+0x174>)
 80024ec:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ee:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80024f2:	4856      	ldr	r0, [pc, #344]	; (800264c <main+0x178>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024f4:	f042 0220 	orr.w	r2, r2, #32
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
 80024fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fc:	f002 0220 	and.w	r2, r2, #32
 8002500:	9200      	str	r2, [sp, #0]
 8002502:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002504:	9401      	str	r4, [sp, #4]
 8002506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
 800250e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002510:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002514:	9201      	str	r2, [sp, #4]
 8002516:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002518:	9402      	str	r4, [sp, #8]
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251c:	f042 0210 	orr.w	r2, r2, #16
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
 8002522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002524:	f002 0210 	and.w	r2, r2, #16
 8002528:	9202      	str	r2, [sp, #8]
 800252a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252c:	9403      	str	r4, [sp, #12]
 800252e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002530:	f042 0208 	orr.w	r2, r2, #8
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
 8002536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002538:	f002 0208 	and.w	r2, r2, #8
 800253c:	9203      	str	r2, [sp, #12]
 800253e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002540:	9404      	str	r4, [sp, #16]
 8002542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
 800254a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254c:	f002 0201 	and.w	r2, r2, #1
 8002550:	9204      	str	r2, [sp, #16]
 8002552:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002554:	9405      	str	r4, [sp, #20]
 8002556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8002564:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002566:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8002568:	2108      	movs	r1, #8
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800256a:	2600      	movs	r6, #0
 800256c:	2700      	movs	r7, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800256e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8002570:	f7fe f9d2 	bl	8000918 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002574:	2208      	movs	r2, #8
 8002576:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002578:	4834      	ldr	r0, [pc, #208]	; (800264c <main+0x178>)
 800257a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800257c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002580:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002584:	f7fe f8b8 	bl	80006f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002588:	2202      	movs	r2, #2
 800258a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	4830      	ldr	r0, [pc, #192]	; (8002650 <main+0x17c>)
 800258e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002590:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8002594:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002598:	f7fe f8ae 	bl	80006f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259c:	2204      	movs	r2, #4
 800259e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a0:	482c      	ldr	r0, [pc, #176]	; (8002654 <main+0x180>)
 80025a2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025a4:	e9cd 6708 	strd	r6, r7, [sp, #32]
 80025a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ac:	f7fe f8a4 	bl	80006f8 <HAL_GPIO_Init>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80025b0:	4829      	ldr	r0, [pc, #164]	; (8002658 <main+0x184>)
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80025b2:	4f2a      	ldr	r7, [pc, #168]	; (800265c <main+0x188>)
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80025b4:	940c      	str	r4, [sp, #48]	; 0x30
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK2;
 80025b6:	2502      	movs	r5, #2
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80025b8:	2610      	movs	r6, #16
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80025ba:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80025be:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80025c2:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80025c6:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80025ca:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80025ce:	4622      	mov	r2, r4
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80025d0:	f04f 4c20 	mov.w	ip, #2684354560	; 0xa0000000
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80025d4:	6444      	str	r4, [r0, #68]	; 0x44
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK2;
 80025d6:	6085      	str	r5, [r0, #8]
  Timing.AddressSetupTime = 3;
 80025d8:	2403      	movs	r4, #3
 80025da:	2503      	movs	r5, #3
 80025dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80025e0:	e9c0 c700 	strd	ip, r7, [r0]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80025e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80025e8:	6146      	str	r6, [r0, #20]
  Timing.AddressSetupTime = 3;
 80025ea:	2704      	movs	r7, #4
 80025ec:	2604      	movs	r6, #4
 80025ee:	240a      	movs	r4, #10
 80025f0:	250a      	movs	r5, #10
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80025f2:	a906      	add	r1, sp, #24
  Timing.AddressSetupTime = 3;
 80025f4:	e9cd 6708 	strd	r6, r7, [sp, #32]
 80025f8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80025fc:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80025fe:	f7fe fc69 	bl	8000ed4 <HAL_SRAM_Init>
 8002602:	b108      	cbz	r0, 8002608 <main+0x134>
 8002604:	b672      	cpsid	i
  while (1)
 8002606:	e7fe      	b.n	8002606 <main+0x132>
  huart1.Instance = USART1;
 8002608:	4602      	mov	r2, r0
 800260a:	4d15      	ldr	r5, [pc, #84]	; (8002660 <main+0x18c>)
 800260c:	4815      	ldr	r0, [pc, #84]	; (8002664 <main+0x190>)
  huart1.Init.BaudRate = 115200;
 800260e:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002612:	210c      	movs	r1, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8002614:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart1.Init.BaudRate = 115200;
 800261c:	e9c0 5400 	strd	r5, r4, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002620:	6082      	str	r2, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002622:	6141      	str	r1, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002624:	f7fe fc82 	bl	8000f2c <HAL_UART_Init>
 8002628:	b960      	cbnz	r0, 8002644 <main+0x170>
  printf("W5300 TCP Loopback Test\r\n");
 800262a:	480f      	ldr	r0, [pc, #60]	; (8002668 <main+0x194>)
	  loopback_tcps(0, ethBuf0, 3000);
 800262c:	4c0f      	ldr	r4, [pc, #60]	; (800266c <main+0x198>)
  printf("W5300 TCP Loopback Test\r\n");
 800262e:	f000 fa05 	bl	8002a3c <puts>
  _InitW5300();
 8002632:	f7ff febf 	bl	80023b4 <_InitW5300>
	  loopback_tcps(0, ethBuf0, 3000);
 8002636:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800263a:	4621      	mov	r1, r4
 800263c:	2000      	movs	r0, #0
 800263e:	f7ff fdad 	bl	800219c <loopback_tcps>
  while (1)
 8002642:	e7f8      	b.n	8002636 <main+0x162>
 8002644:	b672      	cpsid	i
  while (1)
 8002646:	e7fe      	b.n	8002646 <main+0x172>
 8002648:	40023800 	.word	0x40023800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	40020400 	.word	0x40020400
 8002654:	40020800 	.word	0x40020800
 8002658:	20000124 	.word	0x20000124
 800265c:	a0000104 	.word	0xa0000104
 8002660:	40011000 	.word	0x40011000
 8002664:	20000174 	.word	0x20000174
 8002668:	08003a1c 	.word	0x08003a1c
 800266c:	200001b8 	.word	0x200001b8

08002670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002670:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <HAL_MspInit+0x34>)
 8002674:	2100      	movs	r1, #0
 8002676:	9100      	str	r1, [sp, #0]
 8002678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800267a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
 8002680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002682:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002686:	9200      	str	r2, [sp, #0]
 8002688:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	9101      	str	r1, [sp, #4]
 800268c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800268e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269e:	b002      	add	sp, #8
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800

080026a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80026aa:	6801      	ldr	r1, [r0, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_UART_MspInit+0x6c>)
{
 80026ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80026b2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80026b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80026bc:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 80026be:	d001      	beq.n	80026c4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026c0:	b009      	add	sp, #36	; 0x24
 80026c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	4812      	ldr	r0, [pc, #72]	; (8002718 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ce:	f041 0110 	orr.w	r1, r1, #16
 80026d2:	6451      	str	r1, [r2, #68]	; 0x44
 80026d4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80026d6:	f001 0110 	and.w	r1, r1, #16
 80026da:	9100      	str	r1, [sp, #0]
 80026dc:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6313      	str	r3, [r2, #48]	; 0x30
 80026e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f0:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026f6:	2200      	movs	r2, #0
 80026f8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026fc:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8002700:	2502      	movs	r5, #2
 8002702:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002706:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	f7fd fff5 	bl	80006f8 <HAL_GPIO_Init>
}
 800270e:	b009      	add	sp, #36	; 0x24
 8002710:	bd30      	pop	{r4, r5, pc}
 8002712:	bf00      	nop
 8002714:	40011000 	.word	0x40011000
 8002718:	40020000 	.word	0x40020000

0800271c <HAL_SRAM_MspInit>:
static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FSMC_Initialized) {
 800271c:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_SRAM_MspInit+0x90>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	b102      	cbz	r2, 8002724 <HAL_SRAM_MspInit+0x8>
 8002722:	4770      	bx	lr
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002726:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002728:	4921      	ldr	r1, [pc, #132]	; (80027b0 <HAL_SRAM_MspInit+0x94>)
 800272a:	9201      	str	r2, [sp, #4]
  FSMC_Initialized = 1;
 800272c:	2001      	movs	r0, #1
 800272e:	6018      	str	r0, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002730:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002732:	4820      	ldr	r0, [pc, #128]	; (80027b4 <HAL_SRAM_MspInit+0x98>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	638b      	str	r3, [r1, #56]	; 0x38
 800273a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800273c:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002740:	2400      	movs	r4, #0
 8002742:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002744:	260c      	movs	r6, #12
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002746:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002748:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800274a:	f24f 023f 	movw	r2, #61503	; 0xf03f
 800274e:	2302      	movs	r3, #2
 8002750:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002754:	e9cd 4504 	strd	r4, r5, [sp, #16]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002758:	9f01      	ldr	r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800275a:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800275c:	f7fd ffcc 	bl	80006f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002760:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002762:	f64f 7280 	movw	r2, #65408	; 0xff80
 8002766:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002768:	4813      	ldr	r0, [pc, #76]	; (80027b8 <HAL_SRAM_MspInit+0x9c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800276a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800276c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002770:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002774:	f7fd ffc0 	bl	80006f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002778:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800277a:	f24c 7233 	movw	r2, #50995	; 0xc733
 800277e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002780:	480e      	ldr	r0, [pc, #56]	; (80027bc <HAL_SRAM_MspInit+0xa0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002782:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002788:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278c:	f7fd ffb4 	bl	80006f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002794:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002796:	480a      	ldr	r0, [pc, #40]	; (80027c0 <HAL_SRAM_MspInit+0xa4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002798:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800279a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800279c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80027a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a4:	f7fd ffa8 	bl	80006f8 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80027a8:	b009      	add	sp, #36	; 0x24
 80027aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ac:	20000110 	.word	0x20000110
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40021400 	.word	0x40021400
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021800 	.word	0x40021800

080027c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <NMI_Handler>
 80027c6:	bf00      	nop

080027c8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <HardFault_Handler>
 80027ca:	bf00      	nop

080027cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <MemManage_Handler>
 80027ce:	bf00      	nop

080027d0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <BusFault_Handler>
 80027d2:	bf00      	nop

080027d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <UsageFault_Handler>
 80027d6:	bf00      	nop

080027d8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop

080027dc <DebugMon_Handler>:
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop

080027e0 <PendSV_Handler>:
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop

080027e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e4:	f7fd befe 	b.w	80005e4 <HAL_IncTick>

080027e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	1e16      	subs	r6, r2, #0
 80027ec:	dd07      	ble.n	80027fe <_read+0x16>
 80027ee:	460c      	mov	r4, r1
 80027f0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80027f2:	f3af 8000 	nop.w
 80027f6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	42a5      	cmp	r5, r4
 80027fc:	d1f9      	bne.n	80027f2 <_read+0xa>
	}

return len;
}
 80027fe:	4630      	mov	r0, r6
 8002800:	bd70      	pop	{r4, r5, r6, pc}
 8002802:	bf00      	nop

08002804 <_close>:
}

int _close(int file)
{
	return -1;
}
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop

0800280c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800280c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002810:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002812:	2000      	movs	r0, #0
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop

08002818 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002818:	2001      	movs	r0, #1
 800281a:	4770      	bx	lr

0800281c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800281c:	2000      	movs	r0, #0
 800281e:	4770      	bx	lr

08002820 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002822:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002824:	680b      	ldr	r3, [r1, #0]
{
 8002826:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002828:	4c0c      	ldr	r4, [pc, #48]	; (800285c <_sbrk+0x3c>)
 800282a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800282c:	b12b      	cbz	r3, 800283a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282e:	4418      	add	r0, r3
 8002830:	4290      	cmp	r0, r2
 8002832:	d807      	bhi.n	8002844 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002834:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <_sbrk+0x40>)
 800283c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800283e:	4418      	add	r0, r3
 8002840:	4290      	cmp	r0, r2
 8002842:	d9f7      	bls.n	8002834 <_sbrk+0x14>
    errno = ENOMEM;
 8002844:	f000 f842 	bl	80028cc <__errno>
 8002848:	230c      	movs	r3, #12
 800284a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd10      	pop	{r4, pc}
 8002854:	20000114 	.word	0x20000114
 8002858:	20020000 	.word	0x20020000
 800285c:	00000400 	.word	0x00000400
 8002860:	200009c8 	.word	0x200009c8

08002864 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002864:	4a03      	ldr	r2, [pc, #12]	; (8002874 <SystemInit+0x10>)
 8002866:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800286a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800286e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800287c:	480d      	ldr	r0, [pc, #52]	; (80028b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800287e:	490e      	ldr	r1, [pc, #56]	; (80028b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002880:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002894:	4c0b      	ldr	r4, [pc, #44]	; (80028c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028a2:	f7ff ffdf 	bl	8002864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028a6:	f000 f817 	bl	80028d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028aa:	f7ff fe13 	bl	80024d4 <main>
  bx  lr    
 80028ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b8:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80028bc:	08003af8 	.word	0x08003af8
  ldr r2, =_sbss
 80028c0:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80028c4:	200009c8 	.word	0x200009c8

080028c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC_IRQHandler>
	...

080028cc <__errno>:
 80028cc:	4b01      	ldr	r3, [pc, #4]	; (80028d4 <__errno+0x8>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000064 	.word	0x20000064

080028d8 <__libc_init_array>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	4d0d      	ldr	r5, [pc, #52]	; (8002910 <__libc_init_array+0x38>)
 80028dc:	4c0d      	ldr	r4, [pc, #52]	; (8002914 <__libc_init_array+0x3c>)
 80028de:	1b64      	subs	r4, r4, r5
 80028e0:	10a4      	asrs	r4, r4, #2
 80028e2:	2600      	movs	r6, #0
 80028e4:	42a6      	cmp	r6, r4
 80028e6:	d109      	bne.n	80028fc <__libc_init_array+0x24>
 80028e8:	4d0b      	ldr	r5, [pc, #44]	; (8002918 <__libc_init_array+0x40>)
 80028ea:	4c0c      	ldr	r4, [pc, #48]	; (800291c <__libc_init_array+0x44>)
 80028ec:	f000 ffec 	bl	80038c8 <_init>
 80028f0:	1b64      	subs	r4, r4, r5
 80028f2:	10a4      	asrs	r4, r4, #2
 80028f4:	2600      	movs	r6, #0
 80028f6:	42a6      	cmp	r6, r4
 80028f8:	d105      	bne.n	8002906 <__libc_init_array+0x2e>
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002900:	4798      	blx	r3
 8002902:	3601      	adds	r6, #1
 8002904:	e7ee      	b.n	80028e4 <__libc_init_array+0xc>
 8002906:	f855 3b04 	ldr.w	r3, [r5], #4
 800290a:	4798      	blx	r3
 800290c:	3601      	adds	r6, #1
 800290e:	e7f2      	b.n	80028f6 <__libc_init_array+0x1e>
 8002910:	08003af0 	.word	0x08003af0
 8002914:	08003af0 	.word	0x08003af0
 8002918:	08003af0 	.word	0x08003af0
 800291c:	08003af4 	.word	0x08003af4

08002920 <memset>:
 8002920:	4402      	add	r2, r0
 8002922:	4603      	mov	r3, r0
 8002924:	4293      	cmp	r3, r2
 8002926:	d100      	bne.n	800292a <memset+0xa>
 8002928:	4770      	bx	lr
 800292a:	f803 1b01 	strb.w	r1, [r3], #1
 800292e:	e7f9      	b.n	8002924 <memset+0x4>

08002930 <iprintf>:
 8002930:	b40f      	push	{r0, r1, r2, r3}
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <iprintf+0x2c>)
 8002934:	b513      	push	{r0, r1, r4, lr}
 8002936:	681c      	ldr	r4, [r3, #0]
 8002938:	b124      	cbz	r4, 8002944 <iprintf+0x14>
 800293a:	69a3      	ldr	r3, [r4, #24]
 800293c:	b913      	cbnz	r3, 8002944 <iprintf+0x14>
 800293e:	4620      	mov	r0, r4
 8002940:	f000 fa5e 	bl	8002e00 <__sinit>
 8002944:	ab05      	add	r3, sp, #20
 8002946:	9a04      	ldr	r2, [sp, #16]
 8002948:	68a1      	ldr	r1, [r4, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	4620      	mov	r0, r4
 800294e:	f000 fc2f 	bl	80031b0 <_vfiprintf_r>
 8002952:	b002      	add	sp, #8
 8002954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002958:	b004      	add	sp, #16
 800295a:	4770      	bx	lr
 800295c:	20000064 	.word	0x20000064

08002960 <_puts_r>:
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	460e      	mov	r6, r1
 8002964:	4605      	mov	r5, r0
 8002966:	b118      	cbz	r0, 8002970 <_puts_r+0x10>
 8002968:	6983      	ldr	r3, [r0, #24]
 800296a:	b90b      	cbnz	r3, 8002970 <_puts_r+0x10>
 800296c:	f000 fa48 	bl	8002e00 <__sinit>
 8002970:	69ab      	ldr	r3, [r5, #24]
 8002972:	68ac      	ldr	r4, [r5, #8]
 8002974:	b913      	cbnz	r3, 800297c <_puts_r+0x1c>
 8002976:	4628      	mov	r0, r5
 8002978:	f000 fa42 	bl	8002e00 <__sinit>
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <_puts_r+0xd0>)
 800297e:	429c      	cmp	r4, r3
 8002980:	d120      	bne.n	80029c4 <_puts_r+0x64>
 8002982:	686c      	ldr	r4, [r5, #4]
 8002984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002986:	07db      	lsls	r3, r3, #31
 8002988:	d405      	bmi.n	8002996 <_puts_r+0x36>
 800298a:	89a3      	ldrh	r3, [r4, #12]
 800298c:	0598      	lsls	r0, r3, #22
 800298e:	d402      	bmi.n	8002996 <_puts_r+0x36>
 8002990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002992:	f000 fad3 	bl	8002f3c <__retarget_lock_acquire_recursive>
 8002996:	89a3      	ldrh	r3, [r4, #12]
 8002998:	0719      	lsls	r1, r3, #28
 800299a:	d51d      	bpl.n	80029d8 <_puts_r+0x78>
 800299c:	6923      	ldr	r3, [r4, #16]
 800299e:	b1db      	cbz	r3, 80029d8 <_puts_r+0x78>
 80029a0:	3e01      	subs	r6, #1
 80029a2:	68a3      	ldr	r3, [r4, #8]
 80029a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60a3      	str	r3, [r4, #8]
 80029ac:	bb39      	cbnz	r1, 80029fe <_puts_r+0x9e>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da38      	bge.n	8002a24 <_puts_r+0xc4>
 80029b2:	4622      	mov	r2, r4
 80029b4:	210a      	movs	r1, #10
 80029b6:	4628      	mov	r0, r5
 80029b8:	f000 f848 	bl	8002a4c <__swbuf_r>
 80029bc:	3001      	adds	r0, #1
 80029be:	d011      	beq.n	80029e4 <_puts_r+0x84>
 80029c0:	250a      	movs	r5, #10
 80029c2:	e011      	b.n	80029e8 <_puts_r+0x88>
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <_puts_r+0xd4>)
 80029c6:	429c      	cmp	r4, r3
 80029c8:	d101      	bne.n	80029ce <_puts_r+0x6e>
 80029ca:	68ac      	ldr	r4, [r5, #8]
 80029cc:	e7da      	b.n	8002984 <_puts_r+0x24>
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <_puts_r+0xd8>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	bf08      	it	eq
 80029d4:	68ec      	ldreq	r4, [r5, #12]
 80029d6:	e7d5      	b.n	8002984 <_puts_r+0x24>
 80029d8:	4621      	mov	r1, r4
 80029da:	4628      	mov	r0, r5
 80029dc:	f000 f888 	bl	8002af0 <__swsetup_r>
 80029e0:	2800      	cmp	r0, #0
 80029e2:	d0dd      	beq.n	80029a0 <_puts_r+0x40>
 80029e4:	f04f 35ff 	mov.w	r5, #4294967295
 80029e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029ea:	07da      	lsls	r2, r3, #31
 80029ec:	d405      	bmi.n	80029fa <_puts_r+0x9a>
 80029ee:	89a3      	ldrh	r3, [r4, #12]
 80029f0:	059b      	lsls	r3, r3, #22
 80029f2:	d402      	bmi.n	80029fa <_puts_r+0x9a>
 80029f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029f6:	f000 faa2 	bl	8002f3e <__retarget_lock_release_recursive>
 80029fa:	4628      	mov	r0, r5
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	da04      	bge.n	8002a0c <_puts_r+0xac>
 8002a02:	69a2      	ldr	r2, [r4, #24]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	dc06      	bgt.n	8002a16 <_puts_r+0xb6>
 8002a08:	290a      	cmp	r1, #10
 8002a0a:	d004      	beq.n	8002a16 <_puts_r+0xb6>
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	6022      	str	r2, [r4, #0]
 8002a12:	7019      	strb	r1, [r3, #0]
 8002a14:	e7c5      	b.n	80029a2 <_puts_r+0x42>
 8002a16:	4622      	mov	r2, r4
 8002a18:	4628      	mov	r0, r5
 8002a1a:	f000 f817 	bl	8002a4c <__swbuf_r>
 8002a1e:	3001      	adds	r0, #1
 8002a20:	d1bf      	bne.n	80029a2 <_puts_r+0x42>
 8002a22:	e7df      	b.n	80029e4 <_puts_r+0x84>
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	250a      	movs	r5, #10
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	6022      	str	r2, [r4, #0]
 8002a2c:	701d      	strb	r5, [r3, #0]
 8002a2e:	e7db      	b.n	80029e8 <_puts_r+0x88>
 8002a30:	08003a74 	.word	0x08003a74
 8002a34:	08003a94 	.word	0x08003a94
 8002a38:	08003a54 	.word	0x08003a54

08002a3c <puts>:
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <puts+0xc>)
 8002a3e:	4601      	mov	r1, r0
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	f7ff bf8d 	b.w	8002960 <_puts_r>
 8002a46:	bf00      	nop
 8002a48:	20000064 	.word	0x20000064

08002a4c <__swbuf_r>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	460e      	mov	r6, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	4605      	mov	r5, r0
 8002a54:	b118      	cbz	r0, 8002a5e <__swbuf_r+0x12>
 8002a56:	6983      	ldr	r3, [r0, #24]
 8002a58:	b90b      	cbnz	r3, 8002a5e <__swbuf_r+0x12>
 8002a5a:	f000 f9d1 	bl	8002e00 <__sinit>
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <__swbuf_r+0x98>)
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d12b      	bne.n	8002abc <__swbuf_r+0x70>
 8002a64:	686c      	ldr	r4, [r5, #4]
 8002a66:	69a3      	ldr	r3, [r4, #24]
 8002a68:	60a3      	str	r3, [r4, #8]
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	071a      	lsls	r2, r3, #28
 8002a6e:	d52f      	bpl.n	8002ad0 <__swbuf_r+0x84>
 8002a70:	6923      	ldr	r3, [r4, #16]
 8002a72:	b36b      	cbz	r3, 8002ad0 <__swbuf_r+0x84>
 8002a74:	6923      	ldr	r3, [r4, #16]
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	1ac0      	subs	r0, r0, r3
 8002a7a:	6963      	ldr	r3, [r4, #20]
 8002a7c:	b2f6      	uxtb	r6, r6
 8002a7e:	4283      	cmp	r3, r0
 8002a80:	4637      	mov	r7, r6
 8002a82:	dc04      	bgt.n	8002a8e <__swbuf_r+0x42>
 8002a84:	4621      	mov	r1, r4
 8002a86:	4628      	mov	r0, r5
 8002a88:	f000 f926 	bl	8002cd8 <_fflush_r>
 8002a8c:	bb30      	cbnz	r0, 8002adc <__swbuf_r+0x90>
 8002a8e:	68a3      	ldr	r3, [r4, #8]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60a3      	str	r3, [r4, #8]
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	6022      	str	r2, [r4, #0]
 8002a9a:	701e      	strb	r6, [r3, #0]
 8002a9c:	6963      	ldr	r3, [r4, #20]
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	4283      	cmp	r3, r0
 8002aa2:	d004      	beq.n	8002aae <__swbuf_r+0x62>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	07db      	lsls	r3, r3, #31
 8002aa8:	d506      	bpl.n	8002ab8 <__swbuf_r+0x6c>
 8002aaa:	2e0a      	cmp	r6, #10
 8002aac:	d104      	bne.n	8002ab8 <__swbuf_r+0x6c>
 8002aae:	4621      	mov	r1, r4
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f000 f911 	bl	8002cd8 <_fflush_r>
 8002ab6:	b988      	cbnz	r0, 8002adc <__swbuf_r+0x90>
 8002ab8:	4638      	mov	r0, r7
 8002aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <__swbuf_r+0x9c>)
 8002abe:	429c      	cmp	r4, r3
 8002ac0:	d101      	bne.n	8002ac6 <__swbuf_r+0x7a>
 8002ac2:	68ac      	ldr	r4, [r5, #8]
 8002ac4:	e7cf      	b.n	8002a66 <__swbuf_r+0x1a>
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <__swbuf_r+0xa0>)
 8002ac8:	429c      	cmp	r4, r3
 8002aca:	bf08      	it	eq
 8002acc:	68ec      	ldreq	r4, [r5, #12]
 8002ace:	e7ca      	b.n	8002a66 <__swbuf_r+0x1a>
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f000 f80c 	bl	8002af0 <__swsetup_r>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d0cb      	beq.n	8002a74 <__swbuf_r+0x28>
 8002adc:	f04f 37ff 	mov.w	r7, #4294967295
 8002ae0:	e7ea      	b.n	8002ab8 <__swbuf_r+0x6c>
 8002ae2:	bf00      	nop
 8002ae4:	08003a74 	.word	0x08003a74
 8002ae8:	08003a94 	.word	0x08003a94
 8002aec:	08003a54 	.word	0x08003a54

08002af0 <__swsetup_r>:
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <__swsetup_r+0xcc>)
 8002af2:	b570      	push	{r4, r5, r6, lr}
 8002af4:	681d      	ldr	r5, [r3, #0]
 8002af6:	4606      	mov	r6, r0
 8002af8:	460c      	mov	r4, r1
 8002afa:	b125      	cbz	r5, 8002b06 <__swsetup_r+0x16>
 8002afc:	69ab      	ldr	r3, [r5, #24]
 8002afe:	b913      	cbnz	r3, 8002b06 <__swsetup_r+0x16>
 8002b00:	4628      	mov	r0, r5
 8002b02:	f000 f97d 	bl	8002e00 <__sinit>
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <__swsetup_r+0xd0>)
 8002b08:	429c      	cmp	r4, r3
 8002b0a:	d10f      	bne.n	8002b2c <__swsetup_r+0x3c>
 8002b0c:	686c      	ldr	r4, [r5, #4]
 8002b0e:	89a3      	ldrh	r3, [r4, #12]
 8002b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b14:	0719      	lsls	r1, r3, #28
 8002b16:	d42c      	bmi.n	8002b72 <__swsetup_r+0x82>
 8002b18:	06dd      	lsls	r5, r3, #27
 8002b1a:	d411      	bmi.n	8002b40 <__swsetup_r+0x50>
 8002b1c:	2309      	movs	r3, #9
 8002b1e:	6033      	str	r3, [r6, #0]
 8002b20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b24:	81a3      	strh	r3, [r4, #12]
 8002b26:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2a:	e03e      	b.n	8002baa <__swsetup_r+0xba>
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <__swsetup_r+0xd4>)
 8002b2e:	429c      	cmp	r4, r3
 8002b30:	d101      	bne.n	8002b36 <__swsetup_r+0x46>
 8002b32:	68ac      	ldr	r4, [r5, #8]
 8002b34:	e7eb      	b.n	8002b0e <__swsetup_r+0x1e>
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <__swsetup_r+0xd8>)
 8002b38:	429c      	cmp	r4, r3
 8002b3a:	bf08      	it	eq
 8002b3c:	68ec      	ldreq	r4, [r5, #12]
 8002b3e:	e7e6      	b.n	8002b0e <__swsetup_r+0x1e>
 8002b40:	0758      	lsls	r0, r3, #29
 8002b42:	d512      	bpl.n	8002b6a <__swsetup_r+0x7a>
 8002b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b46:	b141      	cbz	r1, 8002b5a <__swsetup_r+0x6a>
 8002b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b4c:	4299      	cmp	r1, r3
 8002b4e:	d002      	beq.n	8002b56 <__swsetup_r+0x66>
 8002b50:	4630      	mov	r0, r6
 8002b52:	f000 fa59 	bl	8003008 <_free_r>
 8002b56:	2300      	movs	r3, #0
 8002b58:	6363      	str	r3, [r4, #52]	; 0x34
 8002b5a:	89a3      	ldrh	r3, [r4, #12]
 8002b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b60:	81a3      	strh	r3, [r4, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	6063      	str	r3, [r4, #4]
 8002b66:	6923      	ldr	r3, [r4, #16]
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	89a3      	ldrh	r3, [r4, #12]
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	81a3      	strh	r3, [r4, #12]
 8002b72:	6923      	ldr	r3, [r4, #16]
 8002b74:	b94b      	cbnz	r3, 8002b8a <__swsetup_r+0x9a>
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b80:	d003      	beq.n	8002b8a <__swsetup_r+0x9a>
 8002b82:	4621      	mov	r1, r4
 8002b84:	4630      	mov	r0, r6
 8002b86:	f000 f9ff 	bl	8002f88 <__smakebuf_r>
 8002b8a:	89a0      	ldrh	r0, [r4, #12]
 8002b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b90:	f010 0301 	ands.w	r3, r0, #1
 8002b94:	d00a      	beq.n	8002bac <__swsetup_r+0xbc>
 8002b96:	2300      	movs	r3, #0
 8002b98:	60a3      	str	r3, [r4, #8]
 8002b9a:	6963      	ldr	r3, [r4, #20]
 8002b9c:	425b      	negs	r3, r3
 8002b9e:	61a3      	str	r3, [r4, #24]
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	b943      	cbnz	r3, 8002bb6 <__swsetup_r+0xc6>
 8002ba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ba8:	d1ba      	bne.n	8002b20 <__swsetup_r+0x30>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	0781      	lsls	r1, r0, #30
 8002bae:	bf58      	it	pl
 8002bb0:	6963      	ldrpl	r3, [r4, #20]
 8002bb2:	60a3      	str	r3, [r4, #8]
 8002bb4:	e7f4      	b.n	8002ba0 <__swsetup_r+0xb0>
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e7f7      	b.n	8002baa <__swsetup_r+0xba>
 8002bba:	bf00      	nop
 8002bbc:	20000064 	.word	0x20000064
 8002bc0:	08003a74 	.word	0x08003a74
 8002bc4:	08003a94 	.word	0x08003a94
 8002bc8:	08003a54 	.word	0x08003a54

08002bcc <__sflush_r>:
 8002bcc:	898a      	ldrh	r2, [r1, #12]
 8002bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	0710      	lsls	r0, r2, #28
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	d458      	bmi.n	8002c8c <__sflush_r+0xc0>
 8002bda:	684b      	ldr	r3, [r1, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	dc05      	bgt.n	8002bec <__sflush_r+0x20>
 8002be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	dc02      	bgt.n	8002bec <__sflush_r+0x20>
 8002be6:	2000      	movs	r0, #0
 8002be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bee:	2e00      	cmp	r6, #0
 8002bf0:	d0f9      	beq.n	8002be6 <__sflush_r+0x1a>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bf8:	682f      	ldr	r7, [r5, #0]
 8002bfa:	602b      	str	r3, [r5, #0]
 8002bfc:	d032      	beq.n	8002c64 <__sflush_r+0x98>
 8002bfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	075a      	lsls	r2, r3, #29
 8002c04:	d505      	bpl.n	8002c12 <__sflush_r+0x46>
 8002c06:	6863      	ldr	r3, [r4, #4]
 8002c08:	1ac0      	subs	r0, r0, r3
 8002c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c0c:	b10b      	cbz	r3, 8002c12 <__sflush_r+0x46>
 8002c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c10:	1ac0      	subs	r0, r0, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	4602      	mov	r2, r0
 8002c16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c18:	6a21      	ldr	r1, [r4, #32]
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	47b0      	blx	r6
 8002c1e:	1c43      	adds	r3, r0, #1
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	d106      	bne.n	8002c32 <__sflush_r+0x66>
 8002c24:	6829      	ldr	r1, [r5, #0]
 8002c26:	291d      	cmp	r1, #29
 8002c28:	d82c      	bhi.n	8002c84 <__sflush_r+0xb8>
 8002c2a:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <__sflush_r+0x108>)
 8002c2c:	40ca      	lsrs	r2, r1
 8002c2e:	07d6      	lsls	r6, r2, #31
 8002c30:	d528      	bpl.n	8002c84 <__sflush_r+0xb8>
 8002c32:	2200      	movs	r2, #0
 8002c34:	6062      	str	r2, [r4, #4]
 8002c36:	04d9      	lsls	r1, r3, #19
 8002c38:	6922      	ldr	r2, [r4, #16]
 8002c3a:	6022      	str	r2, [r4, #0]
 8002c3c:	d504      	bpl.n	8002c48 <__sflush_r+0x7c>
 8002c3e:	1c42      	adds	r2, r0, #1
 8002c40:	d101      	bne.n	8002c46 <__sflush_r+0x7a>
 8002c42:	682b      	ldr	r3, [r5, #0]
 8002c44:	b903      	cbnz	r3, 8002c48 <__sflush_r+0x7c>
 8002c46:	6560      	str	r0, [r4, #84]	; 0x54
 8002c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c4a:	602f      	str	r7, [r5, #0]
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	d0ca      	beq.n	8002be6 <__sflush_r+0x1a>
 8002c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c54:	4299      	cmp	r1, r3
 8002c56:	d002      	beq.n	8002c5e <__sflush_r+0x92>
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f000 f9d5 	bl	8003008 <_free_r>
 8002c5e:	2000      	movs	r0, #0
 8002c60:	6360      	str	r0, [r4, #52]	; 0x34
 8002c62:	e7c1      	b.n	8002be8 <__sflush_r+0x1c>
 8002c64:	6a21      	ldr	r1, [r4, #32]
 8002c66:	2301      	movs	r3, #1
 8002c68:	4628      	mov	r0, r5
 8002c6a:	47b0      	blx	r6
 8002c6c:	1c41      	adds	r1, r0, #1
 8002c6e:	d1c7      	bne.n	8002c00 <__sflush_r+0x34>
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0c4      	beq.n	8002c00 <__sflush_r+0x34>
 8002c76:	2b1d      	cmp	r3, #29
 8002c78:	d001      	beq.n	8002c7e <__sflush_r+0xb2>
 8002c7a:	2b16      	cmp	r3, #22
 8002c7c:	d101      	bne.n	8002c82 <__sflush_r+0xb6>
 8002c7e:	602f      	str	r7, [r5, #0]
 8002c80:	e7b1      	b.n	8002be6 <__sflush_r+0x1a>
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c88:	81a3      	strh	r3, [r4, #12]
 8002c8a:	e7ad      	b.n	8002be8 <__sflush_r+0x1c>
 8002c8c:	690f      	ldr	r7, [r1, #16]
 8002c8e:	2f00      	cmp	r7, #0
 8002c90:	d0a9      	beq.n	8002be6 <__sflush_r+0x1a>
 8002c92:	0793      	lsls	r3, r2, #30
 8002c94:	680e      	ldr	r6, [r1, #0]
 8002c96:	bf08      	it	eq
 8002c98:	694b      	ldreq	r3, [r1, #20]
 8002c9a:	600f      	str	r7, [r1, #0]
 8002c9c:	bf18      	it	ne
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	eba6 0807 	sub.w	r8, r6, r7
 8002ca4:	608b      	str	r3, [r1, #8]
 8002ca6:	f1b8 0f00 	cmp.w	r8, #0
 8002caa:	dd9c      	ble.n	8002be6 <__sflush_r+0x1a>
 8002cac:	6a21      	ldr	r1, [r4, #32]
 8002cae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	463a      	mov	r2, r7
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	47b0      	blx	r6
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	dc06      	bgt.n	8002cca <__sflush_r+0xfe>
 8002cbc:	89a3      	ldrh	r3, [r4, #12]
 8002cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc2:	81a3      	strh	r3, [r4, #12]
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	e78e      	b.n	8002be8 <__sflush_r+0x1c>
 8002cca:	4407      	add	r7, r0
 8002ccc:	eba8 0800 	sub.w	r8, r8, r0
 8002cd0:	e7e9      	b.n	8002ca6 <__sflush_r+0xda>
 8002cd2:	bf00      	nop
 8002cd4:	20400001 	.word	0x20400001

08002cd8 <_fflush_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	690b      	ldr	r3, [r1, #16]
 8002cdc:	4605      	mov	r5, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	b913      	cbnz	r3, 8002ce8 <_fflush_r+0x10>
 8002ce2:	2500      	movs	r5, #0
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	b118      	cbz	r0, 8002cf2 <_fflush_r+0x1a>
 8002cea:	6983      	ldr	r3, [r0, #24]
 8002cec:	b90b      	cbnz	r3, 8002cf2 <_fflush_r+0x1a>
 8002cee:	f000 f887 	bl	8002e00 <__sinit>
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <_fflush_r+0x6c>)
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	d11b      	bne.n	8002d30 <_fflush_r+0x58>
 8002cf8:	686c      	ldr	r4, [r5, #4]
 8002cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ef      	beq.n	8002ce2 <_fflush_r+0xa>
 8002d02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d04:	07d0      	lsls	r0, r2, #31
 8002d06:	d404      	bmi.n	8002d12 <_fflush_r+0x3a>
 8002d08:	0599      	lsls	r1, r3, #22
 8002d0a:	d402      	bmi.n	8002d12 <_fflush_r+0x3a>
 8002d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d0e:	f000 f915 	bl	8002f3c <__retarget_lock_acquire_recursive>
 8002d12:	4628      	mov	r0, r5
 8002d14:	4621      	mov	r1, r4
 8002d16:	f7ff ff59 	bl	8002bcc <__sflush_r>
 8002d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d1c:	07da      	lsls	r2, r3, #31
 8002d1e:	4605      	mov	r5, r0
 8002d20:	d4e0      	bmi.n	8002ce4 <_fflush_r+0xc>
 8002d22:	89a3      	ldrh	r3, [r4, #12]
 8002d24:	059b      	lsls	r3, r3, #22
 8002d26:	d4dd      	bmi.n	8002ce4 <_fflush_r+0xc>
 8002d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d2a:	f000 f908 	bl	8002f3e <__retarget_lock_release_recursive>
 8002d2e:	e7d9      	b.n	8002ce4 <_fflush_r+0xc>
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <_fflush_r+0x70>)
 8002d32:	429c      	cmp	r4, r3
 8002d34:	d101      	bne.n	8002d3a <_fflush_r+0x62>
 8002d36:	68ac      	ldr	r4, [r5, #8]
 8002d38:	e7df      	b.n	8002cfa <_fflush_r+0x22>
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <_fflush_r+0x74>)
 8002d3c:	429c      	cmp	r4, r3
 8002d3e:	bf08      	it	eq
 8002d40:	68ec      	ldreq	r4, [r5, #12]
 8002d42:	e7da      	b.n	8002cfa <_fflush_r+0x22>
 8002d44:	08003a74 	.word	0x08003a74
 8002d48:	08003a94 	.word	0x08003a94
 8002d4c:	08003a54 	.word	0x08003a54

08002d50 <std>:
 8002d50:	2300      	movs	r3, #0
 8002d52:	b510      	push	{r4, lr}
 8002d54:	4604      	mov	r4, r0
 8002d56:	e9c0 3300 	strd	r3, r3, [r0]
 8002d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d5e:	6083      	str	r3, [r0, #8]
 8002d60:	8181      	strh	r1, [r0, #12]
 8002d62:	6643      	str	r3, [r0, #100]	; 0x64
 8002d64:	81c2      	strh	r2, [r0, #14]
 8002d66:	6183      	str	r3, [r0, #24]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	305c      	adds	r0, #92	; 0x5c
 8002d6e:	f7ff fdd7 	bl	8002920 <memset>
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <std+0x38>)
 8002d74:	6263      	str	r3, [r4, #36]	; 0x24
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <std+0x3c>)
 8002d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <std+0x40>)
 8002d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <std+0x44>)
 8002d80:	6224      	str	r4, [r4, #32]
 8002d82:	6323      	str	r3, [r4, #48]	; 0x30
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	08003759 	.word	0x08003759
 8002d8c:	0800377b 	.word	0x0800377b
 8002d90:	080037b3 	.word	0x080037b3
 8002d94:	080037d7 	.word	0x080037d7

08002d98 <_cleanup_r>:
 8002d98:	4901      	ldr	r1, [pc, #4]	; (8002da0 <_cleanup_r+0x8>)
 8002d9a:	f000 b8af 	b.w	8002efc <_fwalk_reent>
 8002d9e:	bf00      	nop
 8002da0:	08002cd9 	.word	0x08002cd9

08002da4 <__sfmoreglue>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	1e4a      	subs	r2, r1, #1
 8002da8:	2568      	movs	r5, #104	; 0x68
 8002daa:	4355      	muls	r5, r2
 8002dac:	460e      	mov	r6, r1
 8002dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002db2:	f000 f979 	bl	80030a8 <_malloc_r>
 8002db6:	4604      	mov	r4, r0
 8002db8:	b140      	cbz	r0, 8002dcc <__sfmoreglue+0x28>
 8002dba:	2100      	movs	r1, #0
 8002dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8002dc0:	300c      	adds	r0, #12
 8002dc2:	60a0      	str	r0, [r4, #8]
 8002dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002dc8:	f7ff fdaa 	bl	8002920 <memset>
 8002dcc:	4620      	mov	r0, r4
 8002dce:	bd70      	pop	{r4, r5, r6, pc}

08002dd0 <__sfp_lock_acquire>:
 8002dd0:	4801      	ldr	r0, [pc, #4]	; (8002dd8 <__sfp_lock_acquire+0x8>)
 8002dd2:	f000 b8b3 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8002dd6:	bf00      	nop
 8002dd8:	200009c0 	.word	0x200009c0

08002ddc <__sfp_lock_release>:
 8002ddc:	4801      	ldr	r0, [pc, #4]	; (8002de4 <__sfp_lock_release+0x8>)
 8002dde:	f000 b8ae 	b.w	8002f3e <__retarget_lock_release_recursive>
 8002de2:	bf00      	nop
 8002de4:	200009c0 	.word	0x200009c0

08002de8 <__sinit_lock_acquire>:
 8002de8:	4801      	ldr	r0, [pc, #4]	; (8002df0 <__sinit_lock_acquire+0x8>)
 8002dea:	f000 b8a7 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8002dee:	bf00      	nop
 8002df0:	200009bb 	.word	0x200009bb

08002df4 <__sinit_lock_release>:
 8002df4:	4801      	ldr	r0, [pc, #4]	; (8002dfc <__sinit_lock_release+0x8>)
 8002df6:	f000 b8a2 	b.w	8002f3e <__retarget_lock_release_recursive>
 8002dfa:	bf00      	nop
 8002dfc:	200009bb 	.word	0x200009bb

08002e00 <__sinit>:
 8002e00:	b510      	push	{r4, lr}
 8002e02:	4604      	mov	r4, r0
 8002e04:	f7ff fff0 	bl	8002de8 <__sinit_lock_acquire>
 8002e08:	69a3      	ldr	r3, [r4, #24]
 8002e0a:	b11b      	cbz	r3, 8002e14 <__sinit+0x14>
 8002e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e10:	f7ff bff0 	b.w	8002df4 <__sinit_lock_release>
 8002e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e18:	6523      	str	r3, [r4, #80]	; 0x50
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <__sinit+0x68>)
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <__sinit+0x6c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e22:	42a3      	cmp	r3, r4
 8002e24:	bf04      	itt	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	61a3      	streq	r3, [r4, #24]
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f000 f820 	bl	8002e70 <__sfp>
 8002e30:	6060      	str	r0, [r4, #4]
 8002e32:	4620      	mov	r0, r4
 8002e34:	f000 f81c 	bl	8002e70 <__sfp>
 8002e38:	60a0      	str	r0, [r4, #8]
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 f818 	bl	8002e70 <__sfp>
 8002e40:	2200      	movs	r2, #0
 8002e42:	60e0      	str	r0, [r4, #12]
 8002e44:	2104      	movs	r1, #4
 8002e46:	6860      	ldr	r0, [r4, #4]
 8002e48:	f7ff ff82 	bl	8002d50 <std>
 8002e4c:	68a0      	ldr	r0, [r4, #8]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2109      	movs	r1, #9
 8002e52:	f7ff ff7d 	bl	8002d50 <std>
 8002e56:	68e0      	ldr	r0, [r4, #12]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	2112      	movs	r1, #18
 8002e5c:	f7ff ff78 	bl	8002d50 <std>
 8002e60:	2301      	movs	r3, #1
 8002e62:	61a3      	str	r3, [r4, #24]
 8002e64:	e7d2      	b.n	8002e0c <__sinit+0xc>
 8002e66:	bf00      	nop
 8002e68:	08003a50 	.word	0x08003a50
 8002e6c:	08002d99 	.word	0x08002d99

08002e70 <__sfp>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	4607      	mov	r7, r0
 8002e74:	f7ff ffac 	bl	8002dd0 <__sfp_lock_acquire>
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <__sfp+0x84>)
 8002e7a:	681e      	ldr	r6, [r3, #0]
 8002e7c:	69b3      	ldr	r3, [r6, #24]
 8002e7e:	b913      	cbnz	r3, 8002e86 <__sfp+0x16>
 8002e80:	4630      	mov	r0, r6
 8002e82:	f7ff ffbd 	bl	8002e00 <__sinit>
 8002e86:	3648      	adds	r6, #72	; 0x48
 8002e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	d503      	bpl.n	8002e98 <__sfp+0x28>
 8002e90:	6833      	ldr	r3, [r6, #0]
 8002e92:	b30b      	cbz	r3, 8002ed8 <__sfp+0x68>
 8002e94:	6836      	ldr	r6, [r6, #0]
 8002e96:	e7f7      	b.n	8002e88 <__sfp+0x18>
 8002e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e9c:	b9d5      	cbnz	r5, 8002ed4 <__sfp+0x64>
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <__sfp+0x88>)
 8002ea0:	60e3      	str	r3, [r4, #12]
 8002ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8002ea8:	f000 f847 	bl	8002f3a <__retarget_lock_init_recursive>
 8002eac:	f7ff ff96 	bl	8002ddc <__sfp_lock_release>
 8002eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002eb8:	6025      	str	r5, [r4, #0]
 8002eba:	61a5      	str	r5, [r4, #24]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ec4:	f7ff fd2c 	bl	8002920 <memset>
 8002ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed4:	3468      	adds	r4, #104	; 0x68
 8002ed6:	e7d9      	b.n	8002e8c <__sfp+0x1c>
 8002ed8:	2104      	movs	r1, #4
 8002eda:	4638      	mov	r0, r7
 8002edc:	f7ff ff62 	bl	8002da4 <__sfmoreglue>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	6030      	str	r0, [r6, #0]
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d1d5      	bne.n	8002e94 <__sfp+0x24>
 8002ee8:	f7ff ff78 	bl	8002ddc <__sfp_lock_release>
 8002eec:	230c      	movs	r3, #12
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	e7ee      	b.n	8002ed0 <__sfp+0x60>
 8002ef2:	bf00      	nop
 8002ef4:	08003a50 	.word	0x08003a50
 8002ef8:	ffff0001 	.word	0xffff0001

08002efc <_fwalk_reent>:
 8002efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f00:	4606      	mov	r6, r0
 8002f02:	4688      	mov	r8, r1
 8002f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f08:	2700      	movs	r7, #0
 8002f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8002f12:	d505      	bpl.n	8002f20 <_fwalk_reent+0x24>
 8002f14:	6824      	ldr	r4, [r4, #0]
 8002f16:	2c00      	cmp	r4, #0
 8002f18:	d1f7      	bne.n	8002f0a <_fwalk_reent+0xe>
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f20:	89ab      	ldrh	r3, [r5, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d907      	bls.n	8002f36 <_fwalk_reent+0x3a>
 8002f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	d003      	beq.n	8002f36 <_fwalk_reent+0x3a>
 8002f2e:	4629      	mov	r1, r5
 8002f30:	4630      	mov	r0, r6
 8002f32:	47c0      	blx	r8
 8002f34:	4307      	orrs	r7, r0
 8002f36:	3568      	adds	r5, #104	; 0x68
 8002f38:	e7e9      	b.n	8002f0e <_fwalk_reent+0x12>

08002f3a <__retarget_lock_init_recursive>:
 8002f3a:	4770      	bx	lr

08002f3c <__retarget_lock_acquire_recursive>:
 8002f3c:	4770      	bx	lr

08002f3e <__retarget_lock_release_recursive>:
 8002f3e:	4770      	bx	lr

08002f40 <__swhatbuf_r>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	460e      	mov	r6, r1
 8002f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	b096      	sub	sp, #88	; 0x58
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	da07      	bge.n	8002f62 <__swhatbuf_r+0x22>
 8002f52:	2300      	movs	r3, #0
 8002f54:	602b      	str	r3, [r5, #0]
 8002f56:	89b3      	ldrh	r3, [r6, #12]
 8002f58:	061a      	lsls	r2, r3, #24
 8002f5a:	d410      	bmi.n	8002f7e <__swhatbuf_r+0x3e>
 8002f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f60:	e00e      	b.n	8002f80 <__swhatbuf_r+0x40>
 8002f62:	466a      	mov	r2, sp
 8002f64:	f000 fc5e 	bl	8003824 <_fstat_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	dbf2      	blt.n	8002f52 <__swhatbuf_r+0x12>
 8002f6c:	9a01      	ldr	r2, [sp, #4]
 8002f6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f76:	425a      	negs	r2, r3
 8002f78:	415a      	adcs	r2, r3
 8002f7a:	602a      	str	r2, [r5, #0]
 8002f7c:	e7ee      	b.n	8002f5c <__swhatbuf_r+0x1c>
 8002f7e:	2340      	movs	r3, #64	; 0x40
 8002f80:	2000      	movs	r0, #0
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	b016      	add	sp, #88	; 0x58
 8002f86:	bd70      	pop	{r4, r5, r6, pc}

08002f88 <__smakebuf_r>:
 8002f88:	898b      	ldrh	r3, [r1, #12]
 8002f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f8c:	079d      	lsls	r5, r3, #30
 8002f8e:	4606      	mov	r6, r0
 8002f90:	460c      	mov	r4, r1
 8002f92:	d507      	bpl.n	8002fa4 <__smakebuf_r+0x1c>
 8002f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	6123      	str	r3, [r4, #16]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	6163      	str	r3, [r4, #20]
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	ab01      	add	r3, sp, #4
 8002fa6:	466a      	mov	r2, sp
 8002fa8:	f7ff ffca 	bl	8002f40 <__swhatbuf_r>
 8002fac:	9900      	ldr	r1, [sp, #0]
 8002fae:	4605      	mov	r5, r0
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f000 f879 	bl	80030a8 <_malloc_r>
 8002fb6:	b948      	cbnz	r0, 8002fcc <__smakebuf_r+0x44>
 8002fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fbc:	059a      	lsls	r2, r3, #22
 8002fbe:	d4ef      	bmi.n	8002fa0 <__smakebuf_r+0x18>
 8002fc0:	f023 0303 	bic.w	r3, r3, #3
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	81a3      	strh	r3, [r4, #12]
 8002fca:	e7e3      	b.n	8002f94 <__smakebuf_r+0xc>
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <__smakebuf_r+0x7c>)
 8002fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	6020      	str	r0, [r4, #0]
 8002fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd8:	81a3      	strh	r3, [r4, #12]
 8002fda:	9b00      	ldr	r3, [sp, #0]
 8002fdc:	6163      	str	r3, [r4, #20]
 8002fde:	9b01      	ldr	r3, [sp, #4]
 8002fe0:	6120      	str	r0, [r4, #16]
 8002fe2:	b15b      	cbz	r3, 8002ffc <__smakebuf_r+0x74>
 8002fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f000 fc2d 	bl	8003848 <_isatty_r>
 8002fee:	b128      	cbz	r0, 8002ffc <__smakebuf_r+0x74>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	81a3      	strh	r3, [r4, #12]
 8002ffc:	89a0      	ldrh	r0, [r4, #12]
 8002ffe:	4305      	orrs	r5, r0
 8003000:	81a5      	strh	r5, [r4, #12]
 8003002:	e7cd      	b.n	8002fa0 <__smakebuf_r+0x18>
 8003004:	08002d99 	.word	0x08002d99

08003008 <_free_r>:
 8003008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800300a:	2900      	cmp	r1, #0
 800300c:	d048      	beq.n	80030a0 <_free_r+0x98>
 800300e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003012:	9001      	str	r0, [sp, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f1a1 0404 	sub.w	r4, r1, #4
 800301a:	bfb8      	it	lt
 800301c:	18e4      	addlt	r4, r4, r3
 800301e:	f000 fc35 	bl	800388c <__malloc_lock>
 8003022:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <_free_r+0x9c>)
 8003024:	9801      	ldr	r0, [sp, #4]
 8003026:	6813      	ldr	r3, [r2, #0]
 8003028:	4615      	mov	r5, r2
 800302a:	b933      	cbnz	r3, 800303a <_free_r+0x32>
 800302c:	6063      	str	r3, [r4, #4]
 800302e:	6014      	str	r4, [r2, #0]
 8003030:	b003      	add	sp, #12
 8003032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003036:	f000 bc2f 	b.w	8003898 <__malloc_unlock>
 800303a:	42a3      	cmp	r3, r4
 800303c:	d90b      	bls.n	8003056 <_free_r+0x4e>
 800303e:	6821      	ldr	r1, [r4, #0]
 8003040:	1862      	adds	r2, r4, r1
 8003042:	4293      	cmp	r3, r2
 8003044:	bf04      	itt	eq
 8003046:	681a      	ldreq	r2, [r3, #0]
 8003048:	685b      	ldreq	r3, [r3, #4]
 800304a:	6063      	str	r3, [r4, #4]
 800304c:	bf04      	itt	eq
 800304e:	1852      	addeq	r2, r2, r1
 8003050:	6022      	streq	r2, [r4, #0]
 8003052:	602c      	str	r4, [r5, #0]
 8003054:	e7ec      	b.n	8003030 <_free_r+0x28>
 8003056:	461a      	mov	r2, r3
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	b10b      	cbz	r3, 8003060 <_free_r+0x58>
 800305c:	42a3      	cmp	r3, r4
 800305e:	d9fa      	bls.n	8003056 <_free_r+0x4e>
 8003060:	6811      	ldr	r1, [r2, #0]
 8003062:	1855      	adds	r5, r2, r1
 8003064:	42a5      	cmp	r5, r4
 8003066:	d10b      	bne.n	8003080 <_free_r+0x78>
 8003068:	6824      	ldr	r4, [r4, #0]
 800306a:	4421      	add	r1, r4
 800306c:	1854      	adds	r4, r2, r1
 800306e:	42a3      	cmp	r3, r4
 8003070:	6011      	str	r1, [r2, #0]
 8003072:	d1dd      	bne.n	8003030 <_free_r+0x28>
 8003074:	681c      	ldr	r4, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	6053      	str	r3, [r2, #4]
 800307a:	4421      	add	r1, r4
 800307c:	6011      	str	r1, [r2, #0]
 800307e:	e7d7      	b.n	8003030 <_free_r+0x28>
 8003080:	d902      	bls.n	8003088 <_free_r+0x80>
 8003082:	230c      	movs	r3, #12
 8003084:	6003      	str	r3, [r0, #0]
 8003086:	e7d3      	b.n	8003030 <_free_r+0x28>
 8003088:	6825      	ldr	r5, [r4, #0]
 800308a:	1961      	adds	r1, r4, r5
 800308c:	428b      	cmp	r3, r1
 800308e:	bf04      	itt	eq
 8003090:	6819      	ldreq	r1, [r3, #0]
 8003092:	685b      	ldreq	r3, [r3, #4]
 8003094:	6063      	str	r3, [r4, #4]
 8003096:	bf04      	itt	eq
 8003098:	1949      	addeq	r1, r1, r5
 800309a:	6021      	streq	r1, [r4, #0]
 800309c:	6054      	str	r4, [r2, #4]
 800309e:	e7c7      	b.n	8003030 <_free_r+0x28>
 80030a0:	b003      	add	sp, #12
 80030a2:	bd30      	pop	{r4, r5, pc}
 80030a4:	20000118 	.word	0x20000118

080030a8 <_malloc_r>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	1ccd      	adds	r5, r1, #3
 80030ac:	f025 0503 	bic.w	r5, r5, #3
 80030b0:	3508      	adds	r5, #8
 80030b2:	2d0c      	cmp	r5, #12
 80030b4:	bf38      	it	cc
 80030b6:	250c      	movcc	r5, #12
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	4606      	mov	r6, r0
 80030bc:	db01      	blt.n	80030c2 <_malloc_r+0x1a>
 80030be:	42a9      	cmp	r1, r5
 80030c0:	d903      	bls.n	80030ca <_malloc_r+0x22>
 80030c2:	230c      	movs	r3, #12
 80030c4:	6033      	str	r3, [r6, #0]
 80030c6:	2000      	movs	r0, #0
 80030c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ca:	f000 fbdf 	bl	800388c <__malloc_lock>
 80030ce:	4921      	ldr	r1, [pc, #132]	; (8003154 <_malloc_r+0xac>)
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	4614      	mov	r4, r2
 80030d4:	b99c      	cbnz	r4, 80030fe <_malloc_r+0x56>
 80030d6:	4f20      	ldr	r7, [pc, #128]	; (8003158 <_malloc_r+0xb0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b923      	cbnz	r3, 80030e6 <_malloc_r+0x3e>
 80030dc:	4621      	mov	r1, r4
 80030de:	4630      	mov	r0, r6
 80030e0:	f000 fb2a 	bl	8003738 <_sbrk_r>
 80030e4:	6038      	str	r0, [r7, #0]
 80030e6:	4629      	mov	r1, r5
 80030e8:	4630      	mov	r0, r6
 80030ea:	f000 fb25 	bl	8003738 <_sbrk_r>
 80030ee:	1c43      	adds	r3, r0, #1
 80030f0:	d123      	bne.n	800313a <_malloc_r+0x92>
 80030f2:	230c      	movs	r3, #12
 80030f4:	6033      	str	r3, [r6, #0]
 80030f6:	4630      	mov	r0, r6
 80030f8:	f000 fbce 	bl	8003898 <__malloc_unlock>
 80030fc:	e7e3      	b.n	80030c6 <_malloc_r+0x1e>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	1b5b      	subs	r3, r3, r5
 8003102:	d417      	bmi.n	8003134 <_malloc_r+0x8c>
 8003104:	2b0b      	cmp	r3, #11
 8003106:	d903      	bls.n	8003110 <_malloc_r+0x68>
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	441c      	add	r4, r3
 800310c:	6025      	str	r5, [r4, #0]
 800310e:	e004      	b.n	800311a <_malloc_r+0x72>
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	42a2      	cmp	r2, r4
 8003114:	bf0c      	ite	eq
 8003116:	600b      	streq	r3, [r1, #0]
 8003118:	6053      	strne	r3, [r2, #4]
 800311a:	4630      	mov	r0, r6
 800311c:	f000 fbbc 	bl	8003898 <__malloc_unlock>
 8003120:	f104 000b 	add.w	r0, r4, #11
 8003124:	1d23      	adds	r3, r4, #4
 8003126:	f020 0007 	bic.w	r0, r0, #7
 800312a:	1ac2      	subs	r2, r0, r3
 800312c:	d0cc      	beq.n	80030c8 <_malloc_r+0x20>
 800312e:	1a1b      	subs	r3, r3, r0
 8003130:	50a3      	str	r3, [r4, r2]
 8003132:	e7c9      	b.n	80030c8 <_malloc_r+0x20>
 8003134:	4622      	mov	r2, r4
 8003136:	6864      	ldr	r4, [r4, #4]
 8003138:	e7cc      	b.n	80030d4 <_malloc_r+0x2c>
 800313a:	1cc4      	adds	r4, r0, #3
 800313c:	f024 0403 	bic.w	r4, r4, #3
 8003140:	42a0      	cmp	r0, r4
 8003142:	d0e3      	beq.n	800310c <_malloc_r+0x64>
 8003144:	1a21      	subs	r1, r4, r0
 8003146:	4630      	mov	r0, r6
 8003148:	f000 faf6 	bl	8003738 <_sbrk_r>
 800314c:	3001      	adds	r0, #1
 800314e:	d1dd      	bne.n	800310c <_malloc_r+0x64>
 8003150:	e7cf      	b.n	80030f2 <_malloc_r+0x4a>
 8003152:	bf00      	nop
 8003154:	20000118 	.word	0x20000118
 8003158:	2000011c 	.word	0x2000011c

0800315c <__sfputc_r>:
 800315c:	6893      	ldr	r3, [r2, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	b410      	push	{r4}
 8003164:	6093      	str	r3, [r2, #8]
 8003166:	da08      	bge.n	800317a <__sfputc_r+0x1e>
 8003168:	6994      	ldr	r4, [r2, #24]
 800316a:	42a3      	cmp	r3, r4
 800316c:	db01      	blt.n	8003172 <__sfputc_r+0x16>
 800316e:	290a      	cmp	r1, #10
 8003170:	d103      	bne.n	800317a <__sfputc_r+0x1e>
 8003172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003176:	f7ff bc69 	b.w	8002a4c <__swbuf_r>
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	1c58      	adds	r0, r3, #1
 800317e:	6010      	str	r0, [r2, #0]
 8003180:	7019      	strb	r1, [r3, #0]
 8003182:	4608      	mov	r0, r1
 8003184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003188:	4770      	bx	lr

0800318a <__sfputs_r>:
 800318a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318c:	4606      	mov	r6, r0
 800318e:	460f      	mov	r7, r1
 8003190:	4614      	mov	r4, r2
 8003192:	18d5      	adds	r5, r2, r3
 8003194:	42ac      	cmp	r4, r5
 8003196:	d101      	bne.n	800319c <__sfputs_r+0x12>
 8003198:	2000      	movs	r0, #0
 800319a:	e007      	b.n	80031ac <__sfputs_r+0x22>
 800319c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a0:	463a      	mov	r2, r7
 80031a2:	4630      	mov	r0, r6
 80031a4:	f7ff ffda 	bl	800315c <__sfputc_r>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d1f3      	bne.n	8003194 <__sfputs_r+0xa>
 80031ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031b0 <_vfiprintf_r>:
 80031b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b4:	460d      	mov	r5, r1
 80031b6:	b09d      	sub	sp, #116	; 0x74
 80031b8:	4614      	mov	r4, r2
 80031ba:	4698      	mov	r8, r3
 80031bc:	4606      	mov	r6, r0
 80031be:	b118      	cbz	r0, 80031c8 <_vfiprintf_r+0x18>
 80031c0:	6983      	ldr	r3, [r0, #24]
 80031c2:	b90b      	cbnz	r3, 80031c8 <_vfiprintf_r+0x18>
 80031c4:	f7ff fe1c 	bl	8002e00 <__sinit>
 80031c8:	4b89      	ldr	r3, [pc, #548]	; (80033f0 <_vfiprintf_r+0x240>)
 80031ca:	429d      	cmp	r5, r3
 80031cc:	d11b      	bne.n	8003206 <_vfiprintf_r+0x56>
 80031ce:	6875      	ldr	r5, [r6, #4]
 80031d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031d2:	07d9      	lsls	r1, r3, #31
 80031d4:	d405      	bmi.n	80031e2 <_vfiprintf_r+0x32>
 80031d6:	89ab      	ldrh	r3, [r5, #12]
 80031d8:	059a      	lsls	r2, r3, #22
 80031da:	d402      	bmi.n	80031e2 <_vfiprintf_r+0x32>
 80031dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031de:	f7ff fead 	bl	8002f3c <__retarget_lock_acquire_recursive>
 80031e2:	89ab      	ldrh	r3, [r5, #12]
 80031e4:	071b      	lsls	r3, r3, #28
 80031e6:	d501      	bpl.n	80031ec <_vfiprintf_r+0x3c>
 80031e8:	692b      	ldr	r3, [r5, #16]
 80031ea:	b9eb      	cbnz	r3, 8003228 <_vfiprintf_r+0x78>
 80031ec:	4629      	mov	r1, r5
 80031ee:	4630      	mov	r0, r6
 80031f0:	f7ff fc7e 	bl	8002af0 <__swsetup_r>
 80031f4:	b1c0      	cbz	r0, 8003228 <_vfiprintf_r+0x78>
 80031f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031f8:	07dc      	lsls	r4, r3, #31
 80031fa:	d50e      	bpl.n	800321a <_vfiprintf_r+0x6a>
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	b01d      	add	sp, #116	; 0x74
 8003202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003206:	4b7b      	ldr	r3, [pc, #492]	; (80033f4 <_vfiprintf_r+0x244>)
 8003208:	429d      	cmp	r5, r3
 800320a:	d101      	bne.n	8003210 <_vfiprintf_r+0x60>
 800320c:	68b5      	ldr	r5, [r6, #8]
 800320e:	e7df      	b.n	80031d0 <_vfiprintf_r+0x20>
 8003210:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <_vfiprintf_r+0x248>)
 8003212:	429d      	cmp	r5, r3
 8003214:	bf08      	it	eq
 8003216:	68f5      	ldreq	r5, [r6, #12]
 8003218:	e7da      	b.n	80031d0 <_vfiprintf_r+0x20>
 800321a:	89ab      	ldrh	r3, [r5, #12]
 800321c:	0598      	lsls	r0, r3, #22
 800321e:	d4ed      	bmi.n	80031fc <_vfiprintf_r+0x4c>
 8003220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003222:	f7ff fe8c 	bl	8002f3e <__retarget_lock_release_recursive>
 8003226:	e7e9      	b.n	80031fc <_vfiprintf_r+0x4c>
 8003228:	2300      	movs	r3, #0
 800322a:	9309      	str	r3, [sp, #36]	; 0x24
 800322c:	2320      	movs	r3, #32
 800322e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003232:	f8cd 800c 	str.w	r8, [sp, #12]
 8003236:	2330      	movs	r3, #48	; 0x30
 8003238:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80033fc <_vfiprintf_r+0x24c>
 800323c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003240:	f04f 0901 	mov.w	r9, #1
 8003244:	4623      	mov	r3, r4
 8003246:	469a      	mov	sl, r3
 8003248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800324c:	b10a      	cbz	r2, 8003252 <_vfiprintf_r+0xa2>
 800324e:	2a25      	cmp	r2, #37	; 0x25
 8003250:	d1f9      	bne.n	8003246 <_vfiprintf_r+0x96>
 8003252:	ebba 0b04 	subs.w	fp, sl, r4
 8003256:	d00b      	beq.n	8003270 <_vfiprintf_r+0xc0>
 8003258:	465b      	mov	r3, fp
 800325a:	4622      	mov	r2, r4
 800325c:	4629      	mov	r1, r5
 800325e:	4630      	mov	r0, r6
 8003260:	f7ff ff93 	bl	800318a <__sfputs_r>
 8003264:	3001      	adds	r0, #1
 8003266:	f000 80aa 	beq.w	80033be <_vfiprintf_r+0x20e>
 800326a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800326c:	445a      	add	r2, fp
 800326e:	9209      	str	r2, [sp, #36]	; 0x24
 8003270:	f89a 3000 	ldrb.w	r3, [sl]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a2 	beq.w	80033be <_vfiprintf_r+0x20e>
 800327a:	2300      	movs	r3, #0
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003284:	f10a 0a01 	add.w	sl, sl, #1
 8003288:	9304      	str	r3, [sp, #16]
 800328a:	9307      	str	r3, [sp, #28]
 800328c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003290:	931a      	str	r3, [sp, #104]	; 0x68
 8003292:	4654      	mov	r4, sl
 8003294:	2205      	movs	r2, #5
 8003296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800329a:	4858      	ldr	r0, [pc, #352]	; (80033fc <_vfiprintf_r+0x24c>)
 800329c:	f7fc ff98 	bl	80001d0 <memchr>
 80032a0:	9a04      	ldr	r2, [sp, #16]
 80032a2:	b9d8      	cbnz	r0, 80032dc <_vfiprintf_r+0x12c>
 80032a4:	06d1      	lsls	r1, r2, #27
 80032a6:	bf44      	itt	mi
 80032a8:	2320      	movmi	r3, #32
 80032aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ae:	0713      	lsls	r3, r2, #28
 80032b0:	bf44      	itt	mi
 80032b2:	232b      	movmi	r3, #43	; 0x2b
 80032b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032b8:	f89a 3000 	ldrb.w	r3, [sl]
 80032bc:	2b2a      	cmp	r3, #42	; 0x2a
 80032be:	d015      	beq.n	80032ec <_vfiprintf_r+0x13c>
 80032c0:	9a07      	ldr	r2, [sp, #28]
 80032c2:	4654      	mov	r4, sl
 80032c4:	2000      	movs	r0, #0
 80032c6:	f04f 0c0a 	mov.w	ip, #10
 80032ca:	4621      	mov	r1, r4
 80032cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032d0:	3b30      	subs	r3, #48	; 0x30
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d94e      	bls.n	8003374 <_vfiprintf_r+0x1c4>
 80032d6:	b1b0      	cbz	r0, 8003306 <_vfiprintf_r+0x156>
 80032d8:	9207      	str	r2, [sp, #28]
 80032da:	e014      	b.n	8003306 <_vfiprintf_r+0x156>
 80032dc:	eba0 0308 	sub.w	r3, r0, r8
 80032e0:	fa09 f303 	lsl.w	r3, r9, r3
 80032e4:	4313      	orrs	r3, r2
 80032e6:	9304      	str	r3, [sp, #16]
 80032e8:	46a2      	mov	sl, r4
 80032ea:	e7d2      	b.n	8003292 <_vfiprintf_r+0xe2>
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	1d19      	adds	r1, r3, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	9103      	str	r1, [sp, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bfbb      	ittet	lt
 80032f8:	425b      	neglt	r3, r3
 80032fa:	f042 0202 	orrlt.w	r2, r2, #2
 80032fe:	9307      	strge	r3, [sp, #28]
 8003300:	9307      	strlt	r3, [sp, #28]
 8003302:	bfb8      	it	lt
 8003304:	9204      	strlt	r2, [sp, #16]
 8003306:	7823      	ldrb	r3, [r4, #0]
 8003308:	2b2e      	cmp	r3, #46	; 0x2e
 800330a:	d10c      	bne.n	8003326 <_vfiprintf_r+0x176>
 800330c:	7863      	ldrb	r3, [r4, #1]
 800330e:	2b2a      	cmp	r3, #42	; 0x2a
 8003310:	d135      	bne.n	800337e <_vfiprintf_r+0x1ce>
 8003312:	9b03      	ldr	r3, [sp, #12]
 8003314:	1d1a      	adds	r2, r3, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	9203      	str	r2, [sp, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	bfb8      	it	lt
 800331e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003322:	3402      	adds	r4, #2
 8003324:	9305      	str	r3, [sp, #20]
 8003326:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800340c <_vfiprintf_r+0x25c>
 800332a:	7821      	ldrb	r1, [r4, #0]
 800332c:	2203      	movs	r2, #3
 800332e:	4650      	mov	r0, sl
 8003330:	f7fc ff4e 	bl	80001d0 <memchr>
 8003334:	b140      	cbz	r0, 8003348 <_vfiprintf_r+0x198>
 8003336:	2340      	movs	r3, #64	; 0x40
 8003338:	eba0 000a 	sub.w	r0, r0, sl
 800333c:	fa03 f000 	lsl.w	r0, r3, r0
 8003340:	9b04      	ldr	r3, [sp, #16]
 8003342:	4303      	orrs	r3, r0
 8003344:	3401      	adds	r4, #1
 8003346:	9304      	str	r3, [sp, #16]
 8003348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800334c:	482c      	ldr	r0, [pc, #176]	; (8003400 <_vfiprintf_r+0x250>)
 800334e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003352:	2206      	movs	r2, #6
 8003354:	f7fc ff3c 	bl	80001d0 <memchr>
 8003358:	2800      	cmp	r0, #0
 800335a:	d03f      	beq.n	80033dc <_vfiprintf_r+0x22c>
 800335c:	4b29      	ldr	r3, [pc, #164]	; (8003404 <_vfiprintf_r+0x254>)
 800335e:	bb1b      	cbnz	r3, 80033a8 <_vfiprintf_r+0x1f8>
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	3307      	adds	r3, #7
 8003364:	f023 0307 	bic.w	r3, r3, #7
 8003368:	3308      	adds	r3, #8
 800336a:	9303      	str	r3, [sp, #12]
 800336c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800336e:	443b      	add	r3, r7
 8003370:	9309      	str	r3, [sp, #36]	; 0x24
 8003372:	e767      	b.n	8003244 <_vfiprintf_r+0x94>
 8003374:	fb0c 3202 	mla	r2, ip, r2, r3
 8003378:	460c      	mov	r4, r1
 800337a:	2001      	movs	r0, #1
 800337c:	e7a5      	b.n	80032ca <_vfiprintf_r+0x11a>
 800337e:	2300      	movs	r3, #0
 8003380:	3401      	adds	r4, #1
 8003382:	9305      	str	r3, [sp, #20]
 8003384:	4619      	mov	r1, r3
 8003386:	f04f 0c0a 	mov.w	ip, #10
 800338a:	4620      	mov	r0, r4
 800338c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003390:	3a30      	subs	r2, #48	; 0x30
 8003392:	2a09      	cmp	r2, #9
 8003394:	d903      	bls.n	800339e <_vfiprintf_r+0x1ee>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0c5      	beq.n	8003326 <_vfiprintf_r+0x176>
 800339a:	9105      	str	r1, [sp, #20]
 800339c:	e7c3      	b.n	8003326 <_vfiprintf_r+0x176>
 800339e:	fb0c 2101 	mla	r1, ip, r1, r2
 80033a2:	4604      	mov	r4, r0
 80033a4:	2301      	movs	r3, #1
 80033a6:	e7f0      	b.n	800338a <_vfiprintf_r+0x1da>
 80033a8:	ab03      	add	r3, sp, #12
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	462a      	mov	r2, r5
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <_vfiprintf_r+0x258>)
 80033b0:	a904      	add	r1, sp, #16
 80033b2:	4630      	mov	r0, r6
 80033b4:	f3af 8000 	nop.w
 80033b8:	4607      	mov	r7, r0
 80033ba:	1c78      	adds	r0, r7, #1
 80033bc:	d1d6      	bne.n	800336c <_vfiprintf_r+0x1bc>
 80033be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033c0:	07d9      	lsls	r1, r3, #31
 80033c2:	d405      	bmi.n	80033d0 <_vfiprintf_r+0x220>
 80033c4:	89ab      	ldrh	r3, [r5, #12]
 80033c6:	059a      	lsls	r2, r3, #22
 80033c8:	d402      	bmi.n	80033d0 <_vfiprintf_r+0x220>
 80033ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033cc:	f7ff fdb7 	bl	8002f3e <__retarget_lock_release_recursive>
 80033d0:	89ab      	ldrh	r3, [r5, #12]
 80033d2:	065b      	lsls	r3, r3, #25
 80033d4:	f53f af12 	bmi.w	80031fc <_vfiprintf_r+0x4c>
 80033d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033da:	e711      	b.n	8003200 <_vfiprintf_r+0x50>
 80033dc:	ab03      	add	r3, sp, #12
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	462a      	mov	r2, r5
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <_vfiprintf_r+0x258>)
 80033e4:	a904      	add	r1, sp, #16
 80033e6:	4630      	mov	r0, r6
 80033e8:	f000 f880 	bl	80034ec <_printf_i>
 80033ec:	e7e4      	b.n	80033b8 <_vfiprintf_r+0x208>
 80033ee:	bf00      	nop
 80033f0:	08003a74 	.word	0x08003a74
 80033f4:	08003a94 	.word	0x08003a94
 80033f8:	08003a54 	.word	0x08003a54
 80033fc:	08003ab4 	.word	0x08003ab4
 8003400:	08003abe 	.word	0x08003abe
 8003404:	00000000 	.word	0x00000000
 8003408:	0800318b 	.word	0x0800318b
 800340c:	08003aba 	.word	0x08003aba

08003410 <_printf_common>:
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	4616      	mov	r6, r2
 8003416:	4699      	mov	r9, r3
 8003418:	688a      	ldr	r2, [r1, #8]
 800341a:	690b      	ldr	r3, [r1, #16]
 800341c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003420:	4293      	cmp	r3, r2
 8003422:	bfb8      	it	lt
 8003424:	4613      	movlt	r3, r2
 8003426:	6033      	str	r3, [r6, #0]
 8003428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800342c:	4607      	mov	r7, r0
 800342e:	460c      	mov	r4, r1
 8003430:	b10a      	cbz	r2, 8003436 <_printf_common+0x26>
 8003432:	3301      	adds	r3, #1
 8003434:	6033      	str	r3, [r6, #0]
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	0699      	lsls	r1, r3, #26
 800343a:	bf42      	ittt	mi
 800343c:	6833      	ldrmi	r3, [r6, #0]
 800343e:	3302      	addmi	r3, #2
 8003440:	6033      	strmi	r3, [r6, #0]
 8003442:	6825      	ldr	r5, [r4, #0]
 8003444:	f015 0506 	ands.w	r5, r5, #6
 8003448:	d106      	bne.n	8003458 <_printf_common+0x48>
 800344a:	f104 0a19 	add.w	sl, r4, #25
 800344e:	68e3      	ldr	r3, [r4, #12]
 8003450:	6832      	ldr	r2, [r6, #0]
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	42ab      	cmp	r3, r5
 8003456:	dc26      	bgt.n	80034a6 <_printf_common+0x96>
 8003458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800345c:	1e13      	subs	r3, r2, #0
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	bf18      	it	ne
 8003462:	2301      	movne	r3, #1
 8003464:	0692      	lsls	r2, r2, #26
 8003466:	d42b      	bmi.n	80034c0 <_printf_common+0xb0>
 8003468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800346c:	4649      	mov	r1, r9
 800346e:	4638      	mov	r0, r7
 8003470:	47c0      	blx	r8
 8003472:	3001      	adds	r0, #1
 8003474:	d01e      	beq.n	80034b4 <_printf_common+0xa4>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	68e5      	ldr	r5, [r4, #12]
 800347a:	6832      	ldr	r2, [r6, #0]
 800347c:	f003 0306 	and.w	r3, r3, #6
 8003480:	2b04      	cmp	r3, #4
 8003482:	bf08      	it	eq
 8003484:	1aad      	subeq	r5, r5, r2
 8003486:	68a3      	ldr	r3, [r4, #8]
 8003488:	6922      	ldr	r2, [r4, #16]
 800348a:	bf0c      	ite	eq
 800348c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003490:	2500      	movne	r5, #0
 8003492:	4293      	cmp	r3, r2
 8003494:	bfc4      	itt	gt
 8003496:	1a9b      	subgt	r3, r3, r2
 8003498:	18ed      	addgt	r5, r5, r3
 800349a:	2600      	movs	r6, #0
 800349c:	341a      	adds	r4, #26
 800349e:	42b5      	cmp	r5, r6
 80034a0:	d11a      	bne.n	80034d8 <_printf_common+0xc8>
 80034a2:	2000      	movs	r0, #0
 80034a4:	e008      	b.n	80034b8 <_printf_common+0xa8>
 80034a6:	2301      	movs	r3, #1
 80034a8:	4652      	mov	r2, sl
 80034aa:	4649      	mov	r1, r9
 80034ac:	4638      	mov	r0, r7
 80034ae:	47c0      	blx	r8
 80034b0:	3001      	adds	r0, #1
 80034b2:	d103      	bne.n	80034bc <_printf_common+0xac>
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034bc:	3501      	adds	r5, #1
 80034be:	e7c6      	b.n	800344e <_printf_common+0x3e>
 80034c0:	18e1      	adds	r1, r4, r3
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	2030      	movs	r0, #48	; 0x30
 80034c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034ca:	4422      	add	r2, r4
 80034cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034d4:	3302      	adds	r3, #2
 80034d6:	e7c7      	b.n	8003468 <_printf_common+0x58>
 80034d8:	2301      	movs	r3, #1
 80034da:	4622      	mov	r2, r4
 80034dc:	4649      	mov	r1, r9
 80034de:	4638      	mov	r0, r7
 80034e0:	47c0      	blx	r8
 80034e2:	3001      	adds	r0, #1
 80034e4:	d0e6      	beq.n	80034b4 <_printf_common+0xa4>
 80034e6:	3601      	adds	r6, #1
 80034e8:	e7d9      	b.n	800349e <_printf_common+0x8e>
	...

080034ec <_printf_i>:
 80034ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034f0:	460c      	mov	r4, r1
 80034f2:	4691      	mov	r9, r2
 80034f4:	7e27      	ldrb	r7, [r4, #24]
 80034f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034f8:	2f78      	cmp	r7, #120	; 0x78
 80034fa:	4680      	mov	r8, r0
 80034fc:	469a      	mov	sl, r3
 80034fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003502:	d807      	bhi.n	8003514 <_printf_i+0x28>
 8003504:	2f62      	cmp	r7, #98	; 0x62
 8003506:	d80a      	bhi.n	800351e <_printf_i+0x32>
 8003508:	2f00      	cmp	r7, #0
 800350a:	f000 80d8 	beq.w	80036be <_printf_i+0x1d2>
 800350e:	2f58      	cmp	r7, #88	; 0x58
 8003510:	f000 80a3 	beq.w	800365a <_printf_i+0x16e>
 8003514:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800351c:	e03a      	b.n	8003594 <_printf_i+0xa8>
 800351e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003522:	2b15      	cmp	r3, #21
 8003524:	d8f6      	bhi.n	8003514 <_printf_i+0x28>
 8003526:	a001      	add	r0, pc, #4	; (adr r0, 800352c <_printf_i+0x40>)
 8003528:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800352c:	08003585 	.word	0x08003585
 8003530:	08003599 	.word	0x08003599
 8003534:	08003515 	.word	0x08003515
 8003538:	08003515 	.word	0x08003515
 800353c:	08003515 	.word	0x08003515
 8003540:	08003515 	.word	0x08003515
 8003544:	08003599 	.word	0x08003599
 8003548:	08003515 	.word	0x08003515
 800354c:	08003515 	.word	0x08003515
 8003550:	08003515 	.word	0x08003515
 8003554:	08003515 	.word	0x08003515
 8003558:	080036a5 	.word	0x080036a5
 800355c:	080035c9 	.word	0x080035c9
 8003560:	08003687 	.word	0x08003687
 8003564:	08003515 	.word	0x08003515
 8003568:	08003515 	.word	0x08003515
 800356c:	080036c7 	.word	0x080036c7
 8003570:	08003515 	.word	0x08003515
 8003574:	080035c9 	.word	0x080035c9
 8003578:	08003515 	.word	0x08003515
 800357c:	08003515 	.word	0x08003515
 8003580:	0800368f 	.word	0x0800368f
 8003584:	680b      	ldr	r3, [r1, #0]
 8003586:	1d1a      	adds	r2, r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	600a      	str	r2, [r1, #0]
 800358c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003594:	2301      	movs	r3, #1
 8003596:	e0a3      	b.n	80036e0 <_printf_i+0x1f4>
 8003598:	6825      	ldr	r5, [r4, #0]
 800359a:	6808      	ldr	r0, [r1, #0]
 800359c:	062e      	lsls	r6, r5, #24
 800359e:	f100 0304 	add.w	r3, r0, #4
 80035a2:	d50a      	bpl.n	80035ba <_printf_i+0xce>
 80035a4:	6805      	ldr	r5, [r0, #0]
 80035a6:	600b      	str	r3, [r1, #0]
 80035a8:	2d00      	cmp	r5, #0
 80035aa:	da03      	bge.n	80035b4 <_printf_i+0xc8>
 80035ac:	232d      	movs	r3, #45	; 0x2d
 80035ae:	426d      	negs	r5, r5
 80035b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035b4:	485e      	ldr	r0, [pc, #376]	; (8003730 <_printf_i+0x244>)
 80035b6:	230a      	movs	r3, #10
 80035b8:	e019      	b.n	80035ee <_printf_i+0x102>
 80035ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035be:	6805      	ldr	r5, [r0, #0]
 80035c0:	600b      	str	r3, [r1, #0]
 80035c2:	bf18      	it	ne
 80035c4:	b22d      	sxthne	r5, r5
 80035c6:	e7ef      	b.n	80035a8 <_printf_i+0xbc>
 80035c8:	680b      	ldr	r3, [r1, #0]
 80035ca:	6825      	ldr	r5, [r4, #0]
 80035cc:	1d18      	adds	r0, r3, #4
 80035ce:	6008      	str	r0, [r1, #0]
 80035d0:	0628      	lsls	r0, r5, #24
 80035d2:	d501      	bpl.n	80035d8 <_printf_i+0xec>
 80035d4:	681d      	ldr	r5, [r3, #0]
 80035d6:	e002      	b.n	80035de <_printf_i+0xf2>
 80035d8:	0669      	lsls	r1, r5, #25
 80035da:	d5fb      	bpl.n	80035d4 <_printf_i+0xe8>
 80035dc:	881d      	ldrh	r5, [r3, #0]
 80035de:	4854      	ldr	r0, [pc, #336]	; (8003730 <_printf_i+0x244>)
 80035e0:	2f6f      	cmp	r7, #111	; 0x6f
 80035e2:	bf0c      	ite	eq
 80035e4:	2308      	moveq	r3, #8
 80035e6:	230a      	movne	r3, #10
 80035e8:	2100      	movs	r1, #0
 80035ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035ee:	6866      	ldr	r6, [r4, #4]
 80035f0:	60a6      	str	r6, [r4, #8]
 80035f2:	2e00      	cmp	r6, #0
 80035f4:	bfa2      	ittt	ge
 80035f6:	6821      	ldrge	r1, [r4, #0]
 80035f8:	f021 0104 	bicge.w	r1, r1, #4
 80035fc:	6021      	strge	r1, [r4, #0]
 80035fe:	b90d      	cbnz	r5, 8003604 <_printf_i+0x118>
 8003600:	2e00      	cmp	r6, #0
 8003602:	d04d      	beq.n	80036a0 <_printf_i+0x1b4>
 8003604:	4616      	mov	r6, r2
 8003606:	fbb5 f1f3 	udiv	r1, r5, r3
 800360a:	fb03 5711 	mls	r7, r3, r1, r5
 800360e:	5dc7      	ldrb	r7, [r0, r7]
 8003610:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003614:	462f      	mov	r7, r5
 8003616:	42bb      	cmp	r3, r7
 8003618:	460d      	mov	r5, r1
 800361a:	d9f4      	bls.n	8003606 <_printf_i+0x11a>
 800361c:	2b08      	cmp	r3, #8
 800361e:	d10b      	bne.n	8003638 <_printf_i+0x14c>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	07df      	lsls	r7, r3, #31
 8003624:	d508      	bpl.n	8003638 <_printf_i+0x14c>
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	6861      	ldr	r1, [r4, #4]
 800362a:	4299      	cmp	r1, r3
 800362c:	bfde      	ittt	le
 800362e:	2330      	movle	r3, #48	; 0x30
 8003630:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003634:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003638:	1b92      	subs	r2, r2, r6
 800363a:	6122      	str	r2, [r4, #16]
 800363c:	f8cd a000 	str.w	sl, [sp]
 8003640:	464b      	mov	r3, r9
 8003642:	aa03      	add	r2, sp, #12
 8003644:	4621      	mov	r1, r4
 8003646:	4640      	mov	r0, r8
 8003648:	f7ff fee2 	bl	8003410 <_printf_common>
 800364c:	3001      	adds	r0, #1
 800364e:	d14c      	bne.n	80036ea <_printf_i+0x1fe>
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	b004      	add	sp, #16
 8003656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365a:	4835      	ldr	r0, [pc, #212]	; (8003730 <_printf_i+0x244>)
 800365c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	680e      	ldr	r6, [r1, #0]
 8003664:	061f      	lsls	r7, r3, #24
 8003666:	f856 5b04 	ldr.w	r5, [r6], #4
 800366a:	600e      	str	r6, [r1, #0]
 800366c:	d514      	bpl.n	8003698 <_printf_i+0x1ac>
 800366e:	07d9      	lsls	r1, r3, #31
 8003670:	bf44      	itt	mi
 8003672:	f043 0320 	orrmi.w	r3, r3, #32
 8003676:	6023      	strmi	r3, [r4, #0]
 8003678:	b91d      	cbnz	r5, 8003682 <_printf_i+0x196>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	f023 0320 	bic.w	r3, r3, #32
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	2310      	movs	r3, #16
 8003684:	e7b0      	b.n	80035e8 <_printf_i+0xfc>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	f043 0320 	orr.w	r3, r3, #32
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	2378      	movs	r3, #120	; 0x78
 8003690:	4828      	ldr	r0, [pc, #160]	; (8003734 <_printf_i+0x248>)
 8003692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003696:	e7e3      	b.n	8003660 <_printf_i+0x174>
 8003698:	065e      	lsls	r6, r3, #25
 800369a:	bf48      	it	mi
 800369c:	b2ad      	uxthmi	r5, r5
 800369e:	e7e6      	b.n	800366e <_printf_i+0x182>
 80036a0:	4616      	mov	r6, r2
 80036a2:	e7bb      	b.n	800361c <_printf_i+0x130>
 80036a4:	680b      	ldr	r3, [r1, #0]
 80036a6:	6826      	ldr	r6, [r4, #0]
 80036a8:	6960      	ldr	r0, [r4, #20]
 80036aa:	1d1d      	adds	r5, r3, #4
 80036ac:	600d      	str	r5, [r1, #0]
 80036ae:	0635      	lsls	r5, r6, #24
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	d501      	bpl.n	80036b8 <_printf_i+0x1cc>
 80036b4:	6018      	str	r0, [r3, #0]
 80036b6:	e002      	b.n	80036be <_printf_i+0x1d2>
 80036b8:	0671      	lsls	r1, r6, #25
 80036ba:	d5fb      	bpl.n	80036b4 <_printf_i+0x1c8>
 80036bc:	8018      	strh	r0, [r3, #0]
 80036be:	2300      	movs	r3, #0
 80036c0:	6123      	str	r3, [r4, #16]
 80036c2:	4616      	mov	r6, r2
 80036c4:	e7ba      	b.n	800363c <_printf_i+0x150>
 80036c6:	680b      	ldr	r3, [r1, #0]
 80036c8:	1d1a      	adds	r2, r3, #4
 80036ca:	600a      	str	r2, [r1, #0]
 80036cc:	681e      	ldr	r6, [r3, #0]
 80036ce:	6862      	ldr	r2, [r4, #4]
 80036d0:	2100      	movs	r1, #0
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7fc fd7c 	bl	80001d0 <memchr>
 80036d8:	b108      	cbz	r0, 80036de <_printf_i+0x1f2>
 80036da:	1b80      	subs	r0, r0, r6
 80036dc:	6060      	str	r0, [r4, #4]
 80036de:	6863      	ldr	r3, [r4, #4]
 80036e0:	6123      	str	r3, [r4, #16]
 80036e2:	2300      	movs	r3, #0
 80036e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036e8:	e7a8      	b.n	800363c <_printf_i+0x150>
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	4632      	mov	r2, r6
 80036ee:	4649      	mov	r1, r9
 80036f0:	4640      	mov	r0, r8
 80036f2:	47d0      	blx	sl
 80036f4:	3001      	adds	r0, #1
 80036f6:	d0ab      	beq.n	8003650 <_printf_i+0x164>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	079b      	lsls	r3, r3, #30
 80036fc:	d413      	bmi.n	8003726 <_printf_i+0x23a>
 80036fe:	68e0      	ldr	r0, [r4, #12]
 8003700:	9b03      	ldr	r3, [sp, #12]
 8003702:	4298      	cmp	r0, r3
 8003704:	bfb8      	it	lt
 8003706:	4618      	movlt	r0, r3
 8003708:	e7a4      	b.n	8003654 <_printf_i+0x168>
 800370a:	2301      	movs	r3, #1
 800370c:	4632      	mov	r2, r6
 800370e:	4649      	mov	r1, r9
 8003710:	4640      	mov	r0, r8
 8003712:	47d0      	blx	sl
 8003714:	3001      	adds	r0, #1
 8003716:	d09b      	beq.n	8003650 <_printf_i+0x164>
 8003718:	3501      	adds	r5, #1
 800371a:	68e3      	ldr	r3, [r4, #12]
 800371c:	9903      	ldr	r1, [sp, #12]
 800371e:	1a5b      	subs	r3, r3, r1
 8003720:	42ab      	cmp	r3, r5
 8003722:	dcf2      	bgt.n	800370a <_printf_i+0x21e>
 8003724:	e7eb      	b.n	80036fe <_printf_i+0x212>
 8003726:	2500      	movs	r5, #0
 8003728:	f104 0619 	add.w	r6, r4, #25
 800372c:	e7f5      	b.n	800371a <_printf_i+0x22e>
 800372e:	bf00      	nop
 8003730:	08003ac5 	.word	0x08003ac5
 8003734:	08003ad6 	.word	0x08003ad6

08003738 <_sbrk_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4d06      	ldr	r5, [pc, #24]	; (8003754 <_sbrk_r+0x1c>)
 800373c:	2300      	movs	r3, #0
 800373e:	4604      	mov	r4, r0
 8003740:	4608      	mov	r0, r1
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	f7ff f86c 	bl	8002820 <_sbrk>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d102      	bne.n	8003752 <_sbrk_r+0x1a>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	b103      	cbz	r3, 8003752 <_sbrk_r+0x1a>
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	200009c4 	.word	0x200009c4

08003758 <__sread>:
 8003758:	b510      	push	{r4, lr}
 800375a:	460c      	mov	r4, r1
 800375c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003760:	f000 f8a0 	bl	80038a4 <_read_r>
 8003764:	2800      	cmp	r0, #0
 8003766:	bfab      	itete	ge
 8003768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800376a:	89a3      	ldrhlt	r3, [r4, #12]
 800376c:	181b      	addge	r3, r3, r0
 800376e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003772:	bfac      	ite	ge
 8003774:	6563      	strge	r3, [r4, #84]	; 0x54
 8003776:	81a3      	strhlt	r3, [r4, #12]
 8003778:	bd10      	pop	{r4, pc}

0800377a <__swrite>:
 800377a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377e:	461f      	mov	r7, r3
 8003780:	898b      	ldrh	r3, [r1, #12]
 8003782:	05db      	lsls	r3, r3, #23
 8003784:	4605      	mov	r5, r0
 8003786:	460c      	mov	r4, r1
 8003788:	4616      	mov	r6, r2
 800378a:	d505      	bpl.n	8003798 <__swrite+0x1e>
 800378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003790:	2302      	movs	r3, #2
 8003792:	2200      	movs	r2, #0
 8003794:	f000 f868 	bl	8003868 <_lseek_r>
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800379e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	4632      	mov	r2, r6
 80037a6:	463b      	mov	r3, r7
 80037a8:	4628      	mov	r0, r5
 80037aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ae:	f000 b817 	b.w	80037e0 <_write_r>

080037b2 <__sseek>:
 80037b2:	b510      	push	{r4, lr}
 80037b4:	460c      	mov	r4, r1
 80037b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ba:	f000 f855 	bl	8003868 <_lseek_r>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	bf15      	itete	ne
 80037c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80037c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037ce:	81a3      	strheq	r3, [r4, #12]
 80037d0:	bf18      	it	ne
 80037d2:	81a3      	strhne	r3, [r4, #12]
 80037d4:	bd10      	pop	{r4, pc}

080037d6 <__sclose>:
 80037d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037da:	f000 b813 	b.w	8003804 <_close_r>
	...

080037e0 <_write_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4d07      	ldr	r5, [pc, #28]	; (8003800 <_write_r+0x20>)
 80037e4:	4604      	mov	r4, r0
 80037e6:	4608      	mov	r0, r1
 80037e8:	4611      	mov	r1, r2
 80037ea:	2200      	movs	r2, #0
 80037ec:	602a      	str	r2, [r5, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f7fe fd8a 	bl	8002308 <_write>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d102      	bne.n	80037fe <_write_r+0x1e>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	b103      	cbz	r3, 80037fe <_write_r+0x1e>
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	200009c4 	.word	0x200009c4

08003804 <_close_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4d06      	ldr	r5, [pc, #24]	; (8003820 <_close_r+0x1c>)
 8003808:	2300      	movs	r3, #0
 800380a:	4604      	mov	r4, r0
 800380c:	4608      	mov	r0, r1
 800380e:	602b      	str	r3, [r5, #0]
 8003810:	f7fe fff8 	bl	8002804 <_close>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_close_r+0x1a>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b103      	cbz	r3, 800381e <_close_r+0x1a>
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	200009c4 	.word	0x200009c4

08003824 <_fstat_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4d07      	ldr	r5, [pc, #28]	; (8003844 <_fstat_r+0x20>)
 8003828:	2300      	movs	r3, #0
 800382a:	4604      	mov	r4, r0
 800382c:	4608      	mov	r0, r1
 800382e:	4611      	mov	r1, r2
 8003830:	602b      	str	r3, [r5, #0]
 8003832:	f7fe ffeb 	bl	800280c <_fstat>
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	d102      	bne.n	8003840 <_fstat_r+0x1c>
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	b103      	cbz	r3, 8003840 <_fstat_r+0x1c>
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	bd38      	pop	{r3, r4, r5, pc}
 8003842:	bf00      	nop
 8003844:	200009c4 	.word	0x200009c4

08003848 <_isatty_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4d06      	ldr	r5, [pc, #24]	; (8003864 <_isatty_r+0x1c>)
 800384c:	2300      	movs	r3, #0
 800384e:	4604      	mov	r4, r0
 8003850:	4608      	mov	r0, r1
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	f7fe ffe0 	bl	8002818 <_isatty>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_isatty_r+0x1a>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_isatty_r+0x1a>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	200009c4 	.word	0x200009c4

08003868 <_lseek_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4d07      	ldr	r5, [pc, #28]	; (8003888 <_lseek_r+0x20>)
 800386c:	4604      	mov	r4, r0
 800386e:	4608      	mov	r0, r1
 8003870:	4611      	mov	r1, r2
 8003872:	2200      	movs	r2, #0
 8003874:	602a      	str	r2, [r5, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	f7fe ffd0 	bl	800281c <_lseek>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_lseek_r+0x1e>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_lseek_r+0x1e>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	200009c4 	.word	0x200009c4

0800388c <__malloc_lock>:
 800388c:	4801      	ldr	r0, [pc, #4]	; (8003894 <__malloc_lock+0x8>)
 800388e:	f7ff bb55 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8003892:	bf00      	nop
 8003894:	200009bc 	.word	0x200009bc

08003898 <__malloc_unlock>:
 8003898:	4801      	ldr	r0, [pc, #4]	; (80038a0 <__malloc_unlock+0x8>)
 800389a:	f7ff bb50 	b.w	8002f3e <__retarget_lock_release_recursive>
 800389e:	bf00      	nop
 80038a0:	200009bc 	.word	0x200009bc

080038a4 <_read_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d07      	ldr	r5, [pc, #28]	; (80038c4 <_read_r+0x20>)
 80038a8:	4604      	mov	r4, r0
 80038aa:	4608      	mov	r0, r1
 80038ac:	4611      	mov	r1, r2
 80038ae:	2200      	movs	r2, #0
 80038b0:	602a      	str	r2, [r5, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7fe ff98 	bl	80027e8 <_read>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_read_r+0x1e>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_read_r+0x1e>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	200009c4 	.word	0x200009c4

080038c8 <_init>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr

080038d4 <_fini>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr
